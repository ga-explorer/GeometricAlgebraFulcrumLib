using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using DataStructuresLib.Basic;
using DataStructuresLib.Extensions;
using DataStructuresLib.Files;
using GeometricAlgebraFulcrumLib.Lite.Geometry.Differential;
using GeometricAlgebraFulcrumLib.Lite.Geometry.Differential.Functions;
using GeometricAlgebraFulcrumLib.Lite.Geometry.Differential.Functions.Interpolators;
using GeometricAlgebraFulcrumLib.Lite.Geometry.Differential.Functions.Phasors;
using GeometricAlgebraFulcrumLib.Lite.Geometry.Parametric;
using GeometricAlgebraFulcrumLib.Lite.LinearAlgebra;
using GeometricAlgebraFulcrumLib.Lite.ScalarAlgebra;
using GeometricAlgebraFulcrumLib.Lite.SignalAlgebra;
using GeometricAlgebraFulcrumLib.Lite.SignalAlgebra.Composers;
using GeometricAlgebraFulcrumLib.MathBase;
using GeometricAlgebraFulcrumLib.MathBase.SignalAlgebra;
using OfficeOpenXml;
using OxyPlot;
using OxyPlot.Series;
using SixLabors.ImageSharp;

namespace GeometricAlgebraFulcrumLib.Samples.Numeric;

public static class InterpolationSample
{
    private const string WorkingPath
        = @"D:\Projects\Books\The Geometric Algebra Cookbook\Geometric Frequency\Data";

    public static ScalarProcessorOfFloat64 ScalarProcessor { get; }
        = ScalarProcessorOfFloat64.DefaultProcessor;

    public static double SamplingRate
        => 1000;
        

    private static void PlotSignals(this string plotFileName, Float64Signal scalarSignal1, Float64Signal scalarSignal2, double tMin, double tMax)
    {
        var pm = new PlotModel
        {
            //Title = "title",
            Background = OxyColor.FromRgb(255, 255, 255)
        };

        var s1 = new FunctionSeries(
            t => scalarSignal1.LinearInterpolation(t - tMin),
            tMin,
            tMax,
            scalarSignal1.Count,
            @"Signal 1"
        )
        {
            LineStyle = LineStyle.Dot,
            StrokeThickness = 1,
            //MarkerType = MarkerType.Diamond,
            //MarkerStrokeThickness = 1,
            //MarkerSize = 4
        };

            
        var s2 = new FunctionSeries(
            t => scalarSignal2.LinearInterpolation(t - tMin),
            tMin,
            tMax,
            scalarSignal2.Count * 2,
            @$"Signal 2"
        )
        {
            StrokeThickness = 1.5
        };

        pm.Series.Add(s1);
        pm.Series.Add(s2);

        //OxyPlot.SkiaSharp.PdfExporter.Export(pm, filePath + ".pdf", 1024, 768);
        OxyPlot.SkiaSharp.PngExporter.Export(pm, $"{plotFileName}.png", scalarSignal1.Count * 2, 750, 200);
    }

    private static void PlotSignal(this Float64Signal signalSamples, string title, string filePath)
    {
        var tMin = 0;
        var tMax = (signalSamples.Count - 1) / signalSamples.SamplingRate;

        signalSamples.PlotSignal(tMin, tMax, title, filePath);
    }

    private static void PlotSignal(this Float64Signal signalSamples, double tMin, double tMax, string title, string filePath)
    {
        filePath = Path.Combine(WorkingPath, filePath);

        var pm = new PlotModel
        {
            Title = title,
            Background = OxyColor.FromRgb(255, 255, 255)
        };

        var s1 = new FunctionSeries(
            signalSamples.LinearInterpolation,
            tMin,
            tMax,
            signalSamples.Count * 2
        );

        pm.Series.Add(s1);

        //OxyPlot.SkiaSharp.PdfExporter.Export(pm, filePath + ".pdf", 1024, 768);
        OxyPlot.SkiaSharp.PngExporter.Export(pm, filePath + ".png", signalSamples.Count * 2, 750, 200);
    }
        

    private static ScalarFourierSeries CreateInterpolator1()
    {
        var interpolator = ScalarFourierSeries.Create();

        //interpolator.SetTerm(0, -0.0008918465852899786, 7.298986488261578E-19);
        //interpolator.SetTerm(31.41592653589793, -0.001849429024721126, 0.00015337250193866683);
        //interpolator.SetTerm(62.83185307179586, 4.7530844969167234E-05, -0.0013296851513601529);
        //interpolator.SetTerm(94.24777960769379, 0.00042638368413691207, -8.071541606071926E-05);
        //interpolator.SetTerm(125.66370614359172, 0.0006844709075406579, -0.0006394278778030218);
        //interpolator.SetTerm(157.07963267948966, 0.001342459237151827, 0.0011795088053765017);
        //interpolator.SetTerm(188.49555921538757, -0.0009229044657422976, 0.001339556524580102);
        //interpolator.SetTerm(219.9114857512855, -0.0010873560656843514, 0.00013453341683292426);
        //interpolator.SetTerm(251.32741228718345, -0.001054567811943111, -0.0008485689924399493);
        //interpolator.SetTerm(282.7433388230814, 0.0005078045131535667, -0.0008767409761595795);
        //interpolator.SetTerm(314.1592653589793, -0.00011272478011125553, 7.333007213582838E-05);
        //interpolator.SetTerm(345.57519189487726, 0.0002221770055879206, -0.0007174248256692574);
        //interpolator.SetTerm(376.99111843077515, 0.00044700197389454334, 0.0002681231575422134);
        //interpolator.SetTerm(408.4070449666731, -0.00015373345856916444, 6.11439645603232E-05);
        //interpolator.SetTerm(439.822971502571, -0.000260362233670263, 2.135916070105943E-05);
        //interpolator.SetTerm(471.23889803846896, -0.00010384865603318901, -0.0006018813586294738);
        //interpolator.SetTerm(502.6548245743669, 0.0003050058994193083, 0.00016229178906774564);
        //interpolator.SetTerm(534.0707511102648, -0.0007144644211549546, -0.000427978368453392);
        //interpolator.SetTerm(565.4866776461628, 0.0007065828467912261, -0.0008877922776705338);
        //interpolator.SetTerm(596.9026041820607, 0.00014313899690494134, 0.000324831669814891);
        //interpolator.SetTerm(628.3185307179587, 4.42786761017357E-06, -0.0009816469728437726);
        //interpolator.SetTerm(659.7344572538566, 0.0013179797747650945, -0.0001716667378046745);
        //interpolator.SetTerm(691.1503837897545, 0.0004104010610052938, 0.000549312855489696);
        //interpolator.SetTerm(722.5663103256525, 0.000431348737007759, 0.0001955677506571966);
        //interpolator.SetTerm(753.9822368615503, 0.00023439531742174696, 0.0008187802954038036);
        //interpolator.SetTerm(785.3981633974482, -0.0007958743588814072, 0.0003327295237410329);
        //interpolator.SetTerm(816.8140899333462, -0.00010751197015109671, -0.0007831565139381697);
        //interpolator.SetTerm(848.2300164692441, 0.0005767820958079012, -2.3684509776158426E-05);
        //interpolator.SetTerm(879.645943005142, 0.00022879558885832067, -0.00010288832561332154);
        //interpolator.SetTerm(911.06186954104, 0.0007749724811548744, 0.00035163181616456387);
        //interpolator.SetTerm(942.4777960769379, -8.104874755674997E-05, 0.0007145211516581246);
        //interpolator.SetTerm(973.8937226128359, -2.0758693838012774E-05, 0.0003869975073343542);
        //interpolator.SetTerm(1005.3096491487338, -0.0005765210245995161, 0.0005475275085408861);
        //interpolator.SetTerm(1036.7255756846316, -0.0006272652898899823, -0.0002475340347142534);
        //interpolator.SetTerm(1068.1415022205297, -0.0003673508491926254, -0.00048251145879055543);
        //interpolator.SetTerm(1099.5574287564275, 0.0003195258195665114, -0.0007735285853995179);
        //interpolator.SetTerm(1130.9733552923256, 0.0006720592705808776, 6.122248818821963E-05);
        //interpolator.SetTerm(1162.3892818282234, 0.00020384218797238956, 0.0002412875625210497);
        //interpolator.SetTerm(1193.8052083641214, 9.1601801954991E-05, 0.00019012205714903348);
        //interpolator.SetTerm(1225.2211349000193, 6.595978614488661E-05, 0.0001502008798474061);
        //interpolator.SetTerm(1256.6370614359173, -0.0001341128187086876, 0.0001753432841792578);
        //interpolator.SetTerm(1288.0529879718151, 1.4413399632421677E-05, -0.00023162370003613746);
        //interpolator.SetTerm(1319.4689145077132, 0.0003402025190196052, 0.0002465300885240056);
        //interpolator.SetTerm(1350.884841043611, -0.00032911557956909334, 0.0002921520203709632);
        //interpolator.SetTerm(1413.7166941154069, 0.00021537911320883247, -3.731695617552944E-05);
        //interpolator.SetTerm(1445.132620651305, -1.495698086746695E-05, -0.00014467230627312122);
        //interpolator.SetTerm(1476.5485471872028, 0.000597067676161484, -7.981600161305604E-05);
        //interpolator.SetTerm(1507.9644737231006, 0.00010823576747740961, 0.0006939892319862094);
        //interpolator.SetTerm(1570.7963267948965, 2.930028067577515E-05, 0.00013524320089051858);
        //interpolator.SetTerm(1602.2122533307945, -0.0002851715746221281, -1.0434814901312122E-06);
        //interpolator.SetTerm(1633.6281798666923, 4.165935745324578E-05, -0.00021919490815210246);
        //interpolator.SetTerm(1665.0441064025904, 0.00013675997953926976, -3.325640736911819E-05);
        //interpolator.SetTerm(1696.4600329384882, 0.00013238759155177827, 2.4388639174622444E-05);
        //interpolator.SetTerm(1759.291886010284, 6.087490449193973E-05, 0.00012739864611472292);
        //interpolator.SetTerm(1790.7078125461821, 7.398412666728917E-05, 0.00010217201823066749);
        //interpolator.SetTerm(1853.539665617978, -0.00014166462154878418, 1.5563018245048752E-05);
        //interpolator.SetTerm(1947.7874452256717, -3.168226970950467E-05, -3.734430940959851E-05);
        //interpolator.SetTerm(2010.6192982974676, 5.3447573543359587E-05, 2.7803092856685602E-05);
        //interpolator.SetTerm(2073.4511513692632, 3.65495888668901E-05, 3.385706702709128E-05);
        //interpolator.SetTerm(2104.8670779051613, 3.360698047095231E-05, 2.963899809196104E-05);
        //interpolator.SetTerm(2293.362637120549, -1.496825822279822E-06, 0.00016961463941229);
        //interpolator.SetTerm(2324.7785636564467, -4.9997318736549784E-05, 7.847213926639567E-05);
        //interpolator.SetTerm(2387.610416728243, -4.992338047951142E-05, 0.0001282758444410438);
        //interpolator.SetTerm(2607.5219024795283, -4.3385767392789165E-05, 0.00010353559934222243);
        //interpolator.SetTerm(2638.9378290154264, -3.0088456106932693E-05, 9.510145889805916E-05);
        //interpolator.SetTerm(3801.3271108436497, -1.042177151218364E-05, 0.00011742123872222695);
        //interpolator.SetTerm(3832.743037379548, -0.00012121057302043262, 3.975916827555833E-05);
        //interpolator.SetTerm(6188.937527571892, -3.225154564588442E-05, -2.6071303238254556E-05);
        //interpolator.SetTerm(6785.840131753953, -8.232605690763795E-06, 1.564882721494612E-05);
        //interpolator.SetTerm(6817.256058289851, 3.138708744463901E-05, 1.3125700058451942E-05);
        //interpolator.SetTerm(8482.300164692442, -3.9461220553463615E-05, -2.5067339822824274E-05);
        //interpolator.SetTerm(8859.291283123217, 2.5096717741785227E-05, -1.7748433256721962E-05);
        //interpolator.SetTerm(10398.671683382216, 5.5471714768298156E-05, 2.0056254364504004E-05);
        //interpolator.SetTerm(10430.087609918113, 5.515485810855528E-05, -8.495777218775355E-07);
        //interpolator.SetTerm(10461.50353645401, 4.486249530864184E-05, 9.149496905298601E-05);
        //interpolator.SetTerm(10492.919462989908, -6.493553640881167E-05, 5.1038408663692975E-05);
        //interpolator.SetTerm(10587.167242597603, 5.679568565829634E-05, -5.446013776872784E-05);
        //interpolator.SetTerm(10649.999095669398, 8.063476933155861E-05, 5.764445623265735E-05);
        //interpolator.SetTerm(10681.415022205296, 1.2874999508967944E-05, 8.315650018635515E-05);
        //interpolator.SetTerm(10838.494654884786, 7.646151499653753E-05, 2.2088294050771518E-05);
        //interpolator.SetTerm(10869.910581420685, 4.680024444907031E-05, 1.2837995671459268E-05);
        //interpolator.SetTerm(11309.733552923255, -6.551249635757497E-05, -2.8372116264114627E-05);
        //interpolator.SetTerm(11341.149479459153, -2.049203133801055E-05, -7.843294004939602E-05);
        //interpolator.SetTerm(11372.56540599505, 1.7928379386406614E-05, -5.474322361901457E-05);
        //interpolator.SetTerm(11655.308744818132, 7.099584698381987E-05, 1.218230040542105E-05);
        //interpolator.SetTerm(11686.72467135403, -2.016351829442091E-05, 1.4423664209365068E-05);
        //interpolator.SetTerm(11749.556524425827, -1.106724534348732E-05, 8.728102417562536E-05);
        //interpolator.SetTerm(12723.450247038661, 3.5042339979285434E-05, -4.2257728738050826E-05);
        //interpolator.SetTerm(12974.777659325846, -4.356379536361642E-05, -4.6215480081496235E-06);
        //interpolator.SetTerm(13446.016557364315, -4.03828807180549E-05, 4.5104416015717386E-05);
        //interpolator.SetTerm(13634.512116579703, 4.594968535798765E-06, -2.6072350913692043E-05);
        //interpolator.SetTerm(13885.839528866885, -1.3890228820267104E-05, 2.543968086447489E-05);
        //interpolator.SetTerm(13917.255455402783, 1.0304936127967453E-05, -5.320752896608977E-05);
        //interpolator.SetTerm(13948.671381938682, 5.5401802976421425E-05, 1.7009736777109486E-05);
        //interpolator.SetTerm(14231.414720761763, -1.96422775317771E-05, 2.2188565250439627E-05);
        //interpolator.SetTerm(14262.83064729766, 2.1966184951757142E-05, 4.8536331713068056E-05);
        //interpolator.SetTerm(14765.485471872027, 1.3154383834793539E-05, -2.1922560046247694E-05);
        //interpolator.SetTerm(14796.901398407925, 1.9856515079274972E-05, 2.3858057620290623E-05);
        //interpolator.SetTerm(16179.202165987435, -5.175593573757944E-05, 1.5793135822890496E-06);
        //interpolator.SetTerm(18880.971848074656, 1.6108286395104188E-05, -2.6188726979634823E-05);
        //interpolator.SetTerm(18912.387774610554, 2.9758370950057108E-05, 1.6322752415442347E-05);
        //interpolator.SetTerm(20388.93632179776, 2.207709111203611E-05, 9.421891628390095E-06);
        //interpolator.SetTerm(27708.847204661975, 3.9578373072206635E-06, 7.948451317621306E-05);
        //interpolator.SetTerm(27740.263131197873, 1.074352296648303E-05, 7.816651308390008E-05);
        //interpolator.SetTerm(31038.935417467157, -4.694543849378911E-05, -3.5444927993659084E-05);
        //interpolator.SetTerm(31478.758388969727, 1.2423219019153584E-05, 2.685255276211853E-05);
        //interpolator.SetTerm(31635.838021649215, 5.0016414541218704E-05, -9.514226471731235E-05);
        //interpolator.SetTerm(31730.08580125691, 4.7516024155878344E-05, 3.2386238031270995E-05);
        //interpolator.SetTerm(31761.50172779281, 3.392102612573579E-05, -9.177404746125826E-06);
        //interpolator.SetTerm(31792.917654328707, 3.475183092008088E-05, 4.617924572723849E-05);
        //interpolator.SetTerm(32326.98840543897, -1.8093657667950644E-05, 9.233058442982152E-05);
        //interpolator.SetTerm(32358.40433197487, -7.226835665595022E-05, 5.1183727738954616E-05);
        //interpolator.SetTerm(32389.82025851077, -6.144081922308796E-05, -1.7753510990455913E-05);
        //interpolator.SetTerm(32421.236185046666, 2.988352369225548E-06, -1.2718199200311834E-05);
        //interpolator.SetTerm(32452.652111582564, -5.120947052495129E-06, 3.286872592612159E-06);
        //interpolator.SetTerm(33049.55471576462, -1.0578289784761544E-07, -5.5612897353976725E-05);
        //interpolator.SetTerm(33080.97064230052, 1.4894435613251822E-05, -7.135497099530549E-06);
        //interpolator.SetTerm(33238.050274980014, 0.0001078680489317823, 4.0167189814306664E-05);
        //interpolator.SetTerm(33269.46620151591, 1.9355466009497877E-05, 9.728357710751265E-05);
        //interpolator.SetTerm(33363.713981123605, -5.101607116981061E-05, -1.2071028624721085E-05);
        //interpolator.SetTerm(35217.25364674158, 6.85561164894096E-06, 5.1835706854325866E-05);
        //interpolator.SetTerm(35248.669573277475, -8.324664857904226E-05, 3.463461113779143E-05);
        //interpolator.SetTerm(35594.244765172356, -3.3197934384859272E-06, -1.3996195253397807E-05);
        //interpolator.SetTerm(35751.324397851844, -5.44424030336951E-05, 7.349023561798883E-06);
        //interpolator.SetTerm(35782.74032438774, -2.8780983065321424E-05, 3.1138250554371466E-06);
        //interpolator.SetTerm(35814.15625092364, -4.561872217679131E-05, 2.1398001666233E-05);
        //interpolator.SetTerm(35845.57217745954, -3.137664116969939E-05, -4.265152341824989E-05);
        //interpolator.SetTerm(35908.40403053133, -1.1302809871310566E-05, 5.2347958611941486E-05);
        //interpolator.SetTerm(35939.81995706724, -4.405026122735914E-05, 5.712065238056662E-05);
        //interpolator.SetTerm(36034.06773667493, -5.5442545313240244E-05, -7.694979025012942E-05);
        //interpolator.SetTerm(36096.899589746725, 9.463732685084005E-05, -3.135922152112087E-05);
        //interpolator.SetTerm(36128.31551628262, 6.23519114607595E-05, 8.31331150356804E-05);
        //interpolator.SetTerm(36159.73144281852, -3.227452403291612E-05, 7.881001775592057E-05);
        //interpolator.SetTerm(36191.14736935442, -6.218429725331689E-05, 5.755020596349338E-05);
        //interpolator.SetTerm(36222.563295890315, -0.00010428560509915035, 1.2640102998211125E-05);
        //interpolator.SetTerm(36316.81107549801, 3.3575472223737594E-05, -7.966994508494463E-05);
        //interpolator.SetTerm(36348.227002033906, 4.8290343905926584E-05, -5.217050545906363E-05);
        //interpolator.SetTerm(36379.6429285698, 6.29906337297612E-05, 1.3753882719714898E-05);
        //interpolator.SetTerm(36473.890708177496, -9.486967734124031E-05, 9.410943676826683E-08);
        //interpolator.SetTerm(37447.784430790336, 4.177901615571843E-05, 2.1905539671521723E-05);
        //interpolator.SetTerm(38358.846300331374, 6.235677513485695E-05, -6.613433283460561E-05);
        //interpolator.SetTerm(38421.67815340317, 5.702774633174274E-05, 5.8143613001364135E-05);
        //interpolator.SetTerm(38453.09407993907, 4.687198025729847E-06, 9.493520053523453E-05);
        //interpolator.SetTerm(38610.173712618554, 4.259849320408379E-05, -9.641002757016216E-05);
        //interpolator.SetTerm(38641.58963915445, 9.44335567102793E-05, -3.961308428220071E-05);
        //interpolator.SetTerm(38735.83741876215, -4.8305225649006085E-06, 0.00011188982762656523);
        //interpolator.SetTerm(39175.66039026472, -4.524641250493294E-05, 3.259970562898818E-05);
        //interpolator.SetTerm(39207.076316800616, 1.764812573886482E-05, -2.5133157330345744E-05);
        //interpolator.SetTerm(39426.98780255191, 3.1568747034373346E-05, -3.503003876936454E-05);
        //interpolator.SetTerm(39521.2355821596, -7.616023055996721E-05, 3.325246753425195E-05);
        //interpolator.SetTerm(39709.731141374985, 3.646589991813332E-05, -7.79652951146682E-07);
        //interpolator.SetTerm(41626.10266006476, -4.4346334994532824E-05, 7.95320566080905E-05);
        //interpolator.SetTerm(41908.84599888784, -3.2508517848852977E-06, 4.277542127655297E-05);
        //interpolator.SetTerm(46118.58015469816, -1.981929698500125E-06, -3.278874043839034E-05);
        //interpolator.SetTerm(46244.24386084176, 7.28899566717111E-05, 4.9447376624324544E-05);
        //interpolator.SetTerm(46275.659787377655, 9.465674544429785E-06, 7.296560258996713E-05);
        //interpolator.SetTerm(46307.07571391355, -1.66987137316015E-05, 3.6720647534209874E-05);
        //interpolator.SetTerm(46338.49164044945, -3.497860900963917E-06, 3.680148417178025E-05);
        //interpolator.SetTerm(46369.90756698535, -2.917013815285455E-05, 3.775292711522987E-05);
        //interpolator.SetTerm(46432.73942005714, -2.6651524588275715E-05, 7.27550455426906E-06);
        //interpolator.SetTerm(46715.48275888022, -2.5004971818884216E-05, 2.3232244358843253E-05);
        //interpolator.SetTerm(46746.89868541612, -6.889720823249544E-05, 1.7273971204471417E-05);
        //interpolator.SetTerm(46778.31461195202, -4.1210548306234265E-05, -6.765412022541942E-05);
        //interpolator.SetTerm(46809.730538487915, 3.12118559433418E-05, -2.8631419902435248E-05);
        //interpolator.SetTerm(46872.56239155971, 2.6101283059271375E-05, 1.5225759752975312E-05);
        //interpolator.SetTerm(46966.81017116741, -3.09438179496954E-05, 6.593306149908488E-06);
        //interpolator.SetTerm(46998.22609770331, -2.1039868567025455E-05, 7.066686231390415E-06);
        //interpolator.SetTerm(47061.0579507751, 3.887965096800098E-05, -7.010207912942257E-06);
        //interpolator.SetTerm(47092.473877311, -5.005983230199665E-06, 5.235553257655915E-05);
        //interpolator.SetTerm(47123.8898038469, -3.5240888399192524E-05, 1.7546872155463065E-05);
        //interpolator.SetTerm(47155.305730382795, -2.4894650056658814E-05, 1.029520183490864E-05);
        //interpolator.SetTerm(47218.13758345459, -6.76907408888375E-05, -1.4785364388558694E-05);
        //interpolator.SetTerm(47249.55350999049, -2.448093460223062E-05, -5.167307210419928E-05);
        //interpolator.SetTerm(47312.38536306228, 2.475363092097797E-05, -1.0266131488338272E-05);
        //interpolator.SetTerm(47343.80128959818, -1.2917585264270162E-05, 1.2574766162508445E-06);
        //interpolator.SetTerm(47375.21721613408, 2.530239421115605E-05, -8.120820114773662E-06);
        //interpolator.SetTerm(47500.88092227767, -5.202719963422369E-06, -2.489995698860836E-05);
        //interpolator.SetTerm(47532.29684881357, 1.7840673381586672E-05, -1.7383421858055866E-05);
        //interpolator.SetTerm(47595.12870188537, 2.0869441383687215E-05, -2.3892431665983136E-06);
        //interpolator.SetTerm(47626.54462842127, 1.5381522002389973E-05, 4.966293413579481E-06);
        //interpolator.SetTerm(48034.951673387935, -7.420750800865636E-05, -3.269076887319463E-05);
        //interpolator.SetTerm(49699.99577979053, 1.571379730214615E-05, -5.841539030058362E-05);
        //interpolator.SetTerm(49731.41170632643, 4.5019482739565624E-05, -9.693725044002491E-06);
        //interpolator.SetTerm(51710.615078088, -7.337938802497009E-06, 6.140116844563822E-05);
        //interpolator.SetTerm(52621.676947629036, 4.0743596903260475E-05, 1.891033153492344E-05);
        //interpolator.SetTerm(52653.09287416493, -2.7738438564389185E-05, 6.11346145206409E-05);
        //interpolator.SetTerm(53249.995478346995, -2.905783598524264E-05, -2.8840875830650448E-05);
        //interpolator.SetTerm(55731.85367468293, -6.330100978183063E-05, -2.6530878790196098E-05);
        //interpolator.SetTerm(57930.96853219579, 2.1583436979231534E-06, 1.7450120438217946E-05);
        //interpolator.SetTerm(59658.84449167017, -4.123236751779176E-05, -9.361868838397276E-05);
        //interpolator.SetTerm(59690.26041820607, 5.888119718720211E-05, -3.186606192960585E-05);
        //interpolator.SetTerm(60255.74709585223, 3.122960948295759E-05, 1.747630938676891E-05);
        //interpolator.SetTerm(60287.16302238813, 6.121157084101488E-07, 2.4838311443803057E-05);
        //interpolator.SetTerm(60381.41080199582, -3.578365880695793E-05, -7.213104953883076E-05);
        //interpolator.SetTerm(60946.897479641986, 6.823264758586779E-05, 1.58154586900942E-05);
        //interpolator.SetTerm(61292.47267153687, -1.2208556066443795E-05, 6.438600642499397E-06);
        //interpolator.SetTerm(62611.94158604457, 5.099536442477359E-05, -6.808407457211183E-05);
        //interpolator.SetTerm(62643.35751258048, 9.608909176853977E-05, 0.00010528264331074837);
        //interpolator.SetTerm(62674.773439116376, -5.999668836267563E-05, 8.214228615697042E-05);
        //interpolator.SetTerm(62737.60529218817, -0.00011510752016507315, -2.7665250393319597E-05);
        //interpolator.SetTerm(62769.02121872407, -4.949663947167228E-05, -6.866659181930923E-05);
        //interpolator.SetTerm(62831.853071795864, 0.0002093258420529642, -6.836811596218878E-05);
        //interpolator.SetTerm(62863.26899833176, 7.475058217801456E-05, 0.00016430191112725724);
        //interpolator.SetTerm(62894.68492486766, -6.204588868956144E-05, 8.18555585320136E-05);
        //interpolator.SetTerm(62926.10085140356, -8.521004800614083E-05, 1.6158534994642124E-05);
        //interpolator.SetTerm(62957.516777939454, -4.192290062289859E-05, -4.392533497776535E-05);
        //interpolator.SetTerm(63051.76455754715, 0.00011915142385967106, 5.812280690779707E-05);
        //interpolator.SetTerm(63083.180484083045, -3.714113010087811E-05, 8.173603991205682E-05);
        //interpolator.SetTerm(63146.01233715484, -2.252577354504041E-05, 3.778719591002923E-05);
        //interpolator.SetTerm(63177.42826369074, -7.903686897498361E-05, -2.5966876417210176E-05);
        //interpolator.SetTerm(63303.09196983433, 4.614769781013008E-05, -2.1622926092168878E-05);
        //interpolator.SetTerm(63899.99457401639, -0.00013280960029243323, -6.092315005304765E-05);
        //interpolator.SetTerm(63931.41050055229, 7.173685398120684E-06, -0.0001288572149122479);
        //interpolator.SetTerm(63962.826427088185, 6.141953538083524E-05, -6.658307422037627E-05);
        //interpolator.SetTerm(63994.24235362408, 9.214235534843172E-05, -4.141997683452063E-05);
        //interpolator.SetTerm(64025.65828015999, 0.00013501863507765652, 3.430116903637882E-05);
        //interpolator.SetTerm(64057.074206695885, 4.8629379302001135E-05, 0.00014373361010524085);
        //interpolator.SetTerm(64088.49013323178, -4.107374577011416E-05, 6.488703294327664E-05);
        //interpolator.SetTerm(64182.737912839475, -6.197002846161145E-05, -1.238753138458272E-05);
        //interpolator.SetTerm(64308.401618983065, -4.1738196322930175E-05, 6.305950615803101E-05);
        //interpolator.SetTerm(64339.81754551896, -1.683526009821678E-05, -1.484155229431534E-05);
        //interpolator.SetTerm(64496.89717819845, 4.62032753279411E-05, -9.682272678296362E-05);
        //interpolator.SetTerm(65188.047561988205, 2.0144745467582682E-05, -3.953728922725609E-06);
        //interpolator.SetTerm(67669.90575832414, 7.405273812094035E-05, -5.208004620743785E-05);
        //interpolator.SetTerm(71911.05584067036, -1.7558405380189998E-05, 1.8763426380953226E-05);
        //interpolator.SetTerm(71942.47176720627, -4.297689642697249E-05, 6.54072587373972E-06);
        //interpolator.SetTerm(73293.35660824987, -6.3454986260862E-05, -1.276065454095822E-05);
        //interpolator.SetTerm(73324.77253478578, -5.978646097419579E-05, -4.0593114090633976E-05);
        //interpolator.SetTerm(73356.18846132167, -2.6776324568319835E-05, -8.428162727956255E-05);
        //interpolator.SetTerm(73481.85216746526, 2.6597476809054292E-05, 2.5684878612112E-05);
        //interpolator.SetTerm(77785.83410288328, 2.2880305335856776E-06, -1.0659082224164584E-05);
        //interpolator.SetTerm(77880.08188249097, 3.5275445439223077E-07, -4.741928840114794E-06);
        //interpolator.SetTerm(77911.49780902687, 3.1346078029787324E-05, 2.5555083986967773E-05);
        //interpolator.SetTerm(77942.91373556276, -1.4045327434816999E-05, 3.8302275351491527E-05);
        //interpolator.SetTerm(77974.32966209867, -2.2310069935444166E-05, 4.369542994023795E-05);
        //interpolator.SetTerm(78005.74558863456, -6.901758299965264E-05, 1.4948789710650729E-05);
        //interpolator.SetTerm(78068.57744170637, -6.302208993040775E-05, -3.209052175118151E-05);
        //interpolator.SetTerm(78194.24114784996, 1.1613881122347313E-05, -9.661027948678436E-06);
        //interpolator.SetTerm(78288.48892745764, -1.1930046034584603E-05, -1.6873957825327742E-05);
        //interpolator.SetTerm(78319.90485399355, 1.599489966662043E-05, -1.0617667635841782E-05);
        //interpolator.SetTerm(80644.68341764998, -6.715405013571443E-05, -9.691271898208727E-05);
        //interpolator.SetTerm(80676.09934418589, 1.5664085083097595E-05, -8.673499621903408E-05);
        //interpolator.SetTerm(80738.93119725768, 0.0001532924268578776, -6.93960314105721E-05);
        //interpolator.SetTerm(80770.34712379359, 0.00010174428701777288, 5.040618493084778E-05);
        //interpolator.SetTerm(80864.59490340127, -8.135522734391721E-05, 1.0980443059393256E-05);
        //interpolator.SetTerm(83346.4530997372, -6.805994789991219E-09, 3.8589182835235104E-05);
        //interpolator.SetTerm(83440.7008793449, 9.594822409804173E-06, -4.8450408225082344E-05);
        //interpolator.SetTerm(85294.24054496289, 5.6035939894528534E-05, -1.6503596107223863E-05);
        //interpolator.SetTerm(85325.65647149878, 6.429407162276774E-05, 1.3932433538819273E-05);
        //interpolator.SetTerm(85357.07239803468, 4.251635181844169E-05, 6.271681421758611E-05);
        //interpolator.SetTerm(85451.32017764237, -2.7656690677379785E-05, -2.996480113552422E-05);
        //interpolator.SetTerm(85702.64758992956, -2.359687163978195E-05, -9.600831970843517E-06);
        //interpolator.SetTerm(85734.06351646545, -7.715515318416845E-05, -5.405183225814228E-06);
        //interpolator.SetTerm(91734.50548482196, -3.0003802313340358E-05, -1.2911034194106314E-05);
        //interpolator.SetTerm(92111.49660325273, 3.866329215957389E-05, -1.3496133208621809E-05);
        //interpolator.SetTerm(92142.91252978863, 3.878450625960266E-05, 3.1272390360244577E-06);
        //interpolator.SetTerm(92771.23106050659, 5.2487175019778924E-05, 1.2643337097333096E-05);
        //interpolator.SetTerm(93336.71773815276, 3.763064474601708E-05, -5.1364693598687706E-05);
        //interpolator.SetTerm(93399.54959122455, 9.341203086978013E-05, 5.323004124014276E-05);
        //interpolator.SetTerm(93430.96551776044, -1.2596644342696757E-05, 0.0001335508780804903);
        //interpolator.SetTerm(93493.79737083224, -0.00013153856163104118, 8.09696019265899E-06);
        //interpolator.SetTerm(93525.21329736814, -6.986028091132268E-05, -0.00010826885373616393);
        //interpolator.SetTerm(93745.12478311942, 1.0215841280848534E-05, 7.287338464468708E-05);
        //interpolator.SetTerm(93776.54070965532, -9.604404991934943E-05, 1.8348928003817455E-05);
        //interpolator.SetTerm(94122.1159015502, 0.00010917529212799277, -6.533501247722716E-05);
        //interpolator.SetTerm(94342.02738730148, -4.0408401183566534E-05, -5.6092732632044926E-05);
        //interpolator.SetTerm(94499.10701998098, 3.768285516407887E-05, 6.91237982424717E-05);
        //interpolator.SetTerm(94687.60257919636, 5.034575735898438E-05, 7.194301767298422E-05);
        //interpolator.SetTerm(94719.01850573227, -2.9847482769426693E-05, 4.4144752380143176E-05);
        //interpolator.SetTerm(94844.68221187586, -8.8240754901825E-06, -4.942482772090485E-07);
        //interpolator.SetTerm(102384.50458049135, 5.6607627396202585E-05, -1.2364240155611158E-06);
        //interpolator.SetTerm(102887.15940506573, -4.867102647610673E-05, -2.462159115765031E-05);
        //interpolator.SetTerm(102981.40718467342, 2.8953858311584647E-05, -4.9306495652931396E-05);
        //interpolator.SetTerm(103044.23903774521, 9.525279806901104E-05, 2.8324821004522198E-05);
        //interpolator.SetTerm(104615.0353645401, 2.3460447479170233E-05, -7.981281320906518E-05);
        //interpolator.SetTerm(105117.69018911448, -3.095121148238203E-05, -5.244160243922255E-05);
        //interpolator.SetTerm(109044.68100610172, 9.638363828062291E-05, 5.5743334572662875E-06);
        //interpolator.SetTerm(109767.24731642737, 2.4826749987076328E-05, 2.420175064978321E-07);
        //interpolator.SetTerm(109798.66324296327, -5.262930372450449E-06, 1.4432286099432346E-05);
        //interpolator.SetTerm(109830.07916949916, 2.1401911291175303E-05, 3.556525926545776E-05);
        //interpolator.SetTerm(110678.3091859684, -2.4697047793551507E-05, -2.1451864474448326E-05);
        //interpolator.SetTerm(111526.53920243765, 3.746830368710267E-05, -7.878653408766307E-06);
        //interpolator.SetTerm(111652.20290858125, -4.533413840190768E-05, 1.9542264930900528E-05);
        //interpolator.SetTerm(111683.61883511714, 1.278851446011326E-05, -9.186402040315266E-05);
        //interpolator.SetTerm(112123.44180661971, -9.047917329102769E-05, -4.244266126936513E-05);
        //interpolator.SetTerm(112280.5214392992, 6.574783408655822E-05, 3.971918142916406E-06);
        //interpolator.SetTerm(112311.93736583511, -2.7263402762195407E-05, 7.290228871561408E-05);
        //interpolator.SetTerm(112500.4329250505, 6.5804581393332675E-06, -2.088009793315403E-06);
        //interpolator.SetTerm(112846.00811694536, -3.790726901338554E-05, -9.790933382102968E-06);
        //interpolator.SetTerm(112940.25589655306, 3.778399890253036E-05, -4.0365166202970375E-06);
        //interpolator.SetTerm(116301.76003589414, 4.561967057594003E-05, 1.9473324433551982E-05);
        //interpolator.SetTerm(116333.17596243003, 7.527148244935648E-05, 6.602321622885686E-05);
        //interpolator.SetTerm(116364.59188896594, -5.320182956494752E-05, 0.00012967346699951452);
        //interpolator.SetTerm(116458.83966857364, -1.6952137179739144E-07, -6.238632978658963E-05);
        //interpolator.SetTerm(116647.33522778902, -1.7494274254196924E-05, -4.011116441088229E-05);
        //interpolator.SetTerm(116678.75115432491, 2.0532570112853844E-05, -4.075644370124795E-06);
        //interpolator.SetTerm(121014.14901627883, -1.0232378462521387E-05, -2.3935874296355945E-05);
        //interpolator.SetTerm(121359.7242081737, 4.2581753477215765E-05, -4.948680299986753E-05);
        //interpolator.SetTerm(121705.29940006859, 5.582736699760695E-05, -1.90335793814082E-06);
        //interpolator.SetTerm(121736.71532660448, 5.4660679822561514E-05, -2.4061524147000853E-05);
        //interpolator.SetTerm(122019.45866542756, 8.389512300149223E-05, 1.2138027102560557E-05);
        //interpolator.SetTerm(122050.87459196347, 6.407063627496334E-05, 8.765286949729656E-05);
        //interpolator.SetTerm(122239.37015117885, -8.98489289442333E-06, 5.042377621548609E-06);
        //interpolator.SetTerm(122270.78607771474, 2.754051245130006E-05, -9.910201779423021E-06);
        //interpolator.SetTerm(122302.20200425065, 4.460869239587482E-05, 5.299097090698409E-05);
        //interpolator.SetTerm(122333.61793078654, -3.47541572234559E-07, 8.395221802565508E-05);
        //interpolator.SetTerm(122365.03385732244, -4.5271295510039596E-05, 5.405449107199841E-05);
        //interpolator.SetTerm(122396.44978385833, -3.863260367000824E-06, 3.343668481278842E-05);
        //interpolator.SetTerm(122427.86571039424, -3.198374424495956E-05, 8.701772092828804E-05);
        //interpolator.SetTerm(122616.36126960962, -1.7167672001109872E-05, 5.072418263384867E-05);
        //interpolator.SetTerm(122961.9364615045, -1.970903800464359E-05, 5.253527636424608E-05);
        //interpolator.SetTerm(124752.64427405069, -2.3625882719699688E-05, 4.5631016524118544E-05);
        //interpolator.SetTerm(124784.06020058658, -6.774586235706185E-05, 2.76258466016307E-06);
        //interpolator.SetTerm(125098.21946594556, 1.8545302795283116E-05, -2.2566796155780992E-05);
        //interpolator.SetTerm(125380.96280476864, -6.716284742256989E-05, -2.2747483679877557E-05);
        //interpolator.SetTerm(125475.21058437634, 0.00010787641956553646, 1.586906968601294E-05);
        //interpolator.SetTerm(125506.62651091223, 0.00010155395809254288, 0.00015229814543237563);
        //interpolator.SetTerm(125569.45836398403, -0.00010131256164999189, 3.898468008901222E-05);
        //interpolator.SetTerm(125632.29021705582, -3.803665583741321E-05, -1.330433948522095E-05);
        //interpolator.SetTerm(125663.70614359173, -1.2002680440276282E-05, -4.4278065988957854E-05);
        //interpolator.SetTerm(125820.78577627121, -4.637452882786829E-05, -1.1453214359263594E-05);
        //interpolator.SetTerm(125915.03355587891, -0.00010973820438236514, 1.235105533696368E-05);
        //interpolator.SetTerm(125977.8654089507, -4.776937938332093E-06, 9.225862467905371E-06);
        //interpolator.SetTerm(126009.28133548661, -1.074635564869367E-05, -4.2649008120437067E-05);
        //interpolator.SetTerm(126072.1131885584, 5.9671159242570205E-05, -2.1339320551518743E-05);
        //interpolator.SetTerm(126166.36096816609, -6.280651635654238E-05, 4.299169452711705E-05);
        //interpolator.SetTerm(126229.19282123788, -4.567826122274214E-05, 2.043999835325308E-05);
        //interpolator.SetTerm(126260.60874777379, -7.409942163441214E-06, -9.602265491970119E-05);
        //interpolator.SetTerm(126292.02467430968, 7.062651481145185E-05, 3.758438859972083E-05);
        //interpolator.SetTerm(126323.44060084558, -5.618231268170918E-05, 1.4545906994191881E-05);
        //interpolator.SetTerm(126354.85652738147, 2.5016268307953907E-05, -4.0613459075581185E-05);
        //interpolator.SetTerm(126386.27245391738, 2.694932779042133E-05, 5.4974288324716E-05);
        //interpolator.SetTerm(126417.68838045327, -7.352792420452102E-05, 1.9005821891258012E-05);
        //interpolator.SetTerm(126449.10430698917, 1.3951346997114191E-05, -3.6968913761005936E-05);
        //interpolator.SetTerm(126480.52023352507, -5.756134588549211E-05, 6.988225882535712E-05);
        //interpolator.SetTerm(126669.01579274047, -3.98800663596096E-05, 0.00015785084303386986);
        //interpolator.SetTerm(126731.84764581226, -6.240856871588362E-05, -2.1075462156582973E-05);
        //interpolator.SetTerm(126763.26357234815, -8.05369265533556E-05, -7.929966541696417E-05);
        //interpolator.SetTerm(127140.25469077892, -5.9337712325340726E-05, 8.69867462128525E-05);
        //interpolator.SetTerm(127862.82100110457, 9.139825062138287E-05, -2.798977325991962E-05);
        //interpolator.SetTerm(127957.06878071227, -4.0599430199101334E-05, 9.504764268574294E-05);
        //interpolator.SetTerm(128239.81211953536, -8.255641782914991E-05, 5.766725424124217E-05);
        //interpolator.SetTerm(128396.89175221484, 9.067282428153733E-05, 3.63840673619619E-05);
        //interpolator.SetTerm(128491.13953182254, 4.363840528003425E-05, 8.175341838029746E-05);
        //interpolator.SetTerm(128522.55545835843, -2.7364790909288783E-05, 0.00010767933404893911);
        //interpolator.SetTerm(128899.54657678922, -4.284637463799022E-05, -1.1656681941262345E-05);
        //interpolator.SetTerm(128930.9625033251, -5.5846067596596484E-06, -8.024778532777616E-05);
        //interpolator.SetTerm(129119.45806254049, -4.332609099302638E-05, -6.040584458468829E-05);
        //interpolator.SetTerm(129150.8739890764, 2.996455674208571E-05, -3.8092759798370345E-05);
        //interpolator.SetTerm(129873.44029940205, 4.3534692896021545E-05, 4.985947645387241E-06);
        //interpolator.SetTerm(129904.85622593794, 4.1266967355552474E-05, -6.886960786042582E-07);
        //interpolator.SetTerm(129936.27215247384, 6.054889925735019E-05, 3.36325050326001E-05);
        //interpolator.SetTerm(129967.68807900973, 2.5981319013038927E-05, 7.782621993416879E-05);
        //interpolator.SetTerm(130061.93585861743, -7.066613529036371E-05, -1.2984147218724282E-05);
        //interpolator.SetTerm(130219.01549129693, 4.399223703045197E-05, 8.299256493401909E-05);
        //interpolator.SetTerm(130250.43141783282, -2.861269021940501E-05, 3.483723373871219E-05);
        //interpolator.SetTerm(130281.84734436873, 1.3412663715190788E-05, 2.617157744107601E-05);
        //interpolator.SetTerm(130313.26327090462, -3.0264197755700772E-05, 6.442791053998011E-05);
        //interpolator.SetTerm(130344.67919744052, -6.903297302180756E-05, 1.167514107863176E-05);
        //interpolator.SetTerm(130627.42253626359, 2.7045071918342907E-07, -5.085732385130519E-05);
        //interpolator.SetTerm(130690.25438933539, -2.9205870095673204E-05, 4.4338999196858135E-05);
        //interpolator.SetTerm(130721.67031587129, -2.575540212520611E-05, -2.8538885271796628E-05);
        //interpolator.SetTerm(131067.24550776617, 3.429180326861021E-05, -9.973567530451034E-06);
        //interpolator.SetTerm(135905.29819429445, 2.2282892425924718E-05, -5.56780684677403E-05);
        //interpolator.SetTerm(140052.200497033, 1.6767830931920025E-05, 5.785230011589399E-05);
        //interpolator.SetTerm(140177.86420317658, -1.2234289093495228E-05, -5.033199555165117E-05);
        //interpolator.SetTerm(146052.64246538948, -8.279377995006533E-05, -6.244116422691628E-05);
        //interpolator.SetTerm(146084.05839192538, -1.9983621096162536E-05, -7.403032093435032E-05);
        //interpolator.SetTerm(146115.4743184613, 2.006701883163579E-05, -6.295681711247862E-05);
        //interpolator.SetTerm(146712.37692264334, 4.980961951374455E-06, 4.034174477439567E-05);
        //interpolator.SetTerm(146806.62470225102, -6.599486310849802E-05, -7.869123357916595E-05);
        //interpolator.SetTerm(146900.87248185874, 0.0001324283459417895, -2.5643324793970834E-05);
        //interpolator.SetTerm(146932.2884083946, 7.609391234936014E-05, 6.144648600592196E-05);
        //interpolator.SetTerm(146995.12026146642, -5.5643600689333414E-05, 0.0001199684462057233);
        //interpolator.SetTerm(149728.30587008953, -2.8433974294878784E-05, -8.63025980813058E-05);
        //interpolator.SetTerm(150293.7925477357, -2.7180740680846667E-05, 1.2903592941237439E-05);
        //interpolator.SetTerm(150827.86329884597, -4.2519162593728057E-05, 2.176922567631563E-05);
        //interpolator.SetTerm(150859.27922538188, -2.929430500036655E-05, -4.689804322985123E-05);
        //interpolator.SetTerm(151047.77478459725, 1.146995061276743E-05, -0.00013267005495837925);
        //interpolator.SetTerm(151079.19071113315, 0.00010419561105180814, -4.775789308154303E-05);
        //interpolator.SetTerm(151142.02256420493, 6.569630040536062E-05, 0.00012206271063289355);
        //interpolator.SetTerm(151173.43849074084, -5.564576058727152E-05, 6.367998374634759E-05);
        //interpolator.SetTerm(151204.85441727674, -3.800816320958858E-05, 4.159879894423843E-05);
        //interpolator.SetTerm(151236.27034381265, -0.0001023852381642127, 3.7844900634875564E-06);
        //interpolator.SetTerm(151267.68627034855, -6.891736200704719E-05, -9.077579493002934E-05);
        //interpolator.SetTerm(151299.10219688443, 1.5682427213478596E-05, -0.0001096809409642755);
        //interpolator.SetTerm(151361.93404995624, 0.00012295330781890716, -2.8759775845247916E-06);
        //interpolator.SetTerm(151393.34997649214, 3.3338132766239705E-05, 7.884317446666283E-05);
        //interpolator.SetTerm(151424.76590302802, 2.073732743478594E-05, 7.964120518692331E-06);
        //interpolator.SetTerm(151456.18182956392, 1.1989288698985121E-05, 9.068297512090336E-05);
        //interpolator.SetTerm(151550.4296091716, 5.3650670500844194E-05, -4.7958012390558866E-05);
        //interpolator.SetTerm(151644.67738877932, 0.00011935400645182536, 3.7649992325582516E-05);
        //interpolator.SetTerm(151738.925168387, -2.9325451148631912E-05, 7.365126594551037E-06);
        //interpolator.SetTerm(151770.34109492291, 4.641392282431179E-05, -2.0320238857615055E-05);
        //interpolator.SetTerm(151833.1729479947, 5.667375243826002E-05, -6.234428896213924E-05);
        //interpolator.SetTerm(151927.42072760238, -1.9829326357702093E-05, 0.00011345471619652204);
        //interpolator.SetTerm(151958.8366541383, -7.044792084269857E-05, 4.457610717662681E-05);
        //interpolator.SetTerm(151990.2525806742, -5.193579223576685E-05, 3.333997583352582E-05);
        //interpolator.SetTerm(152021.6685072101, -7.084068746314246E-05, 7.581514066318826E-06);
        //interpolator.SetTerm(152053.084433746, -7.846790882998388E-05, -2.5469296290703E-05);
        //interpolator.SetTerm(152084.50036028188, -2.0455107806451886E-05, -0.00010304884328440386);
        //interpolator.SetTerm(152115.91628681778, 6.742802127423832E-05, -2.2095863989501238E-05);
        //interpolator.SetTerm(152147.3322133537, 1.0938581408865435E-05, -9.744630133492876E-06);
        //interpolator.SetTerm(153812.37631975627, -4.1955604032527434E-05, 2.638402523742091E-05);
        //interpolator.SetTerm(153843.79224629217, -7.752524843661541E-05, 3.2054291540775796E-05);
        //interpolator.SetTerm(153875.20817282808, -0.00011804845964590232, -5.553074613615841E-05);
        //interpolator.SetTerm(154000.87187897167, -3.205989334827411E-05, 4.4716131551240736E-05);
        //interpolator.SetTerm(154032.28780550757, -4.165032081515713E-05, -3.39911114639121E-05);
        //interpolator.SetTerm(154220.78336472294, 3.0217795873607796E-05, -2.9535577501417558E-05);
        //interpolator.SetTerm(154252.19929125885, 4.312833634598622E-05, -3.3508959053307844E-06);
        //interpolator.SetTerm(154283.61521779475, 3.6120116159950866E-05, 4.214854827221308E-05);
        //interpolator.SetTerm(154315.03114433063, -4.78785561028797E-05, 4.280487746155693E-05);
        //interpolator.SetTerm(154346.44707086653, -4.165312148197709E-05, -3.941016324114527E-05);
        //interpolator.SetTerm(154377.86299740244, -8.05831322082739E-07, -4.785786365584838E-05);
        //interpolator.SetTerm(154409.27892393834, 3.941436759826296E-05, -3.9549644967883514E-05);

        interpolator.SetTerm(154377.86299740244, -8.05831322082739E-07, -4.785786365584838E-05);

        return interpolator;
    }

    private static ScalarFourierSeries CreateInterpolator2()
    {
        var interpolator = ScalarFourierSeries.Create();

        interpolator.SetTerm(0, -0.0008904248428720628, 7.312862888429375E-19);
        interpolator.SetTerm(62.83185307179586, 3.6068242992049544E-05, -0.0013095295143513723);
        interpolator.SetTerm(188.49555921538757, -0.0009206689795773334, 0.0013430517115092058);
        interpolator.SetTerm(219.9114857512855, -0.0010748655556504373, 0.00014168146306396936);
        interpolator.SetTerm(376.99111843077515, 0.0004529168656610273, 0.0002536463111537526);
        interpolator.SetTerm(408.4070449666731, -0.0001300811026374395, 4.5550753006384754E-05);
        interpolator.SetTerm(439.822971502571, -0.00022241390407314276, 4.701012587845108E-05);

        return interpolator;
    }


    public static void Example1()
    {
        var signal =
            Enumerable
                .Range(0, 1000)
                .Select(i => (i / SamplingRate).Square())
                .CreateSignal(SamplingRate);

        var signalPadded =
            signal.GetPeriodicPaddedSignal(10);

        signal.PlotSignal("Signal", "Signal");
        signalPadded.PlotSignal("Padded Signal", "Padded Signal");

        var interpolator = signalPadded.CreateFourierSeries(0.9999d);

        var tValues = signal.GetSampledTimeSignal();
        var uValues = tValues.MapSamples(interpolator.GetValue);

        uValues.PlotSignal("Interpolated Signal", "Interpolated Signal");

        var maxDiff = (uValues - signal).Abs().Max();

        Console.WriteLine($"Max Diff = {maxDiff:G}");
        Console.WriteLine();
    }

    public static void Example4()
    {
        var sampleCount = 1001;
        var samplingRate = (sampleCount - 1d) / 3;

        var tValues = 
            Enumerable.Range(0, sampleCount).Select(i => i / samplingRate).CreateSignal(samplingRate);

        var signal1 = tValues.MapSamples(t =>
            -4 * Math.Cos(2 * Math.PI * t) + 6 * Math.Sin(2 * Math.PI * t)
                                           + 2 * Math.Cos(2 * Math.PI * 2 * t) - 5 * Math.Sin(2 * Math.PI * 2 * t)
            + 2.5 * Math.Cos(2 * Math.PI * 3 * t) + 1.25 * Math.Sin(2 * Math.PI * 3 * t)
        );

        //var signal1 = tValues.MapSamples(t => t * t);

        var signal1Padded =
            signal1.GetPeriodicPaddedSignal(20);

        var interpolator = 
            signal1Padded.CreateFourierSeries();
        //signal1Padded.CreateFourierSeries(0.998d);

        var signal2 = 
            interpolator.GetValues(tValues).CreateSignal(samplingRate);
            
        var sampleCountPadded = signal1Padded.Count;

        var tValuesPadded = 
            Enumerable.Range(0, sampleCountPadded).Select(i => i / samplingRate).CreateSignal(samplingRate);

        var signal2Padded = 
            interpolator.GetValues(tValuesPadded).CreateSignal(samplingRate);
            
        Path.Combine(WorkingPath, "Signal").PlotSignals(
            signal1,
            signal2,
            tValues[0],
            tValues[^1]
        );

        Path.Combine(WorkingPath, "Signal Padded").PlotSignals(
            signal1Padded,
            signal2Padded,
            tValuesPadded[0],
            tValuesPadded[^1]
        );

        Console.WriteLine($"RMS 1   : {signal1.RootMeanSquare()}");
        Console.WriteLine($"RMS 2   : {signal2.RootMeanSquare()}");
        Console.WriteLine($"RMS Diff: {(signal1 - signal2).RootMeanSquare()}");
        Console.WriteLine();

        Console.WriteLine($"DC Energy   : {signal1.EnergyDc()}");
        Console.WriteLine($"AC Energy   : {signal1.EnergyAc()}");
        Console.WriteLine($"Total Energy: {signal1.Energy()}");
        Console.WriteLine($"PSNR        : {signal2.PeakSignalToNoiseRatioDb(signal1)}");
        Console.WriteLine();

        Console.WriteLine(
            interpolator.GetTextDescription("v", signal1Padded.EnergyAc(), tValuesPadded)
        );
    }
        
    public static void Example5()
    {
        var sampleCount = 1001;
        var samplingRate = (sampleCount - 1d) / 3;

        var tValues = 
            Enumerable.Range(0, sampleCount).Select(i => i / samplingRate).CreateSignal(samplingRate);

        //var signal1 = tValues.MapSamples(t =>
        //    -4 * Math.Cos(2 * Math.PI * t) + 6 * Math.Sin(2 * Math.PI * t)
        //    + 2 * Math.Cos(2 * Math.PI * 2 * t) - 5 * Math.Sin(2 * Math.PI * 2 * t)
        //    + 2.5 * Math.Cos(2 * Math.PI * 3 * t) + 1.25 * Math.Sin(2 * Math.PI * 3 * t)
        //);

        var signal1 = 
            tValues.MapSamples(t => t * t);


        var signal1Padded =
            signal1.GetPeriodicPaddedSignal(20);

        var interpolator = 
            signal1Padded.GetFourierSpectrum(0.998d, 100);
        //signal1Padded.GetFourierSpectrum();
            
        var sampleCountPadded = signal1Padded.Count;

        var tValuesPadded = 
            Enumerable.Range(0, sampleCountPadded).Select(i => i / samplingRate).CreateSignal(samplingRate);
            
        var signal2 = 
            interpolator.GetRealSignal(tValues);
            
        var signal2Padded = 
            interpolator.GetRealSignal(tValuesPadded);

        Path.Combine(WorkingPath, "Signal").PlotSignals(
            signal1,
            signal2,
            tValues[0],
            tValues[^2]
        );

        Path.Combine(WorkingPath, "Signal Padded").PlotSignals(
            signal1Padded,
            signal2Padded,
            tValuesPadded[0],
            tValuesPadded[^2]
        );

        Console.WriteLine($"RMS 1   : {signal1.RootMeanSquare()}");
        Console.WriteLine($"RMS 2   : {signal2.RootMeanSquare()}");
        Console.WriteLine($"RMS Diff: {(signal1 - signal2).RootMeanSquare() / signal1.RootMeanSquare()}");
        Console.WriteLine();

        Console.WriteLine($"DC Energy   : {signal1.EnergyDc()}");
        Console.WriteLine($"AC Energy   : {signal1.EnergyAc()}");
        Console.WriteLine($"Total Energy: {signal1.Energy()}");
        Console.WriteLine($"PSNR        : {signal1.PeakSignalToNoiseRatioDb(signal2)}");
        Console.WriteLine($"PSNR Padded : {signal2Padded.PeakSignalToNoiseRatioDb(signal1Padded)}");
        Console.WriteLine();
            
        Console.BufferHeight = short.MaxValue - 1;
        Console.WriteLine(
            interpolator.GetTextDescription("v", signal1Padded.EnergyAc(), tValuesPadded)
        );
        //Console.WriteLine(interpolator);
    }

    public static void Example6()
    {
        const double samplingRate = 25d;
        const int sampleCount = 501;//4801;
        const int downSamplingCount = sampleCount / 4;
        const double tMin = 0d;
        const double tMax = (sampleCount - 1) / samplingRate;
        const double tDelta = 1d / samplingRate;
        const int bezierDegree = 4;
        const CatmullRomSplineType curveType = CatmullRomSplineType.Centripetal;

        var smoothingFactors = new[] { 3, 5, 7, 9 };

        var s1Signal =
            Path
                .Combine(WorkingPath, @"Aulario3_derivatives.xlsx")
                .ReadExcelScalarColumn(3, sampleCount, 2)
                .CreateSignal(samplingRate);
            
        var tSignal = 
            s1Signal.GetSampledTimeSignal();

        var s1Function = 
            s1Signal.CreateAkimaSplineFunction(tMin, tMax);

        //var s1Function =
        //    ComputedD2Function.CreateD2Function(
        //        s1Signal.CreateSmoothedCatmullRomSplineD0Function(
        //            bezierDegree,
        //            downSamplingCount,
        //            curveType
        //        ).GetValue
        //    );

        var s2Function =
            s1Signal.GetCatmullRomInterpolator(
                new DfCatmullRomSplineSignalInterpolatorOptions
                {
                    BezierDegree = bezierDegree,
                    SmoothingFactors = smoothingFactors,
                    SplineType = curveType
                }
            );


        var s1DownSampledSignal = s1Signal.ReSample(downSamplingCount);
        var tDownSampledSignal = s1DownSampledSignal.GetSampledTimeSignal();
            
        var s2Signal = 
            tSignal.MapSamples(s2Function.GetValue);
            
        s2Function.PlotValue(
            s1DownSampledSignal, 
            tMin, 
            tMax
        ).SaveAsPng(Path.Combine(WorkingPath, @"s2.png"));
            
        var sError = s1Signal - s2Signal;
        var sErrorRms = sError.RootMeanSquare();
        var sSnr = s1Signal.PeakSignalToNoiseRatioDb(s2Signal);
            
        sError.PlotSignal(
            tMin, 
            tMax, 
            "Error Signal", 
            Path.Combine(WorkingPath, @"s12Error.png")
        );

        Console.WriteLine($"Signal error RMS: {sErrorRms}");
        Console.WriteLine($"Signal SNR: {sSnr}");
        Console.WriteLine();
            

        var s1Dt1Signal = 
            tSignal.MapSamples(s1Function.GetDerivative1Value);

        var s1Dt1DownSampledSignal = 
            tDownSampledSignal.MapSamples(s1Function.GetDerivative1Value);

        var s2Dt1Function =
            DfComputedFunction.Create(s2Function.GetDerivative1().GetValue);

        var s2Dt1Signal = 
            tSignal.MapSamples(s2Function.GetDerivative1().GetValue);
            
        s2Dt1Function.PlotValue(
            s1Dt1DownSampledSignal, 
            tMin, 
            tMax,
            s2Dt1Signal.Min(),
            s2Dt1Signal.Max()
        ).SaveAsPng(Path.Combine(WorkingPath, @"s2Dt1.png"));

        var sDt1Error = s1Dt1Signal - s2Dt1Signal;
        var sDt1ErrorRms = sDt1Error.RootMeanSquare();
        var sDt1Snr = s1Dt1Signal.PeakSignalToNoiseRatioDb(s2Dt1Signal);
            
        Console.WriteLine($"Signal Dt1 error RMS: {sDt1ErrorRms}");
        Console.WriteLine($"Signal Dt1 SNR: {sDt1Snr}");
        Console.WriteLine();
            

        var s1Dt2Signal = 
            tSignal.MapSamples(s1Function.GetDerivative2Value);

        var s1Dt2DownSampledSignal = 
            tDownSampledSignal.MapSamples(s1Function.GetDerivative2Value);
            
        var s2Dt2Function = 
            DfComputedFunction.Create(s2Function.GetDerivative2().GetValue);

        var s2Dt2Signal = 
            tSignal.MapSamples(s2Dt2Function.GetValue);
            
        s2Dt2Function.PlotValue(
            s1Dt2DownSampledSignal, 
            tMin, 
            tMax,
            s2Dt2Signal.Min(),
            s2Dt2Signal.Max()
        ).SaveAsPng(Path.Combine(WorkingPath, @"s2Dt2.png"));

        var sDt2Error = s1Dt2Signal - s2Dt2Signal;
        var sDt2ErrorRms = sDt2Error.RootMeanSquare();
        var sDt2Snr = s1Dt2Signal.PeakSignalToNoiseRatioDb(s2Dt2Signal);
            
        Console.WriteLine($"Signal Dt2 error RMS: {sDt2ErrorRms}");
        Console.WriteLine($"Signal Dt2 SNR: {sDt2Snr}");
        Console.WriteLine();
            

        var s1Dt3Signal = 
            tSignal.MapSamples(s1Function.GetDerivative3Value);

        var s1Dt3DownSampledSignal = 
            tDownSampledSignal.MapSamples(s1Function.GetDerivative3Value);
            
        var s2Dt3Function = 
            DfComputedFunction.Create(s2Function.GetDerivative3());

        var s2Dt3Signal = 
            tSignal.MapSamples(s2Dt3Function.GetValue);
            
        s2Dt3Function.PlotValue(
            s1Dt3DownSampledSignal, 
            tMin, 
            tMax,
            s2Dt3Signal.Min(),
            s2Dt3Signal.Max()
        ).SaveAsPng(Path.Combine(WorkingPath, @"s2Dt3.png"));

        var sDt3Error = s1Dt3Signal - s2Dt3Signal;
        var sDt3ErrorRms = sDt3Error.RootMeanSquare();
        var sDt3Snr = s1Dt3Signal.PeakSignalToNoiseRatioDb(s2Dt3Signal);
            
        Console.WriteLine($"Signal Dt3 error RMS: {sDt3ErrorRms}");
        Console.WriteLine($"Signal Dt3 SNR: {sDt3Snr}");
        Console.WriteLine();
    }

    //public static void Example7()
    //{
    //    const double samplingRate = 25d;
    //    const int sampleCount = 501;//4801;
    //    const int downSamplingCount = sampleCount / 4;
    //    const double tMin = 0d;
    //    const double tMax = (sampleCount - 1) / samplingRate;
    //    const double tDelta = 1d / samplingRate;
    //    const int bezierDegree = 4;
    //    const CatmullRomSplineType curveType = CatmullRomSplineType.Centripetal;

    //    var s1Signal =
    //        Path
    //            .Combine(WorkingPath, @"Aulario3_derivatives.xlsx")
    //            .ReadExcelScalarColumn(3, sampleCount, 2)
    //            .CreateSignal(samplingRate);
            
    //    var tSignal = 
    //        s1Signal.GetTimeValuesSignal();
            
            
    //    var s1Function = 
    //        s1Signal.CreateSmoothedCatmullRomSplineD2Function(
    //            bezierDegree,
    //            downSamplingCount,
    //            curveType
    //        );

    //    var c0Signal = s1Function.Signal;
    //    var c1Signal = s1Function.FirstDerivativeSignal;
    //    var dsTimeSignal = s1Function.Signal.GetTimeValuesSignal();
            
    //    var f1Signal = tSignal.MapSamples(
    //        t =>
    //        {
    //            var (index1, index2) = 
    //                dsTimeSignal.GetSampleIndexFromTime(t);

    //            var c1 = c1Signal[index1];
    //            var c2 = c1Signal[index2];

    //            if (index1 == index2)
    //                return c1;

    //            var t1 = dsTimeSignal[index1];
    //            var t2 = dsTimeSignal[index2];

    //            var v1 = c1 + Integrate.OnClosedInterval(
    //                s1Function.GetSecondDerivative,
    //                t1,
    //                t
    //            );
                
    //            var v2 = c2 - Integrate.OnClosedInterval(
    //                s1Function.GetSecondDerivative,
    //                t,
    //                t2
    //            );

    //            return (v1 + v2) / 2;
    //        }
    //    );
            
    //    var f0Signal = tSignal.MapSamples(
    //        t =>
    //        {
    //            var (index1, index2) = 
    //                dsTimeSignal.GetSampleIndexFromTime(t);

    //            var c = c0Signal[index1];

    //            if (index1 == index2)
    //                return c;

    //            var t1 = dsTimeSignal[index1];

    //            return c + Integrate.OnClosedInterval(
    //                f1Signal.LinearInterpolation,
    //                t1,
    //                t
    //            );
    //        }
    //    );
            
    //    var s2Function =
    //        ComputedD2Function.CreateD2Function(
    //            f0Signal.LinearInterpolation, 
    //            f1Signal.LinearInterpolation, 
    //            s1Function.GetSecondDerivative
    //        );


    //    var s1DownSampledSignal = s1Signal.ReSample(downSamplingCount);
            
    //    var s2Signal = 
    //        tSignal.MapSamples(s2Function.GetValue);
            
    //    s2Function.PlotValue(
    //        s1DownSampledSignal, 
    //        tMin, 
    //        tMax
    //    ).SaveAsPng(Path.Combine(WorkingPath, @"s2.png"));
            
    //    var sError = s1Signal - s2Signal;
    //    var sErrorRms = sError.Rms();
    //    var sSnr = s1Signal.SignalToNoiseRatio(s1Signal - s2Signal);
            
    //    sError.PlotSignal(
    //        tMin, 
    //        tMax, 
    //        "Error Signal", 
    //        Path.Combine(WorkingPath, @"s12Error.png")
    //    );

    //    Console.WriteLine($"Signal error RMS: {sErrorRms}");
    //    Console.WriteLine($"Signal SNR: {sSnr}");
    //    Console.WriteLine();
            

    //    var s1Dt1Signal = 
    //        tSignal.MapSamples(s1Function.GetFirstDerivative);

    //    var s1Dt1DownSampledSignal = 
    //        dsTimeSignal.MapSamples(s1Function.GetFirstDerivative);

    //    var s2Dt1Function =
    //        ComputedD0Function.CreateD0Function(s2Function.FirstDerivativeFunc);

    //    var s2Dt1Signal = 
    //        tSignal.MapSamples(s2Function.GetFirstDerivative);
            
    //    s2Dt1Function.PlotValue(
    //        s1Dt1DownSampledSignal, 
    //        tMin, 
    //        tMax
    //    ).SaveAsPng(Path.Combine(WorkingPath, @"s2Dt1.png"));

    //    var sDt1Error = s1Dt1Signal - s2Dt1Signal;
    //    var sDt1ErrorRms = sDt1Error.Rms();
    //    var sDt1Snr = s1Dt1Signal.SignalToNoiseRatio(s1Dt1Signal - s2Dt1Signal);
            
    //    Console.WriteLine($"Signal Dt1 error RMS: {sDt1ErrorRms}");
    //    Console.WriteLine($"Signal Dt1 SNR: {sDt1Snr}");
    //    Console.WriteLine();
            

    //    var s1Dt2Signal = 
    //        tSignal.MapSamples(s1Function.GetSecondDerivative);

    //    var s1Dt2DownSampledSignal = 
    //        dsTimeSignal.MapSamples(s1Function.GetSecondDerivative);
            
    //    var s2Dt2Function = 
    //        ComputedD0Function.CreateD0Function(s2Function.SecondDerivativeFunc);

    //    var s2Dt2Signal = 
    //        tSignal.MapSamples(s2Dt2Function.GetValue);
            
    //    s2Dt2Function.PlotValue(
    //        s1Dt2DownSampledSignal, 
    //        tMin, 
    //        tMax
    //    ).SaveAsPng(Path.Combine(WorkingPath, @"s2Dt2.png"));

    //    var sDt2Error = s1Dt2Signal - s2Dt2Signal;
    //    var sDt2ErrorRms = sDt2Error.Rms();
    //    var sDt2Snr = s1Dt2Signal.SignalToNoiseRatio(s1Dt2Signal - s2Dt2Signal);
            
    //    Console.WriteLine($"Signal Dt2 error RMS: {sDt2ErrorRms}");
    //    Console.WriteLine($"Signal Dt2 SNR: {sDt2Snr}");
    //    Console.WriteLine();
    //}

    public static void Example8()
    {
        const string workingPath = @"D:\Projects\Study\Interpolation";
        const double frequencyHz = 1d/5d;
        const double frequency = 2d * Math.PI * frequencyHz;
        const double samplesPerCycle = 2000;
        const double cycleCount = 3;
        const double sampleCount = cycleCount * samplesPerCycle + 1;
        const double tMin = 0d;
        const double tMax = cycleCount / frequencyHz;
        const double samplingRate = (sampleCount - 1) / (tMax - tMin);

        const int bezierDegree = 3;
        const CatmullRomSplineType curveType = CatmullRomSplineType.Centripetal;
        const double downSamplingCount = sampleCount / 1;

        var smoothingFactors = new[] { 3, 5, 7, 9 };

        var tSignal =
            tMin.GetLinearRange(tMax, (int) sampleCount, false).CreateSignal(samplingRate);

        var f1 = 
            DfCosPhasor.Create(10, frequency, 0d.DegreesToAngle()) +
            DfCosPhasor.Create(3, frequency * 2, 30.DegreesToAngle()) +
            DfCosPhasor.Create(1, frequency * 5, 50.DegreesToAngle());

        //var valueFunction = SmoothedCatmullRomSplineD0Function.CreateSmoothedCatmullRomSplineD0Function(
        //    tSignal.MapSamples(f1.GetValue),
        //    bezierDegree,
        //    (int)downSamplingCount,
        //    curveType
        //);

        //var f2 = ComputedD4Function.CreateD4Function(
        //    valueFunction.ValueFunc,
        //    valueFunction.GetFirstDerivativeValue,
        //    MathNet.Numerics.Differentiate.DerivativeFunc(valueFunction.GetFirstDerivativeValue, 1),
        //    MathNet.Numerics.Differentiate.DerivativeFunc(valueFunction.GetFirstDerivativeValue, 2),
        //    MathNet.Numerics.Differentiate.DerivativeFunc(valueFunction.GetFirstDerivativeValue, 3)
        //);

        var f2 =
            tSignal.MapSamples(f1.GetValue).GetCatmullRomInterpolator(
                new DfCatmullRomSplineSignalInterpolatorOptions
                {
                    BezierDegree = bezierDegree,
                    SmoothingFactors = smoothingFactors,
                    SplineType = curveType
                }
            );

        const int trimSampleCount = 50;
        tSignal = tSignal.GetSubSignal(trimSampleCount, tSignal.Count - 2 * trimSampleCount);

        var (s1, s1Dt1, s1Dt2, s1Dt3, s1Dt4) = 
            tSignal.SampleFunctionDerivatives4(f1);

        s1.PlotScalarSignal("s1", workingPath.GetFilePath("s1"));
        s1Dt1.PlotScalarSignal("s1Dt1", workingPath.GetFilePath("s1Dt1"));
        s1Dt2.PlotScalarSignal("s1Dt2", workingPath.GetFilePath("s1Dt2"));
        s1Dt3.PlotScalarSignal("s1Dt3", workingPath.GetFilePath("s1Dt3"));
        s1Dt4.PlotScalarSignal("s1Dt4", workingPath.GetFilePath("s1Dt4"));

        var (s2, s2Dt1, s2Dt2, s2Dt3, s2Dt4) = 
            tSignal.SampleFunctionDerivatives4(f2);
            
        s2.PlotScalarSignal("s2", workingPath.GetFilePath("s2"));
        s2Dt1.PlotScalarSignal("s2Dt1", workingPath.GetFilePath("s2Dt1"));
        s2Dt2.PlotScalarSignal("s2Dt2", workingPath.GetFilePath("s2Dt2"));
        s2Dt3.PlotScalarSignal("s2Dt3", workingPath.GetFilePath("s2Dt3"));
        s2Dt4.PlotScalarSignal("s2Dt4", workingPath.GetFilePath("s2Dt4"));
            
        var sDiff = s1 - s2;
        var sDt1Diff = s1Dt1 - s2Dt1;
        var sDt2Diff = s1Dt2 - s2Dt2;
        var sDt3Diff = s1Dt3 - s2Dt3;
        var sDt4Diff = s1Dt4 - s2Dt4;

        sDiff.PlotScalarSignal("sDiff", workingPath.GetFilePath("sDiff"));
        sDt1Diff.PlotScalarSignal("sDt1Diff", workingPath.GetFilePath("sDt1Diff"));
        sDt2Diff.PlotScalarSignal("sDt2Diff", workingPath.GetFilePath("sDt2Diff"));
        sDt3Diff.PlotScalarSignal("sDt3Diff", workingPath.GetFilePath("sDt3Diff"));
        sDt4Diff.PlotScalarSignal("sDt4Diff", workingPath.GetFilePath("sDt4Diff"));

        Console.WriteLine($"   s PSNR: {s1.PeakSignalToNoiseRatioDb(s2)}");
        Console.WriteLine($"sDt1 PSNR: {s1Dt1.PeakSignalToNoiseRatioDb(s2Dt1)}");
        Console.WriteLine($"sDt2 PSNR: {s1Dt2.PeakSignalToNoiseRatioDb(s2Dt2)}");
        Console.WriteLine($"sDt3 PSNR: {s1Dt3.PeakSignalToNoiseRatioDb(s2Dt3)}");
        Console.WriteLine($"sDt4 PSNR: {s1Dt4.PeakSignalToNoiseRatioDb(s2Dt4)}");
        Console.WriteLine();

        var columnIndex = 1;
        
        var outputFilePath =
            Path.Combine(workingPath, @"Output.xlsx");

            
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using var package = new ExcelPackage();

        var workSheet = package.Workbook.Worksheets.Add("Sheet1");

        workSheet.WriteScalarSignal(3, columnIndex++, tSignal, "t");
            
        workSheet.WriteScalarSignal(3, columnIndex++, s1, "s1");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt1, "s1Dt1");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt2, "s1Dt2");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt3, "s1Dt3");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt4, "s1Dt4");

        workSheet.WriteScalarSignal(3, columnIndex++, s2, "s2");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt1, "s2Dt1");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt2, "s2Dt2");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt3, "s2Dt3");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt4, "s2Dt4");
            
        package.SaveAs(outputFilePath);
    }
        
    public static void Example9()
    {
        const string workingPath = @"D:\Projects\Study\Interpolation";
        const double frequencyHz = 1d/5d;
        const double frequency = 2d * Math.PI * frequencyHz;
        const double samplesPerCycle = 2000;
        const double cycleCount = 3;
        const double sampleCount = cycleCount * samplesPerCycle + 1;
        const double tMin = 0d;
        const double tMax = cycleCount / frequencyHz;
        const double samplingRate = (sampleCount - 1) / (tMax - tMin);

        const int polynomialDegree = 39;
        //const CatmullRomSplineType curveType = CatmullRomSplineType.Centripetal;
        //const double downSamplingCount = sampleCount / 1;

        var smoothingFactors =
            //Array.Empty<int>();
            //new[] { 3 };
            //new[] { 3, 5 };
            new[] { 3, 5, 7 };
        //new[] { 3, 5, 7, 9 };

        var tSignal =
            tMin.GetLinearRange(tMax, (int) sampleCount, false).CreateSignal(samplingRate);

        var f1 = 
            DfCosPhasor.Create(10, frequency, 0d.DegreesToAngle()) +
            DfCosPhasor.Create(3, frequency * 2, 30.DegreesToAngle()) +
            DfCosPhasor.Create(1, frequency * 5, 50.DegreesToAngle());

        //var valueFunction = SmoothedCatmullRomSplineD0Function.CreateSmoothedCatmullRomSplineD0Function(
        //    tSignal.MapSamples(f1.GetValue),
        //    bezierDegree,
        //    (int)downSamplingCount,
        //    curveType
        //);

        //var f2 = ComputedD4Function.CreateD4Function(
        //    valueFunction.ValueFunc,
        //    valueFunction.GetFirstDerivativeValue,
        //    MathNet.Numerics.Differentiate.DerivativeFunc(valueFunction.GetFirstDerivativeValue, 1),
        //    MathNet.Numerics.Differentiate.DerivativeFunc(valueFunction.GetFirstDerivativeValue, 2),
        //    MathNet.Numerics.Differentiate.DerivativeFunc(valueFunction.GetFirstDerivativeValue, 3)
        //);

        var options = new DfChebyshevSignalInterpolatorOptions()
        {
            PolynomialDegree = polynomialDegree,
            SectionCount = 3,
            SmoothingFactors = smoothingFactors
        };

        var f2 =
            tSignal.MapSamples(f1.GetValue).CreateChebyshevInterpolator(options);

        const int trimSampleCount = 50;
        tSignal = tSignal.GetSubSignal(trimSampleCount, tSignal.Count - 2 * trimSampleCount);

        var (s1, s1Dt1, s1Dt2, s1Dt3, s1Dt4) = 
            tSignal.SampleFunctionDerivatives4(f1);

        s1.PlotScalarSignal("s1", workingPath.GetFilePath("s1"));
        s1Dt1.PlotScalarSignal("s1Dt1", workingPath.GetFilePath("s1Dt1"));
        s1Dt2.PlotScalarSignal("s1Dt2", workingPath.GetFilePath("s1Dt2"));
        s1Dt3.PlotScalarSignal("s1Dt3", workingPath.GetFilePath("s1Dt3"));
        s1Dt4.PlotScalarSignal("s1Dt4", workingPath.GetFilePath("s1Dt4"));

        var (s2, s2Dt1, s2Dt2, s2Dt3, s2Dt4) = 
            tSignal.SampleFunctionDerivatives4(f2);
            
        s2.PlotScalarSignal("s2", workingPath.GetFilePath("s2"));
        s2Dt1.PlotScalarSignal("s2Dt1", workingPath.GetFilePath("s2Dt1"));
        s2Dt2.PlotScalarSignal("s2Dt2", workingPath.GetFilePath("s2Dt2"));
        s2Dt3.PlotScalarSignal("s2Dt3", workingPath.GetFilePath("s2Dt3"));
        s2Dt4.PlotScalarSignal("s2Dt4", workingPath.GetFilePath("s2Dt4"));
            
        s1.PlotSignal(
            s2, 
            s1.SamplingSpecs.MinTime, 
            s1.SamplingSpecs.MaxTime, 
            workingPath.GetFilePath("s1-s2")
        );

        var sDiff = s1 - s2;
        var sDt1Diff = s1Dt1 - s2Dt1;
        var sDt2Diff = s1Dt2 - s2Dt2;
        var sDt3Diff = s1Dt3 - s2Dt3;
        var sDt4Diff = s1Dt4 - s2Dt4;

        sDiff.PlotScalarSignal("sDiff", workingPath.GetFilePath("sDiff"));
        sDt1Diff.PlotScalarSignal("sDt1Diff", workingPath.GetFilePath("sDt1Diff"));
        sDt2Diff.PlotScalarSignal("sDt2Diff", workingPath.GetFilePath("sDt2Diff"));
        sDt3Diff.PlotScalarSignal("sDt3Diff", workingPath.GetFilePath("sDt3Diff"));
        sDt4Diff.PlotScalarSignal("sDt4Diff", workingPath.GetFilePath("sDt4Diff"));

        Console.WriteLine($"   s PSNR: {s1.PeakSignalToNoiseRatioDb(s2)}");
        Console.WriteLine($"sDt1 PSNR: {s1Dt1.PeakSignalToNoiseRatioDb(s2Dt1)}");
        Console.WriteLine($"sDt2 PSNR: {s1Dt2.PeakSignalToNoiseRatioDb(s2Dt2)}");
        Console.WriteLine($"sDt3 PSNR: {s1Dt3.PeakSignalToNoiseRatioDb(s2Dt3)}");
        Console.WriteLine($"sDt4 PSNR: {s1Dt4.PeakSignalToNoiseRatioDb(s2Dt4)}");
        Console.WriteLine();

        var columnIndex = 1;
        
        var outputFilePath =
            Path.Combine(workingPath, @"Output.xlsx");

            
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using var package = new ExcelPackage();

        var workSheet = package.Workbook.Worksheets.Add("Sheet1");

        workSheet.WriteScalarSignal(3, columnIndex++, tSignal, "t");
            
        workSheet.WriteScalarSignal(3, columnIndex++, s1, "s1");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt1, "s1Dt1");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt2, "s1Dt2");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt3, "s1Dt3");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt4, "s1Dt4");

        workSheet.WriteScalarSignal(3, columnIndex++, s2, "s2");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt1, "s2Dt1");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt2, "s2Dt2");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt3, "s2Dt3");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt4, "s2Dt4");
            
        package.SaveAs(outputFilePath);
    }

    private static IEnumerable<int> GetSmoothingWindowWidths(params int[] windowWidthFactorArray)
    {
        var windowWidthFactorLcm = windowWidthFactorArray.Lcm();

        var smoothingWindowWidths = 
            windowWidthFactorArray.Select(f => 
                (windowWidthFactorLcm / f - 1) / 2
            ).ToArray();

        return smoothingWindowWidths;
    }

    public static void Example10()
    {
        const string workingPath = @"D:\Projects\Study\Interpolation";
        const double frequencyHz = 1d/5d;
        const double frequency = 2d * Math.PI * frequencyHz;
        const double samplesPerCycle = 2000;
        const double cycleCount = 3;
        const double sampleCount = cycleCount * samplesPerCycle + 1;
        const double tMin = 0d;
        const double tMax = cycleCount / frequencyHz;
        const double samplingRate = (sampleCount - 1) / (tMax - tMin);

        const int bezierDegree = 6;
        const CatmullRomSplineType curveType = CatmullRomSplineType.Centripetal;

        var smoothingFactors = new[] { 3, 5, 7, 9 };

        var randomGenerator = new Random(10);

        var tSignal =
            tMin.GetLinearRange(tMax, (int) sampleCount, false).CreateSignal(samplingRate);

        var f1 = 
            DfCosPhasor.Create(10, frequency, 0d.DegreesToAngle()) +
            DfCosPhasor.Create(3, frequency * 2, 30.DegreesToAngle()) +
            DfCosPhasor.Create(1, frequency * 5, 50.DegreesToAngle());

        var s1 =
            tSignal
                .MapSamples(f1.GetValue)
                .AddRandomGaussian(randomGenerator, 0, 0.1);

        var f2 = s1.GetCatmullRomInterpolator(
            new DfCatmullRomSplineSignalInterpolatorOptions
            {
                BezierDegree = bezierDegree,
                SmoothingFactors = smoothingFactors,
                SplineType = curveType
            }
        );

        var (s1Dt1, s1Dt2, s1Dt3, s1Dt4) = 
            tSignal.SampleDerivatives4(f1);
            
        var (s2, s2Dt1, s2Dt2, s2Dt3, s2Dt4) = 
            tSignal.SampleFunctionDerivatives4(f2);
            
        var index = 50;
        var count = (int) sampleCount - 2 * index;

        tSignal = tSignal.GetSubSignal(index, count);

        s1 = s1.GetSubSignal(index, count);
        s1Dt1 = s1Dt1.GetSubSignal(index, count);
        s1Dt2 = s1Dt2.GetSubSignal(index, count);
        s1Dt3 = s1Dt3.GetSubSignal(index, count);
        s1Dt4 = s1Dt4.GetSubSignal(index, count);

        s2 = s2.GetSubSignal(index, count);
        s2Dt1 = s2Dt1.GetSubSignal(index, count);
        s2Dt2 = s2Dt2.GetSubSignal(index, count);
        s2Dt3 = s2Dt3.GetSubSignal(index, count);
        s2Dt4 = s2Dt4.GetSubSignal(index, count);

        var sDiff = s1 - s2;
        var sDt1Diff = s1Dt1 - s2Dt1;
        var sDt2Diff = s1Dt2 - s2Dt2;
        var sDt3Diff = s1Dt3 - s2Dt3;
        var sDt4Diff = s1Dt4 - s2Dt4;

        s1.PlotScalarSignal("s1", workingPath.GetFilePath("s1"));
        s1Dt1.PlotScalarSignal("s1Dt1", workingPath.GetFilePath("s1Dt1"));
        s1Dt2.PlotScalarSignal("s1Dt2", workingPath.GetFilePath("s1Dt2"));
        s1Dt3.PlotScalarSignal("s1Dt3", workingPath.GetFilePath("s1Dt3"));
        s1Dt4.PlotScalarSignal("s1Dt4", workingPath.GetFilePath("s1Dt4"));

        s2.PlotScalarSignal("s2", workingPath.GetFilePath("s2"));
        s2Dt1.PlotScalarSignal("s2Dt1", workingPath.GetFilePath("s2Dt1"));
        s2Dt2.PlotScalarSignal("s2Dt2", workingPath.GetFilePath("s2Dt2"));
        s2Dt3.PlotScalarSignal("s2Dt3", workingPath.GetFilePath("s2Dt3"));
        s2Dt4.PlotScalarSignal("s2Dt4", workingPath.GetFilePath("s2Dt4"));

        sDiff.PlotScalarSignal("sDiff", workingPath.GetFilePath("sDiff"));
        sDt1Diff.PlotScalarSignal("sDt1Diff", workingPath.GetFilePath("sDt1Diff"));
        sDt2Diff.PlotScalarSignal("sDt2Diff", workingPath.GetFilePath("sDt2Diff"));
        sDt3Diff.PlotScalarSignal("sDt3Diff", workingPath.GetFilePath("sDt3Diff"));
        sDt4Diff.PlotScalarSignal("sDt4Diff", workingPath.GetFilePath("sDt4Diff"));

        Console.WriteLine($"   s PSNR: {s1.PeakSignalToNoiseRatioDb(s2)}");
        Console.WriteLine($"sDt1 PSNR: {s1Dt1.PeakSignalToNoiseRatioDb(s2Dt1)}");
        Console.WriteLine($"sDt2 PSNR: {s1Dt2.PeakSignalToNoiseRatioDb(s2Dt2)}");
        Console.WriteLine($"sDt3 PSNR: {s1Dt3.PeakSignalToNoiseRatioDb(s2Dt3)}");
        Console.WriteLine($"sDt4 PSNR: {s1Dt4.PeakSignalToNoiseRatioDb(s2Dt4)}");
        Console.WriteLine();

        var columnIndex = 1;
        
        var outputFilePath =
            Path.Combine(workingPath, @"Output.xlsx");

            
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using var package = new ExcelPackage();

        var workSheet = package.Workbook.Worksheets.Add("Sheet1");

        workSheet.WriteScalarSignal(3, columnIndex++, tSignal, "t");
            
        workSheet.WriteScalarSignal(3, columnIndex++, s1, "s1");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt1, "s1Dt1");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt2, "s1Dt2");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt3, "s1Dt3");
        workSheet.WriteScalarSignal(3, columnIndex++, s1Dt4, "s1Dt4");

        workSheet.WriteScalarSignal(3, columnIndex++, s2, "s2");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt1, "s2Dt1");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt2, "s2Dt2");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt3, "s2Dt3");
        workSheet.WriteScalarSignal(3, columnIndex++, s2Dt4, "s2Dt4");
            
        package.SaveAs(outputFilePath);
    }

    private static Float64Signal MakePeriodic(Float64Signal signal, int sampleCount)
    {
        var signalArray = new double[signal.Count];

        for (var i = 0; i < sampleCount; i++)
        {
            var t = (sampleCount - i) / (2d * sampleCount);
            var s = 1d - t;

            signalArray[i] = s * signal[i] + t * signal[signal.Count - i - 1];
            signalArray[signal.Count - i - 1] = t * signal[i] + s * signal[signal.Count - i - 1];
        }

        for (var i = sampleCount; i < signal.Count - sampleCount; i++) 
            signalArray[i] = signal[i];

        //for (var i = 0; i < sampleCount; i++)
        //{
        //    var t = (sampleCount - i) / (2d * sampleCount);
        //    var s = 1d - t;

        //    signalArray[i] = t * signal[i] + s * signal[signal.Count - i - 1];
        //}

        return Float64Signal.Create(
            signal.SamplingRate, 
            signalArray, 
            false
        );
    }

    public static void Example11()
    {
        const string workingPath = @"D:\Projects\Study\Interpolation";
        const double frequencyHz = 1d/5d;
        const double frequency = 2d * Math.PI * frequencyHz;
        const double samplesPerCycle = 2000;
        const double cycleCount = 3;
        const double sampleCount = cycleCount * samplesPerCycle + 1;
        const double tMin = 0d;
        const double tMax = cycleCount / frequencyHz;
        const double samplingRate = (sampleCount - 1) / (tMax - tMin);

        var f1 = 
            DfCosPhasor.Create(10, frequency, 0d.DegreesToAngle()) +
            DfCosPhasor.Create(3, frequency * 2, 30.DegreesToAngle()) +
            DfCosPhasor.Create(1, frequency * 5, 50.DegreesToAngle());
            
        var tSignal =
            //0d.GetLinearRange(3.75d, (int) (3.75d * samplingRate) + 1, false).CreateSignal(samplingRate);
            tMin.GetLinearRange(tMax, (int) sampleCount, false).CreateSignal(samplingRate);
            
        var s1 = tSignal.MapSamples(f1.GetValue);
        var s2 = s1.FlipXy();

        var d12 = s1[^1] - s2[0];
        var d21 = s1[0] - s2[^1];

        var s3 = 
            (s2 + d21).Concat(s1.Concat(s2 + d12)).CreateSignal(samplingRate);

        var c12 = s3[^1] - s1[0];
        var c21 = s3[0] - s1[^1];

        for (var i = 0; i < tSignal.Count; i++)
        {
            var t = i / (double)(tSignal.Count - 1);
            var s = 1d - t;

            //s3.AppendSample(s1[i] + s * c12 + t * c21);
            s3.AppendSample(s1[i] + c12);
        }

        var s4 = 
            MakePeriodic(s3, (int) (sampleCount / 2));

        var s5 = 
            s4.MapSamples(
                (index, _) => s4[(index + tSignal.Count).Mod(s4.Count)]
            );

        const double energyThreshold = 0.999998d;
        const double snrThreshold = 2000d;

        var f2 =
            s5.CreateFourierInterpolator(snrThreshold, energyThreshold);

        var f2Dt1 =
            f2.GetFourierDerivativeN(1);

        var f2Dt2 =
            f2.GetFourierDerivativeN(2);

        var f2Dt3 =
            f2.GetFourierDerivativeN(3);

        var f2Dt4 =
            f2.GetFourierDerivativeN(4);

        var (sf1, sf1Dt1, sf1Dt2, sf1Dt3, sf1Dt4) = 
            tSignal.SampleFunctionDerivatives4(f1);
            
        var (sf2, sf2Dt1, sf2Dt2, sf2Dt3, sf2Dt4) = 
            tSignal.SampleFunctionDerivatives4(f2);
            
        s1.PlotScalarSignal("s1", workingPath.GetFilePath("s1"));
        s2.PlotScalarSignal("s2", workingPath.GetFilePath("s2"));
        s3.PlotScalarSignal("s3", workingPath.GetFilePath("s3"));
        s4.PlotScalarSignal("s4", workingPath.GetFilePath("s4"));
        s5.PlotScalarSignal("s5", workingPath.GetFilePath("s5"));

        sf1.PlotScalarSignal("sf", workingPath.GetFilePath("sf1"));
        sf1Dt1.PlotScalarSignal("sfDt1", workingPath.GetFilePath("sf1Dt1"));
        sf1Dt2.PlotScalarSignal("sfDt2", workingPath.GetFilePath("sf1Dt2"));
        sf1Dt3.PlotScalarSignal("sfDt3", workingPath.GetFilePath("sf1Dt3"));
        sf1Dt4.PlotScalarSignal("sfDt4", workingPath.GetFilePath("sf1Dt4"));

        sf2.PlotScalarSignal("sf", workingPath.GetFilePath("sf2"));
        sf2Dt1.PlotScalarSignal("sfDt1", workingPath.GetFilePath("sf2Dt1"));
        sf2Dt2.PlotScalarSignal("sfDt2", workingPath.GetFilePath("sf2Dt2"));
        sf2Dt3.PlotScalarSignal("sfDt3", workingPath.GetFilePath("sf2Dt3"));
        sf2Dt4.PlotScalarSignal("sfDt4", workingPath.GetFilePath("sf2Dt4"));
            
        (sf1 - sf2).PlotScalarSignal("sf", workingPath.GetFilePath("dsf"));
        (sf1Dt1 - sf2Dt1).PlotScalarSignal("sfDt1", workingPath.GetFilePath("dsfDt1"));
        (sf1Dt2 - sf2Dt2).PlotScalarSignal("sfDt2", workingPath.GetFilePath("dsfDt2"));
        (sf1Dt3 - sf2Dt3).PlotScalarSignal("sfDt3", workingPath.GetFilePath("dsfDt3"));
        (sf1Dt4 - sf2Dt4).PlotScalarSignal("sfDt4", workingPath.GetFilePath("dsfDt4"));


    }
}