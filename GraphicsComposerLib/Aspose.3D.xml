<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.3D</name>
  </assembly>
  <members>
    <member name="T:Aspose.ThreeD.Animation.AnimationChannel">
      <summary>
            A channel maps property's component field to a set of keyframe sequences
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationChannel.ComponentType">
      <summary>
            Gets the component field's type
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationChannel.Name">
      <summary>
            Gets the name of the channel
             </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationChannel.DefaultValue">
      <summary>
            Gets or sets the Default value of the channel.
            If a channel has no keyframe sequences connected, the default value will be used during the animation evaluation.
            A real scenario: Animation only animates a node's x coordinate, the y and z are not changed, 
            then the default value will be used during full translation evaluation.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationChannel.KeyframeSequences">
      <summary>
            Gets all keyframe sequences inside this channel
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationChannel.AddKeyframeSequence(Aspose.ThreeD.Animation.KeyframeSequence)">
      <summary>
            Adds keyframe sequence to this channel
            </summary>
      <param name="sequence">The keyframe sequence to add.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationChannel.GetEnumerator">
      <summary>
            Gets an enumerator to walk through all keyframe sequences inside this channel
            </summary>
      <returns>Enumerator</returns>
    </member>
    <member name="T:Aspose.ThreeD.Animation.AnimationClip">
      <summary>
            The Animation clip is a collection of animations.
            The scene can have one or more animation clips. 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationClip.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationClip" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationClip.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationClip" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationClip.Animations">
      <summary>
            Gets the animations contained inside the clip.
            </summary>
      <value>The layers.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationClip.Description">
      <summary>
            Gets or sets the description of this animation clip
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationClip.Start">
      <summary>
              Gets or sets the time in seconds of the beginning of the clip.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationClip.Stop">
      <summary>
            Gets or sets the time in seconds of the end of the clip.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationClip.CreateAnimationNode(System.String)">
      <summary>
            A shorthand function to create and register the animation node on current clip.
            </summary>
      <param name="nodeName">New animation node's name</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Animation.Interpolation">
      <summary>
            The key frame's interpolation type.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.Interpolation.Constant">
      <summary>
            The value will remains constant to the value of the first point until the next segment.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.Interpolation.Linear">
      <summary>
            Linear interpolation is a straight line between two points.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.Interpolation.Bezier">
      <summary>
            A bezier or hermite spline.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.Interpolation.BSpline">
      <summary>
            Basis splines are defined by a series of control points, for which the curve is guaranteed only to go through the first and the last point.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.Interpolation.CardinalSpline">
      <summary>
            A cardinal spline is a cubic hermite spline whose tangents are defined by the endpoints and a tension parameter.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.Interpolation.TCBSpline">
      <summary>
            Also called Kochanek-Bartels spline, the behavior of tangent is defined by tension/bias/continuity
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Animation.WeightedMode">
      <summary>
            Weighted mode.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.WeightedMode.None">
      <summary>
            Both out and next in weights are not used.
            When calculation needs tangent information, default value(0.3333) will be used.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.WeightedMode.OutWeight">
      <summary>
            Out(right) tangent is weighted.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.WeightedMode.NextInWeight">
      <summary>
            Next in(left) tangent is weighted.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.WeightedMode.Both">
      <summary>
            Both out and next in tangents are weighted.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Animation.StepMode">
      <summary>
            Interpolation step mode.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.StepMode.PreviousValue">
      <summary>
            Curve value of a segment always uses the value from previous key frame
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.StepMode.NextValue">
      <summary>
            Curve value of a segment always uses the value from the next key frame
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Animation.ExtrapolationType">
      <summary>
            Extrapolation type.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Constant">
      <summary>
            Value will keep the same value of the last value
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Gradient">
      <summary>
            Value will keep the same slope by time
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Cycle">
      <summary>
            The repetition.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.CycleRelative">
      <summary>
            Repeat the previous pattern based on the last value
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Oscillate">
      <summary>
            The mirror repetition.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Animation.AnimationNode">
      <summary>
            Aspose.3D's supports animation hierarchy, each animation can be composed by several animations and animation's key-frame definition.
            
            <see cref="T:Aspose.ThreeD.Animation.AnimationNode" /> defines the transformation of a property value over time, for example, animation node can be used to control a node's transformation or other <see cref="T:Aspose.ThreeD.A3DObject" /> object's numerical properties.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationNode" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationNode" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationNode.BindPoints">
      <summary>
            Gets the current property bind points
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.AnimationNode.SubAnimations">
      <summary>
            Gets the sub-animation nodes under current animations
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.FindBindPoint(System.String)">
      <summary>
            Finds the bind point by name.
            </summary>
      <returns>The bind point.</returns>
      <param name="name">Bind point's name to find.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.GetBindPoint(Aspose.ThreeD.A3DObject,System.String,System.Boolean)">
      <summary>
            Gets the animation bind point on given property.
            </summary>
      <returns>The bind point.</returns>
      <param name="target">On which object to create the bind point.</param>
      <param name="propName">The property's name.</param>
      <param name="create">If set to <c>true</c> create the bind point if it's not existing.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.GetKeyframeSequence(Aspose.ThreeD.A3DObject,System.String,System.String,System.Boolean)">
      <summary>
            Gets the keyframe sequence on given property and channel.
            </summary>
      <returns>The keyframe sequence.</returns>
      <param name="target">On which instance to create the keyframe sequence.</param>
      <param name="propName">The property's name.</param>
      <param name="channelName">The channel name.</param>
      <param name="create">If set to <c>true</c> create the animation sequence if it's not existing.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.GetKeyframeSequence(Aspose.ThreeD.A3DObject,System.String,System.Boolean)">
      <summary>
            Gets the keyframe sequence on given property.
            </summary>
      <returns>The keyframe sequence.</returns>
      <param name="target">On which instance to create the keyframe sequence.</param>
      <param name="propName">The property's name.</param>
      <param name="create">If set to <c>true</c>, create the sequence if it's not existing.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.AnimationNode.CreateBindPoint(Aspose.ThreeD.A3DObject,System.String)">
      <summary>
            Creates a BindPoint based on the property data type. 
            </summary>
      <returns>The bind point instance or null if the property is not defined.</returns>
      <param name="obj">Object.</param>
      <param name="propName">Property name.</param>
    </member>
    <member name="T:Aspose.ThreeD.Animation.BindPoint">
      <summary>
            A <see cref="T:Aspose.ThreeD.Animation.BindPoint" /> is usually created on an object's property, some property types contains multiple component fields(like a Vector3 field),
            <see cref="T:Aspose.ThreeD.Animation.BindPoint" /> will generate channel for each component field and connects the field to one or more keyframe sequence instance(s) through the channels.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.#ctor(Aspose.ThreeD.Scene,Aspose.ThreeD.Property)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.BindPoint" /> class.
            </summary>
      <param name="scene">The scene that contains the animation.</param>
      <param name="prop">Property.</param>
    </member>
    <member name="P:Aspose.ThreeD.Animation.BindPoint.Property">
      <summary>
            Gets the property associated with the CurveMapping
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.GetKeyframeSequence(System.String)">
      <summary>
            Gets the first keyframe sequence in specified channel 
            </summary>
      <param name="channelName">The channel name to find</param>
      <returns>First keyframe sequence with the channel name</returns>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.GetKeyframeSequences(System.String)">
      <summary>
            Gets all keyframe sequences in specified channel
            </summary>
      <param name="channelName">The channel name to find</param>
      <returns>Keyframe sequence list with the channel name</returns>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.CreateKeyframeSequence(System.String)">
      <summary>
            Creates a new curve and connects it to the first channel of the curve mapping
            </summary>
      <param name="name">The new sequence's name.</param>
      <returns>The keyframe sequence.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.BindKeyframeSequence(System.String,Aspose.ThreeD.Animation.KeyframeSequence)">
      <summary>
            Bind the keyframe sequence to specified channel
            </summary>
      <param name="channelName">Which channel the keyframe sequence will be bound to</param>
      <param name="sequence">The keyframe sequence to bind</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.GetChannel(System.String)">
      <summary>
            Gets channel by given name
            </summary>
      <param name="channelName">The channel name to find</param>
      <returns>Channel with the name</returns>
    </member>
    <member name="P:Aspose.ThreeD.Animation.BindPoint.Item(System.String)">
      <summary>
            Gets channel by given name
            </summary>
      <param name="channelName">Channel name</param>
      <returns>Animation channel</returns>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.AddChannel``1(System.String,``0)">
      <summary>
            Adds the specified channel property. 
            </summary>
      <returns>true, if channel was added, false otherwise.</returns>
      <param name="name">Name.</param>
      <param name="value">Value.</param>
      <typeparam name="T">The 1st type parameter.</typeparam>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.AddChannel(System.String,System.Object)">
      <summary>
            Adds the specified channel property. 
            </summary>
      <returns>true, if channel was added, false otherwise.</returns>
      <param name="name">Name.</param>
      <param name="value">Value.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.AddChannel(System.String,System.Type,System.Object)">
      <summary>
            Adds the specified channel property. 
            </summary>
      <returns>true, if channel was added, false otherwise.</returns>
      <param name="name">Name.</param>
      <param name="type">Type.</param>
      <param name="value">Value.</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.ResetChannels">
      <summary>
            Empties the property channels of this animation curve mapping. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.BindPoint.ChannelsCount">
      <summary>
            Gets the total number of property channels defined in this animation curve mapping. 
            </summary>
      <returns>The channels count.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Animation.BindPoint.ToString">
      <summary>
            Formats object to string
            </summary>
      <returns>Object string</returns>
    </member>
    <member name="T:Aspose.ThreeD.Animation.Extrapolation">
      <summary>
            Extrapolation defines how to do when sampled value is out of the range which defined by the first and last key-frames.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.Extrapolation.Type">
      <summary>
            Gets and sets the sampling pattern of extrapolation
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.Extrapolation.RepeatCount">
      <summary>
            Gets and sets the repeat times of the extrapolation pattern.
            </summary>
      <value>The count.</value>
    </member>
    <member name="T:Aspose.ThreeD.Animation.KeyFrame">
      <summary>
            A key frame is mainly defined by a time and a value, for some interpolation types, tangent/tension/bias/continuity is also used by calculating the final sampled value.
            Sampled values in a non-key-frame time position is interpolated by key-frames between the previous and next key-frames
            Value before/after the first/last key-frame are calculated by the <see cref="T:Aspose.ThreeD.Animation.Extrapolation" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyFrame.#ctor(Aspose.ThreeD.Animation.KeyframeSequence,System.Double)">
      <summary>
            Create a new key frame on specified curve
            </summary>
      <param name="curve">The curve that the key frame will be created on</param>
      <param name="time">The time position of the key frame</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyFrame.ToString">
      <summary>
            Gets the string representation of the key frame
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Time">
      <summary>
            Gets or sets the time position of list.data[index] key frame, measured in seconds.
            </summary>
      <value>The time.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Value">
      <summary>
            Gets or sets the key-frame's value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Interpolation">
      <summary>
            Gets or sets the key's interpolation type, list.data[index] defines the algorithm how the sampled value is calculated.
            </summary>
      <value>The interpolation.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.TangentWeightMode">
      <summary>
            Gets or sets the key's tangent weight mode.
            The out tangent or the next in tangent can be customized by select correct <see cref="T:Aspose.ThreeD.Animation.WeightedMode" /></summary>
      <value>The tangent weight mode.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.StepMode">
      <summary>
            Gets or sets the key's step mode.
            If the interpolation type is <see cref="F:Aspose.ThreeD.Animation.Interpolation.Constant" />, list.data[index] decides which key-frame's value will be used during interpolation.  
            A <see cref="F:Aspose.ThreeD.Animation.StepMode.PreviousValue" /> means the left key-frame's value will be used  
            A <see cref="F:Aspose.ThreeD.Animation.StepMode.NextValue" /> means the next right key-frame's value will be used  
            </summary>
      <value>The step mode.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.NextInTangent">
      <summary>
            Gets or sets the next in(left) tangent on this key frame.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.OutTangent">
      <summary>
             Gets or sets the out(right) tangent on this key frame.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.OutWeight">
      <summary>
             Gets or sets the out(right) weight on this key frame.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.NextInWeight">
      <summary>
             Gets or sets the next in(left) weight on this key frame.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Tension">
      <summary>
             Gets or sets tension used in TCB spline
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Continuity">
      <summary>
             Gets or sets the continuity used in TCB spline
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Bias">
      <summary>
             Gets or sets the bias used in TCB spline
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.IndependentTangent">
      <summary>
             Gets or sets the out and next in tangents are independent.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.Flat">
      <summary>
            Get or set if the key frame is flat.
            Key frame should be flat if next or previous key frame has the same value.
            Flat key frame has flat tangents and fixed interpolation.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyFrame.TimeIndependentTangent">
      <summary>
             Gets or sets the tangent is time-independent
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Animation.KeyframeSequence">
      <summary>
            The sequence of key-frames, it describes the transformation of a sampled value over time.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.BindPoint">
      <summary>
            Gets the property bind point which owns this curve
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.KeyFrames">
      <summary>
            Gets the key frames of this curve.
            </summary>
      <value>The keys.</value>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.PostBehavior">
      <summary>
            Gets the post behavior indicates what the sampled value should be after the last key frame.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.PreBehavior">
      <summary>
            Gets the pre behavior indicates what the sampled value should be before the first key.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.KeyframeSequence" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.KeyframeSequence" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.Add(System.Double,System.Single)">
      <summary>
            Create a new key frame with specified value
            </summary>
      <param name="time">Time position(measured in seconds)</param>
      <param name="value">The value at this time position</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.Add(System.Double,System.Single,Aspose.ThreeD.Animation.Interpolation)">
      <summary>
            Create a new key frame with specified value
            </summary>
      <param name="time">Time position(measured in seconds)</param>
      <param name="value">The value at this time position</param>
      <param name="interpolation">The interpolation type of this key frame</param>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.Reset">
      <summary>
            Removes all key frames and reset the post/pre behaviors.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.GetEnumerator">
      <summary>
            Gets the enumerator to traverse all key frames.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Animation.NamespaceDoc">
      <summary>
            The animation namespace of Aspose.3D, all animation related classes are defined in this namespace
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Constraints.NamespaceDoc">
      <summary>
            All constraint classes are defined in this namespace
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.A3DObject">
      <summary>
            The base class of all Aspose.ThreeD objects, all sub classes will support dynamic properties. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.A3DObject.name">
      <summary>
            The name of the current object.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.A3DObject.properties">
      <summary>
            The properties of the current object.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.A3DObject.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.A3DObject" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.A3DObject" /> class with no name.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.RemoveProperty(Aspose.ThreeD.Property)">
      <summary>
            Removes a dynamic property.
            </summary>
      <param name="property">Which property to remove</param>
      <returns>true if the property is successfully removed</returns>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.RemoveProperty(System.String)">
      <summary>
            Remove the specified property identified by name
            </summary>
      <param name="property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.GetProperty(System.String)">
      <summary>
            Get the value of specified property
            </summary>
      <param name="property">Property name</param>
      <returns>The value of the found property</returns>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.SetProperty(System.String,System.Object)">
      <summary>
            Sets the value of specified property
            </summary>
      <param name="property">Property name</param>
      <param name="value">The value of the property</param>
    </member>
    <member name="M:Aspose.ThreeD.A3DObject.FindProperty(System.String)">
      <summary>
            Finds the property.
            It can be a dynamic property (Created by CreateDynamicProperty/SetProperty) 
            or native property(Identified by its name)
            </summary>
      <returns>The property.</returns>
      <param name="propertyName">Property name.</param>
    </member>
    <member name="P:Aspose.ThreeD.A3DObject.Properties">
      <summary>
            Gets the collection of all properties.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.PropertyFlags">
      <summary>
            Property's flags
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PropertyFlags.None">
      <summary>
            The property has no flags
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PropertyFlags.NotSerializable">
      <summary>
            This property is not serializable
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PropertyFlags.UserDefined">
      <summary>
            This is a user defined property
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PropertyFlags.Animatable">
      <summary>
            The property is animatable
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PropertyFlags.Animated">
      <summary>
            The property is animated
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PropertyFlags.Hidden">
      <summary>
            The property is marked as hidden.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Property">
      <summary>
             Class to hold user-defined properties. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Property.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Aspose.ThreeD.Property.Name">
      <summary>
             Gets the name of the property 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Property.ValueType">
      <summary>
            Gets the type of the property value.
            </summary>
      <value>The type of the value.</value>
    </member>
    <member name="M:Aspose.ThreeD.Property.GetBindPoint(Aspose.ThreeD.Animation.AnimationNode,System.Boolean)">
      <summary>
            Gets the property bind point on specified animation instance.
            </summary>
      <param name="anim">On which animation to create the bind point.</param>
      <param name="create">Create the property bind point if it's not found.</param>
      <returns>The property bind point on specified animation instance</returns>
    </member>
    <member name="M:Aspose.ThreeD.Property.GetKeyframeSequence(Aspose.ThreeD.Animation.AnimationNode,System.Boolean)">
      <summary>
            Gets the keyframe sequence on specified animation instance.
            </summary>
      <param name="anim">On which animation to create the keyframe sequence.</param>
      <param name="create">Create the keyframe sequence if it's not found.</param>
      <returns>The keyframe sequence on specified animation instance</returns>
    </member>
    <member name="M:Aspose.ThreeD.Property.#ctor(Aspose.ThreeD.A3DObject,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Property" /> class.
            </summary>
      <param name="owner">Owner.</param>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Property.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:Aspose.ThreeD.Property" />.
            </summary>
      <returns>A string that represents the current <see cref="T:Aspose.ThreeD.Property" />.</returns>
    </member>
    <member name="T:Aspose.ThreeD.PropertyCollection">
      <summary>
            The collection of properties
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.PropertyCollection.Count">
      <summary>
            Gets the count of declared properties.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.PropertyCollection.Item(System.Int32)">
      <summary>
            Gets the property by index.
            </summary>
      <param name="idx">The 0-based index of the property</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.PropertyCollection.FindProperty(System.String)">
      <summary>
            Finds the property.
            It can be a dynamic property (Created by CreateDynamicProperty/SetProperty) 
            or native property(Identified by its name)
            </summary>
      <returns>The property.</returns>
      <param name="property">Property name.</param>
    </member>
    <member name="P:Aspose.ThreeD.PropertyCollection.Item(System.String)">
      <summary>
            Gets or sets the value of the property by property name.
            </summary>
      <param name="property">The name of the property</param>
      <returns>The property's value</returns>
    </member>
    <member name="M:Aspose.ThreeD.PropertyCollection.RemoveProperty(Aspose.ThreeD.Property)">
      <summary>
            Removes a dynamic property.
            </summary>
      <param name="property">Which property to remove</param>
      <returns>true if the property is successfully removed</returns>
    </member>
    <member name="M:Aspose.ThreeD.PropertyCollection.RemoveProperty(System.String)">
      <summary>
            Removes a dynamic property.
            </summary>
      <param name="property">Which property to remove</param>
      <returns>true if the property is successfully removed</returns>
    </member>
    <member name="M:Aspose.ThreeD.PropertyCollection.GetEnumerator">
      <summary>
             Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Deformers.Bone">
      <summary>
            A bone defines the subset of the geometry's control point, and defined blend weight for each control point.
            The <see cref="T:Aspose.ThreeD.Deformers.Bone" /> object cannot be used directly, a <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer" /> instance is used to deform the geometry, and <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer" /> comes with a set of bones, each bone linked to a node.
            NOTE: A control point of a geometry can be bounded to more than one Bones.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.Bone.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.Bone" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.Bone.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.Bone" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.Bone.Item(System.Int32)">
      <summary>
            Gets or sets the blend weight of specified control point
            </summary>
      <param name="index">
      </param>
      <returns>The weight</returns>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.Bone.GetWeight(System.Int32)">
      <summary>
            Gets the weight for control point specified by index
            </summary>
      <param name="index">Control point's index</param>
      <returns>the weight at specified index, or 0 if the index is invalid</returns>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.Bone.SetWeight(System.Int32,System.Double)">
      <summary>
            Sets the weight for control point specified by index
            </summary>
      <param name="index">Control point's index</param>
      <param name="weight">New weight</param>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.Bone.WeightCount">
      <summary>
            Gets the count of weight, this is automatically extended by <see cref="M:Aspose.ThreeD.Deformers.Bone.SetWeight(System.Int32,System.Double)" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.Bone.Transform">
      <summary>
            Gets or sets the transform matrix of the node containing the bone.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.Bone.BoneTransform">
      <summary>
            Gets or sets the transform matrix of the bone.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.Bone.Node">
      <summary>
            Gets or sets the node. The bone node is the bone which skin attached to, the <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer" /> will use bone node to influence the displacement of the control points.
            Bone node usually has a <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> attached, but it's not required.
            Attached <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> is usually used by DCC software to show skeleton to user.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Deformers.Deformer">
      <summary>
            Base class for <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer" /> and <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.Deformer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.Deformer" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.Deformer.Owner">
      <summary>
            Gets the geometry which owns this deformer
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Deformers.MorphTargetChannel">
      <summary>
            A MorphTargetChannel is used by <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer" /> to organize the target geometries.
            Some file formats like FBX support multiple channels in parallel.
            </summary>
      <remarks>
            Weight is between 0 and 1.0, and default weight for target is 0.0; 
            </remarks>
    </member>
    <member name="F:Aspose.ThreeD.Deformers.MorphTargetChannel.DefaultWeight">
      <summary>
            Default weight for morph target.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.Weights">
      <summary>
            Gets the full weight values of target geometries. 
            </summary>
      <value>The full weights.</value>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.ChannelWeight">
      <summary>
            Gets or sets the deformer weight of this channel. 
            The weight is between 0.0 and 1.0
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.Targets">
      <summary>
            Gets all targets associated with the channel.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetChannel" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetChannel" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.Item(Aspose.ThreeD.Entities.Shape)">
      <summary>
            Gets or sets the weight for specified geometry
            </summary>
      <param name="target">Target geometry.</param>
      <returns>Weight</returns>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.GetWeight(Aspose.ThreeD.Entities.Shape)">
      <summary>
            Gets the weight for the specified target, if the target is not belongs to this channel, default value 0 is returned. 
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.SetWeight(Aspose.ThreeD.Entities.Shape,System.Double)">
      <summary>
            Sets the weight for the specified target, default value is 1, range should between 0~1
            </summary>
      <param name="target">
      </param>
      <param name="weight">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Deformers.MorphTargetDeformer">
      <summary>
            MorphTargetDeformer provides per-vertex animation.
            MorphTargetDeformer organize all targets via <see cref="T:Aspose.ThreeD.Deformers.MorphTargetChannel" />, each channel can organize multiple targets.
            A common use of morph target deformer is to apply facial expression to a character.
            More details can be found at https://en.wikipedia.org/wiki/Morph_target_animation
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.MorphTargetDeformer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.MorphTargetDeformer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.MorphTargetDeformer.Item(Aspose.ThreeD.Entities.Shape)">
      <summary>
            Gets or sets the weight for given geometry, this is a short-handed way to modify weight for target without accessing channel.
            </summary>
      <param name="target">Target geometry</param>
      <returns>Weight</returns>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.MorphTargetDeformer.Channels">
      <summary>
            Gets all channels contained in this deformer
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Deformers.NamespaceDoc">
      <summary>
            All deformer classes are defined in this namespace
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Deformers.SkinDeformer">
      <summary>
            A skin deformer contains multiple bones to work, each bone blends a part of the geometry by control point's weights.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.SkinDeformer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Deformers.SkinDeformer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Deformers.SkinDeformer.Bones">
      <summary>
            Gets all bones that the skin deformer contains
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Camera">
      <summary>
            The camera describes the eye point of the viewer looking at the scene.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Camera.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Camera.#ctor(Aspose.ThreeD.Entities.ProjectionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera" /> class.
            </summary>
      <param name="projectionType">Projection type.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Camera.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Camera.#ctor(System.String,Aspose.ThreeD.Entities.ProjectionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera" /> class.
            </summary>
      <param name="name">Name.</param>
      <param name="projectionType">Projection type.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.ApertureMode">
      <summary>
            Gets or sets the camera's aperture mode
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.FieldOfView">
      <summary>
            Gets or sets the camera's field of view in degrees, this property is used only when ApertureMode is <see cref="F:Aspose.ThreeD.Entities.ApertureMode.Horizontal" /> or <see cref="F:Aspose.ThreeD.Entities.ApertureMode.Vertical" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.FieldOfViewX">
      <summary>
            Gets or sets the camera's horizontal field of view in degrees, this property is used only when ApertureMode is  <see cref="F:Aspose.ThreeD.Entities.ApertureMode.HorizAndVert" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.FieldOfViewY">
      <summary>
            Gets or sets the camera's vertical field of view in degrees, this property is used only when ApertureMode is  <see cref="F:Aspose.ThreeD.Entities.ApertureMode.HorizAndVert" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.Width">
      <summary>
            Gets or sets the view plane's width measured in inches
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.Height">
      <summary>
            Gets or sets the view plane's height measured in inches
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.AspectRatio">
      <summary>
            Gets or sets the view plane aspect ratio.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.Magnification">
      <summary>
            Gets or sets the maginification used in orthographic camera
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Camera.ProjectionType">
      <summary>
            Gets or sets the camera's projection type.
            By default the perspective projection is used.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Camera.MoveForward(System.Double)">
      <summary>
            Move camera forward towards its direction or target.
            </summary>
      <param name="distance">How long to move forward</param>
    </member>
    <member name="T:Aspose.ThreeD.Entities.ApertureMode">
      <summary>
            Camera aperture modes.
            The aperture mode determines which values drive the camera aperture. 
            If the aperture mode is HorizAndVert, Horizontal, or Vertical, then the field of view is used. 
            If the aperture mode is FocalLength, then the focal length is used.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ApertureMode.HorizAndVert">
      <summary>
            Set the angle values for both the horizontal and vertical settings.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ApertureMode.Horizontal">
      <summary>
            Set only the horizontal angle.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ApertureMode.Vertical">
      <summary>
            Set only the vertical angle.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ApertureMode.FocalLength">
      <summary>
            Use focal length directly.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.EndPoint">
      <summary>
            The end point to trim the curve, can be a parameter value or a cartesian point.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.EndPoint.#ctor(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Entities.EndPoint" /> from a cartesian point.
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.EndPoint.#ctor(System.Double)">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Entities.EndPoint" /> from a real parameter.
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.EndPoint.FromDegree(System.Double)">
      <summary>
            Create an end point measured in degree.
            </summary>
      <param name="degree">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.EndPoint.FromRadian(System.Double)">
      <summary>
            Create an end point measured in radian.
            </summary>
      <param name="degree">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.EndPoint.IsCartesianPoint">
      <summary>
            Is the end point a cartesian point?
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.EndPoint.AsPoint">
      <summary>
            Gets the end point as cartesian point, or thrown an exception.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.EndPoint.AsValue">
      <summary>
            Gets the end point as a real parameter, or throw an exception.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.EndPoint.ToString">
      <summary>
            Returns a string representation of the current end point.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Curve">
      <summary>
            The base class of all curve implementations.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Curve.Color">
      <summary>
            Gets or sets the color of the line, default value is white(1, 1, 1)
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Curve.GetEntityRendererKey">
      <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Circle">
      <summary>
            A <see cref="T:Aspose.ThreeD.Entities.Circle" /> curve consists of a set of points in the edge of the circle shape.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Circle.Radius">
      <summary>
            The radius of the circle curve, default value is 10
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Circle.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Circle" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Circle.#ctor(System.Double)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Circle" /></summary>
      <param name="radius">The radius of the circle curve.</param>
    </member>
    <member name="T:Aspose.ThreeD.Entities.CompositeCurve">
      <summary>
            A <see cref="T:Aspose.ThreeD.Entities.CompositeCurve" /> is consisting of several curve segments.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.CompositeCurve.Segment">
      <summary>
            The curve segment 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.CompositeCurve.Segment.Curve">
      <summary>
            The curve used in the segment
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.CompositeCurve.Segment.SameDirection">
      <summary>
            Use the same direction of the original curve, or use reversed direction
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.CompositeCurve.Segments">
      <summary>
            The segments of the curve.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.CompositeCurve.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.CompositeCurve" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.CompositeCurve.AddSegment(Aspose.ThreeD.Entities.Curve,System.Boolean)">
      <summary>
            The 
            </summary>
      <param name="curve">
      </param>
      <param name="sameDirection">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Ellipse">
      <summary>
            An <see cref="T:Aspose.ThreeD.Entities.Ellipse" /> defines a set of points that form the shape of ellipse.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Ellipse.SemiAxis1">
      <summary>
            Radius on X-axis
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Ellipse.SemiAxis2">
      <summary>
            Radius on Y-axis
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Ellipse.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Ellipse" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Ellipse.#ctor(System.Double,System.Double)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Ellipse" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.TransformedCurve">
      <summary>
            A <see cref="T:Aspose.ThreeD.Entities.TransformedCurve" /> gives a curve a placement by using a transformation matrix.
            This allows to perform a transformation inside a <see cref="T:Aspose.ThreeD.Entities.TrimmedCurve" /> or <see cref="T:Aspose.ThreeD.Entities.CompositeCurve" />.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TransformedCurve.TransformMatrix">
      <summary>
            The transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TransformedCurve.BasisCurve">
      <summary>
            The basis curve.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TransformedCurve.#ctor">
      <summary>
            The constructor of <see cref="T:Aspose.ThreeD.Entities.TransformedCurve" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TransformedCurve.#ctor(Aspose.ThreeD.Entities.Curve,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            The constructor of <see cref="T:Aspose.ThreeD.Entities.TransformedCurve" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.TrimmedCurve">
      <summary>
            A bounded curve that trimmed the basis curve at both ends.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.BasisCurve">
      <summary>
            The basis curve to be trimmed.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.First">
      <summary>
            The first end point to trim, can be a cartesian point or a real parameter.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.Second">
      <summary>
            The second end point to trim, can be a cartesian point or a real parameter.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.SameDirection">
      <summary>
            Gets or sets whether the trimmed result uses the same direction of the basis curve.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TrimmedCurve.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.TrimmedCurve" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.ProjectionType">
      <summary>
            Camera's projection types.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ProjectionType.Perspective">
      <summary>
            The camera uses perspective projection. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ProjectionType.Orthographic">
      <summary>
            The camera uses orthographic projection.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.RotationMode">
      <summary>
            The frustum's rotation mode
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.RotationMode.FixedTarget">
      <summary>
            Target is fixed, direction is calculated by the look at target
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.RotationMode.FixedDirection">
      <summary>
            Direction is fixed, look at is calculated by the direction
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Frustum">
      <summary>
            The base class of <see cref="T:Aspose.ThreeD.Entities.Camera" /> and <see cref="T:Aspose.ThreeD.Entities.Light" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.RotationMode">
      <summary>
            Gets or sets the frustum's orientation mode
            This property only works when the <see cref="P:Aspose.ThreeD.Entities.Frustum.Target" /> is null.
            If the value is <see cref="F:Aspose.ThreeD.Entities.RotationMode.FixedTarget" />, the direction is always calculated by the property <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt" />
            Otherwise the <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt" /> is always calculated by the <see cref="P:Aspose.ThreeD.Entities.Frustum.Direction" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.NearPlane">
      <summary>
            Gets or sets the frustum's near plane distance.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.FarPlane">
      <summary>
            Gets or sets the frustum's far plane distance.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.Aspect">
      <summary>
            Gets or sets the aspect ratio of the frustum
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.OrthoHeight">
      <summary>
            Gets or sets the height when frustum in orthographic projection.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.Up">
      <summary>
            Gets or sets the up direction of the camera
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.LookAt">
      <summary>
            Gets or sets the the interested position that the camera is looking at.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.Direction">
      <summary>
            Gets or sets the direction that the camera is looking at.
            Changes on this property will also affects the <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt" /> and <see cref="P:Aspose.ThreeD.Entities.Frustum.Target" />.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Frustum.Target">
      <summary>
            Gets or sets the target that the camera is looking at.
            If the user supports this property, it should be prior to <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt" /> property.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Geometry">
      <summary>
            The base class of all renderable geometric objects (like <see cref="T:Aspose.ThreeD.Entities.Mesh" />, <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" />, <see cref="T:Aspose.ThreeD.Entities.Patch" /> and etcs).
            <para />
            The <see cref="T:Aspose.ThreeD.Entities.Geometry" /> base class supports:  
            <ul><li><b>Control point management</b>, control points defines the base 3D spatial structure of the geometry, different geometric types has different way to define concrete 3D models. </li><li><b>Vertex element definition</b>, vertex elements applies extra informations like normals/uv coordinates/vertex colors to the geometry, see <see cref="T:Aspose.ThreeD.Entities.VertexElement" /> for more details.</li><li><b>Object deforming</b>, <see cref="T:Aspose.ThreeD.Deformers.Deformer" /> can be binded to animate geometry's shape.</li></ul></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Geometry" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Geometry.Visible">
      <summary>
            Gets or sets if the geometry is visible
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Geometry.Deformers">
      <summary>
            Gets all deformers assocated with this geometry.
            </summary>
      <value>The deformers.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.GetDeformers``1">
      <summary>
            Gets all deformers with specified deformer types
            </summary>
      <typeparam name="T">The deformer type</typeparam>
      <returns>Deformer collection</returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Geometry.ControlPoints">
      <summary>
            Gets all control points
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Geometry.CastShadows">
      <summary>
            Gets or sets wheather this geometry can cast shadow
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Geometry.ReceiveShadows">
      <summary>
            Gets or sets wheather this geometry can receive shadow.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Geometry.VertexElements">
      <summary>
            Gets all vertex elements
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.GetElement(Aspose.ThreeD.Entities.VertexElementType)">
      <summary>
            Gets a vertex element with specified type
            </summary>
      <param name="type">which vertex element type to find</param>
      <returns>
        <see cref="T:Aspose.ThreeD.Entities.VertexElement" /> instance if found, otherwise null will be returned.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.GetVertexElementOfUV(Aspose.ThreeD.Entities.TextureMapping)">
      <summary>
            Gets a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> instance with given texture mapping type
            </summary>
      <param name="textureMapping">
      </param>
      <returns>VertexElementUV with the texture mapping type</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElement(Aspose.ThreeD.Entities.VertexElementType)">
      <summary>
            Creates a vertex element with specified type and add it to the geometry.
            </summary>
      <remarks>
            If type is <see cref="F:Aspose.ThreeD.Entities.VertexElementType.UV" />, a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> with texture mapping type to <see cref="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse" /> will be created.
            </remarks>
      <param name="type">Vertex element type</param>
      <returns>Created element.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.AddElement(Aspose.ThreeD.Entities.VertexElement)">
      <summary>
            Adds an existing vertex element to current geometry
            </summary>
      <param name="element">The vertex element to add</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElement(Aspose.ThreeD.Entities.VertexElementType,Aspose.ThreeD.Entities.MappingMode,Aspose.ThreeD.Entities.ReferenceMode)">
      <summary>
            Creates a vertex element with specified type and add it to the geometry.
            </summary>
      <remarks>
            If type is <see cref="F:Aspose.ThreeD.Entities.VertexElementType.UV" />, a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> with texture mapping type to <see cref="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse" /> will be created.
            </remarks>
      <param name="type">Vertex element type</param>
      <param name="mappingMode">Default mapping mode</param>
      <param name="referenceMode">Default reference mode</param>
      <returns>Created element.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElementUV(Aspose.ThreeD.Entities.TextureMapping)">
      <summary>
            Creates a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> with given texture mapping type.
            </summary>
      <param name="uvMapping">Which texture mapping type to create</param>
      <returns>Created element uv</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElementUV(Aspose.ThreeD.Entities.TextureMapping,Aspose.ThreeD.Entities.MappingMode,Aspose.ThreeD.Entities.ReferenceMode)">
      <summary>
            Creates a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> with given texture mapping type.
            </summary>
      <param name="uvMapping">Which texture mapping type to create</param>
      <param name="mappingMode">Default mapping mode</param>
      <param name="referenceMode">Default reference mode</param>
      <returns>Created element uv</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.IMeshConvertible">
      <summary>
            Entities that implemented this interface can be converted to <see cref="T:Aspose.ThreeD.Entities.Mesh" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.IMeshConvertible.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.IOrientable">
      <summary>
            Orientable entities shall implement this interface.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.IOrientable.Direction">
      <summary>
            Gets or sets the direction that the entity is looking at.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.IOrientable.Target">
      <summary>
            Gets or sets the target that the entity is looking at.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.LightType">
      <summary>
            Light types.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.LightType.Point">
      <summary>
            The point light.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.LightType.Directional">
      <summary>
            The directional light.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.LightType.Spot">
      <summary>
            The spot light.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.LightType.Area">
      <summary>
            The area light.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.LightType.Volume">
      <summary>
            The volume light.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Light">
      <summary>
            The light illuminates the scene.
            <para />
            The formula to calculate the total attenuation of light is:
            <c>A = ConstantAttenuation + (Dist * LinearAttenuation) + ((Dist^2) * QuadraticAttenuation)</c></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.Color">
      <summary>
            Gets or sets the light's color
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.LightType">
      <summary>
            Gets or sets the light's type
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.CastLight">
      <summary>
            Gets or sets if the current light instance can illuminate other objects.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.Intensity">
      <summary>
            Gets or sets the light's intensity, default value is 100
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.HotSpot">
      <summary>
            Gets or sets the hot spot cone angle(in degrees).
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.Falloff">
      <summary>
            Gets or sets the falloff cone angle (in degrees).
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.ConstantAttenuation">
      <summary>
             Gets or sets the constant attenuation to calculate the total attenuation of the light
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.LinearAttenuation">
      <summary>
             Gets or sets the linear attenuation to calculate the total attenuation of the light
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.QuadraticAttenuation">
      <summary>
             Gets or sets the quadratic attenuation to calculate the total attenuation of the light
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.CastShadows">
      <summary>
            Gets or sets if the light can cast shadows on other objects.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Light.ShadowColor">
      <summary>
            Gets or sets the shadow's color.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Light.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Light" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Light.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Light" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Light.#ctor(System.String,Aspose.ThreeD.Entities.LightType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Light" /> class.
            </summary>
      <param name="name">Name</param>
      <param name="type">New light's type</param>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Line">
      <summary>
            A line is a path defined by a set of points with <see cref="P:Aspose.ThreeD.Entities.Geometry.ControlPoints" />, and connected by <see cref="P:Aspose.ThreeD.Entities.Line.Segments" />,
            which means it can also be a set of connected line segments.
            The line is usually a linear object, which means it cannot be used to represent a curve, in order to represent a curve, uses <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" />.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Line.ControlPoints">
      <summary>
            Gets all control points
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Line.Visible">
      <summary>
            Gets or sets if the geometry is visible
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Line.Segments">
      <summary>
            Gets the segments of the line
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Line.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Line" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Line.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Line" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Line.FromPoints(Aspose.ThreeD.Utilities.Vector3[])">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Entities.Line" /> instance from a set of points.
            </summary>
      <param name="points">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Line.MakeDefaultIndices">
      <summary>
            Generate the sequence 0,1,2,3....<see cref="P:Aspose.ThreeD.Entities.Geometry.ControlPoints" />.Length-1 to <see cref="P:Aspose.ThreeD.Entities.Line.Segments" /> so the ControlPoints can be used as a single line
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.LinearExtrusion">
      <summary>
            Linear extrusion takes a 2D shape as input and extends the shape in the 3rd dimension.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Shape">
      <summary>
            The base shape to be extruded.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Direction">
      <summary>
            The direction of extrusion, default value is (0, 0, 1) 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Height">
      <summary>
            The height of the extruded geometry, default value is 1.0
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Slices">
      <summary>
            The slices of the twisted extruded geometry, default value is 1.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Center">
      <summary>
            If this value is false, the linear extrusion Z range is from 0 to height, otherwise the range is from -height/2 to height/2.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.TwistOffset">
      <summary>
            The offset that used in twisting, default value is (0, 0, 0).
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Twist">
      <summary>
            The number of degrees of through which the shape is extruded.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.LinearExtrusion.#ctor">
      <summary>
            Constructor of instance <see cref="T:Aspose.ThreeD.Entities.LinearExtrusion" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.LinearExtrusion.#ctor(Aspose.ThreeD.Profiles.Profile,System.Double)">
      <summary>
            Constructor of instance <see cref="T:Aspose.ThreeD.Entities.LinearExtrusion" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.LinearExtrusion.ToMesh">
      <summary>
            Convert the extrusion to mesh.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Mesh">
      <summary>
            A mesh is made of many n-sided polygons.
            </summary>
      <example>
            To add a polygon in mesh:
            <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
            Travel through all polygons in mesh:
            <code>
            foreach(int[] polygon in mesh)
            {
                //deal with polygon
            }
            </code></example>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Mesh" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.Drawing.Bitmap)">
      <summary>
            Construct a mesh using specified height map, 
            if the height map's pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
            The control point's x and y components are normalized pixel coordinate.
            </summary>
      <param name="heightMap">Input height map</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.Drawing.Bitmap,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Construct a mesh using specified height map, 
            if the height map's pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
            The control point's x and y components are normalized pixel coordinate.
            </summary>
      <param name="heightMap">Input height map</param>
      <param name="transform">The transform that applied on the control points</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.Drawing.Bitmap,System.Boolean,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Construct a mesh using specified height map, 
            if the height map's pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
            The control point's x and y components are normalized pixel coordinate.
            </summary>
      <param name="heightMap">Input height map</param>
      <param name="triMesh">
      </param>
      <param name="transform">The transform that applied on the control points</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Mesh" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Mesh.Edges">
      <summary>
            Gets edges of the Mesh.  Edge is optional in mesh, so it can be empty.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.GetPolygonSize(System.Int32)">
      <summary>
            Gets the vertex count of the specified polygon.
            </summary>
      <returns>The polygon size.</returns>
      <param name="index">Index.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.GetEnumerator">
      <summary>
            Gets the enumerator for each inner polygons.
            </summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Mesh.PolygonCount">
      <summary>
            Gets the count of polygons
            </summary>
      <value>The polygon count.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Mesh.Polygons">
      <summary>
            Gets the polygons definition of the mesh 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Creates a new polygon with all vertices defined in <paramref name="indices" />.
            To create polygon vertex by vertex, please use <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder" />.
            </summary>
      <example>
        <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
      </example>
      <param name="indices">Array of the polygon indices, each index points to a control point that forms the polygon.</param>
      <param name="offset">The offset of the first polygon index</param>
      <param name="length">The length of the indices</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32[])">
      <summary>
            Creates a new polygon with all vertices defined in <paramref name="indices" />.
            To create polygon vertex by vertex, please use <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder" />.
            </summary>
      <example>
        <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
      </example>
      <param name="indices">Array of the polygon indices, each index points to a control point that forms the polygon.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Create a polygon with 4 vertices(quad)
            </summary>
      <param name="v1">Index of the first vertex</param>
      <param name="v2">Index of the second vertex</param>
      <param name="v3">Index of the third vertex</param>
      <param name="v4">Index of the fourth vertex</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32,System.Int32,System.Int32)">
      <summary>
            Create a polygon with 3 vertices(triangle)
            </summary>
      <param name="v1">Index of the first vertex</param>
      <param name="v2">Index of the second vertex</param>
      <param name="v3">Index of the third vertex</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Mesh.ToMesh">
      <summary>
            Gets the Mesh instance from current entity.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.PolygonModifier">
      <summary>
            Utilities to modify polygons
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(Aspose.ThreeD.Scene)">
      <summary>
            Convert all polygon-based meshes into full triangle mesh
            </summary>
      <param name="scene">The scene to process</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(Aspose.ThreeD.Entities.Mesh)">
      <summary>
            Convert a polygon-based mesh into full triangle mesh
            </summary>
      <param name="mesh">The original non-triangle mesh</param>
      <returns>The generated new triangle mesh</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4},System.Collections.Generic.IList{System.Int32[]},System.Boolean,Aspose.ThreeD.Utilities.Vector3[]@)">
      <summary>
            Convert a polygon-based mesh into full triangle mesh
            </summary>
      <param name="controlPoints">Control points of the mesh</param>
      <param name="polygons">Polygon faces</param>
      <param name="generateNormals">Generate normals</param>
      <param name="nor_out">Generated Per-control point normal</param>
      <returns>A set of triangles</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4},System.Collections.Generic.IList{System.Int32[]})">
      <summary>
            Convert a polygon-based mesh into triangles
            </summary>
      <param name="controlPoints">Control points of the mesh</param>
      <param name="polygons">Polygon faces</param>
      <returns>A set of triangles</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4},System.Int32[])">
      <summary>
            Convert a polygon into triangles
            </summary>
      <param name="controlPoints">Control points of the mesh</param>
      <param name="polygon">Polygon face</param>
      <returns>A set of triangles</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4})">
      <summary>
            Convert a polygon into triangles, the order of the polygon is defined by the <paramref name="controlPoints" /></summary>
      <param name="controlPoints">Control points of the mesh</param>
      <returns>A set of triangles</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergeMesh(Aspose.ThreeD.Scene)">
      <summary>
            Convert a whole scene to a single transformed mesh
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
      <param name="scene">The scene to merge</param>
      <returns>The merged mesh</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergeMesh(System.Collections.Generic.IList{Aspose.ThreeD.Node})">
      <summary>
            Convert a whole node to a single transformed mesh
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
      <param name="nodes">The nodes to merge</param>
      <returns>Merged mesh</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergeMesh(Aspose.ThreeD.Node)">
      <summary>
            Convert a whole node to a single transformed mesh
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
      <param name="node">The node to merge</param>
      <returns>Merged mesh</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Scale(Aspose.ThreeD.Scene,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Scale all geometries(Scale the control points not the transformation matrix) in this scene
            </summary>
      <param name="scene">The scene to scale</param>
      <param name="scale">The scale factor</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Scale(Aspose.ThreeD.Node,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Scale all geometries(Scale the control points not the transformation matrix) in this node
            </summary>
      <param name="node">The node to scale</param>
      <param name="scale">The scale factor</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.GenerateNormal(Aspose.ThreeD.Entities.Mesh)">
      <summary>
            Generate normal data from Mesh definition
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.GenerateUV(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Entities.VertexElementNormal)">
      <summary>
            Generate UV data from the given input mesh and specified normal data.
            </summary>
      <param name="mesh">The input mesh</param>
      <param name="normals">The normal data</param>
      <returns>Generated UV data</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.GenerateUV(Aspose.ThreeD.Entities.Mesh)">
      <summary>
            Generate UV data from the given input mesh
            </summary>
      <param name="mesh">The input mesh</param>
      <returns>Generated UV data</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.SplitMesh(Aspose.ThreeD.Node,Aspose.ThreeD.Entities.SplitMeshPolicy,System.Boolean,System.Boolean)">
      <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" />.
            Each sub-mesh will use only one material.
            Perform mesh splitting on a node
            </summary>
      <param name="node">
      </param>
      <param name="policy">
      </param>
      <param name="createChildNodes">Create child nodes for each sub-mesh.</param>
      <param name="removeOldMesh">Remove the old mesh after splitted, if this parameter is false, the old and new meshes will co-exists.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.SplitMesh(Aspose.ThreeD.Scene,Aspose.ThreeD.Entities.SplitMeshPolicy,System.Boolean)">
      <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" />.
            Each sub-mesh will use only one material.
            Perform mesh splitting on all nodes of the scene.
            </summary>
      <param name="scene">
      </param>
      <param name="policy">
      </param>
      <param name="removeOldMesh">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.SplitMesh(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Entities.SplitMeshPolicy)">
      <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" />.
            Each sub-mesh will use only one material.
            The original mesh will not get changed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.BuildTangentBinormal(Aspose.ThreeD.Scene)">
      <summary>
            This will create tangent and binormal on all meshes of the scene
            Normal is required, if normal is not existing on the mesh, it will also create the normal data from position.
            UV is also required, the mesh will be ignored if no UV is defined.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonModifier.BuildTangentBinormal(Aspose.ThreeD.Entities.Mesh)">
      <summary>
            This will create tangent and binormal on the mesh
            Normal is required, if normal is not existing on the mesh, it will also create the normal data from position.
            UV is also required, an exception will be raised if no UV found.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.SplitMeshPolicy">
      <summary>
            Share vertex/control point data between sub-meshes or each sub-mesh has its own compacted data.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.SplitMeshPolicy.CloneData">
      <summary>
            Control points and vertex elements data will be cloned
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.SplitMeshPolicy.CompactData">
      <summary>
            Only used control points and vertex elements data will be copied to the sub-mesh
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.NamespaceDoc">
      <summary>
            All geometry and entities are defined in this namespace
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.NurbsType">
      <summary>
            NURBS types.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.NurbsType.Open">
      <summary>
            The <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" /> is an open curve.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.NurbsType.Closed">
      <summary>
            The <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" /> is a closed curve has its last control point equals to its first one.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.NurbsType.Periodic">
      <summary>
            The <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" /> is a periodic curve.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.CurveDimension">
      <summary>
             The dimension of the curves. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional">
      <summary>
            The curves are two dimensional points. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.CurveDimension.ThreeDimensional">
      <summary>
            The curves are three dimensional points. 
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.NurbsCurve">
      <summary>
        <a href="https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline">NURBS curve</a> is a curve represented by NURBS(Non-uniform rational basis spline),
            A NURBS curve is defined by its <see cref="P:Aspose.ThreeD.Entities.NurbsCurve.Order" />, a set of weighted <see cref="P:Aspose.ThreeD.Entities.Geometry.ControlPoints" /> and a <see cref="P:Aspose.ThreeD.Entities.NurbsCurve.KnotVectors" />
            The w component in control point is used as control point's weight, whatever it is a <see cref="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional" /> or <see cref="F:Aspose.ThreeD.Entities.CurveDimension.ThreeDimensional" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.ControlPoints">
      <summary>
            Gets all control points
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsCurve.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsCurve.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Multiplicity">
      <summary>
            Gets the multiplicity.
            </summary>
      <value>The multiplicity.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Order">
      <summary>
            Gets or sets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.
            </summary>
      <value>The order.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Dimension">
      <summary>
            Gets or sets the curve's dimension.
            </summary>
      <remarks>
            For a <see cref="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional" /> curve, the z component in control point is unused.
            </remarks>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.CurveType">
      <summary>
            Gets or sets the type of the curve.
            </summary>
      <value>The type of the curve.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.KnotVectors">
      <summary>
            Gets the knot vector, it is a sequence of parameter values that determines where and how the control points affect the NURBS curve.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Rational">
      <summary>
            Gets or sets whether it is rational, this value indicates whether this <see cref="T:Aspose.ThreeD.Entities.NurbsCurve" /> is rational spline or non-rational spline.
            Non-rational B-spline is a special case of rational B-splines.
            </summary>
      <value>true if it's rational spline; otherwise, false is a non-rational spline.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsCurve.Evaluate(System.Int32)">
      <summary>
            Evaluate the nurbs curve
            </summary>
      <param name="steps">The evaluation frequency between two neighbor knots, default value is 20</param>
      <returns>Points in the curve</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsCurve.EvaluateAt(System.Double)">
      <summary>
            Evaluate the curve's point at specified position
            </summary>
      <param name="u">The position in the curve, between 0 and 1</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.NurbsDirection">
      <summary>
            A 3D <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" /> has two direction, the <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.U" /> and <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.V" />, the <see cref="T:Aspose.ThreeD.Entities.NurbsDirection" /> defines data for each direction.
            A direction is actually a NURBS curve, that means it's also defined by its <see cref="P:Aspose.ThreeD.Entities.NurbsDirection.Order" />, a <see cref="P:Aspose.ThreeD.Entities.NurbsDirection.KnotVectors" />, and a set of weighted control points(defined in <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" />).
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsDirection.KnotVectors">
      <summary>
            Gets the knot vector, it is a sequence of parameter values that determines where and how the control points affect the NURBS curve.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Multiplicity">
      <summary>
            Gets the multiplicity.
            </summary>
      <value>The multiplicity.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Order">
      <summary>
            Gets or sets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Divisions">
      <summary>
            Gets or sets the number of divisions between adjacent control points in current direction.
            </summary>
      <value>The step.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Type">
      <summary>
            Gets or sets the type of the current direction.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Count">
      <summary>
            Gets or sets the count of control points in current direction.
            </summary>
      <value>The count.</value>
    </member>
    <member name="T:Aspose.ThreeD.Entities.NurbsSurface">
      <summary>
        <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" /> is a surface represented by <a href="https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline">NURBS(Non-uniform rational basis spline)</a>,
            A <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" /> is defined by two <see cref="T:Aspose.ThreeD.Entities.NurbsDirection" /><see cref="P:Aspose.ThreeD.Entities.NurbsSurface.U" /> and <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.V" />.
            The w component in control point is used as control point's weight whatever the direction's type is a <see cref="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional" /> or <see cref="F:Aspose.ThreeD.Entities.CurveDimension.ThreeDimensional" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsSurface.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsSurface.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsSurface.U">
      <summary>
            Gets the nurbs surface's U direction
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.NurbsSurface.V">
      <summary>
            Gets the nurbs surface's V direction
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.NurbsSurface.ToMesh">
      <summary>
            Convert the nurbs surface to the mesh
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Patch">
      <summary>
             A <see cref="T:Aspose.ThreeD.Entities.Patch" /> is a parametric modeling surface, similar to <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" />, it's also defined by two 
             <see cref="T:Aspose.ThreeD.Entities.PatchDirection" />, the <see cref="P:Aspose.ThreeD.Entities.Patch.U" /> and <see cref="P:Aspose.ThreeD.Entities.Patch.V" />.
            
             But difference between <see cref="T:Aspose.ThreeD.Entities.Patch" /> and <see cref="T:Aspose.ThreeD.Entities.NurbsSurface" /> is that the <see cref="T:Aspose.ThreeD.Entities.PatchDirection" /> curve 
             can be one of <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.Bezier" />, <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.QuadraticBezier" />, <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.BasisSpline" />, <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.CardinalSpline" /> and <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.Linear" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Patch.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Patch" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Patch.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Patch" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Patch.U">
      <summary>
            Gets the u direction.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Patch.V">
      <summary>
            Gets the v direction.
            </summary>
      <value>The v.</value>
    </member>
    <member name="T:Aspose.ThreeD.Entities.PatchDirectionType">
      <summary>
            Patch direction's types.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.Bezier">
      <summary>
        <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">The patch direction is a Bezier curve.</a>
      </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.QuadraticBezier">
      <summary>
            The quadratic bezier patch.
            <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves">The patch direction is a quadratic curve.</a></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.CardinalSpline">
      <summary>
            cardinal patch.
            <a href="https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline">The patch direction is a cardinal spline.</a></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.BasisSpline">
      <summary>
        <a href="https://en.wikipedia.org/wiki/B-spline">The patch direction is a basis spline.</a>
      </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.Linear">
      <summary>
        <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Linear_curves">The patch direction is a linear curve.</a>
      </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.PatchDirection">
      <summary>
            Patch's U and V direction.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.PatchDirection.Type">
      <summary>
            Gets or sets the patch's type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.PatchDirection.Divisions">
      <summary>
            Gets or sets the number of divisions between adjacent control points.
            </summary>
      <value>The step.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.PatchDirection.ControlPoints">
      <summary>
            Gets or sets the count of control points in current direction.
            </summary>
      <value>The count.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.PatchDirection.Closed">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Entities.PatchDirection" /> is a closed curve.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.PointCloud">
      <summary>
            The point cloud contains no topology information but only the control points and the vertex elements.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PointCloud.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.PointCloud" /></summary>
      <param name="name">The name of this entity</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PointCloud.GetEntityRendererKey">
      <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PointCloud.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.PointCloud" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PointCloud.FromGeometry(Aspose.ThreeD.Entities.Geometry)">
      <summary>
            Create a new PointCloud instance from a geometry object
            </summary>
      <param name="g">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.PolygonBuilder">
      <summary>
            A helper class to build polygon for <see cref="T:Aspose.ThreeD.Entities.Mesh" /></summary>
      <example>
        <code>
            PolygonBuilder builder = new PolygonBuilder(mesh);
            builder.Begin();
            builder.AddVertex(0);
            builder.AddVertex(1);
            builder.AddVertex(2);
            Builder.End();
            </code>
            Equals to :
            <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
            If all indices are ready to use, <see cref="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32[])" /> is preferred, otherwise <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder" /> would be a better choice.
            </example>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.#ctor(Aspose.ThreeD.Entities.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder" /> class.
            </summary>
      <param name="mesh">On which mesh to build polygon.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.Begin">
      <summary>
            Begins to add a new polygon
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.AddVertex(System.Int32)">
      <summary>
            Adds a vertex index to the polygon
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.End">
      <summary>
            Finishes the polygon creation
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Box">
      <summary>
            Box.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Box.LengthSegments">
      <summary>
            Gets or sets the length segments.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Box.WidthSegments">
      <summary>
            Gets or sets the width segments
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Box.HeightSegments">
      <summary>
            gets or sets the height segments.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Box.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Box" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Box.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Box" /> class.
            </summary>
      <param name="length">Length of the box aligned in z-axis.</param>
      <param name="width">Width of the box aligned in x-axis.</param>
      <param name="height">Height of the box aligned in y-axis.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Box.#ctor(System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Box" /> class.
            </summary>
      <param name="name">Name of the box.</param>
      <param name="length">Length of the box aligned in z-axis.</param>
      <param name="width">Width of the box aligned in x-axis.</param>
      <param name="height">Height of the box aligned in y-axis.</param>
      <param name="lengthSegments">Length segments.</param>
      <param name="widthSegments">Width segments.</param>
      <param name="heightSegments">Height segments.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Box.Length">
      <summary>
            Gets or sets the length of the box aligned in z-axis.
            </summary>
      <value>The length aligned in z-axis.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Box.Width">
      <summary>
            Gets or sets the width of the box aligned in x-axis.
            </summary>
      <value>The width aligned in x-axis.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Box.Height">
      <summary>
            Gets or sets the height of the box aligned in y-axis.
            </summary>
      <value>The height aligned in y-axis.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Box.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Box" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Box.Equals(System.Object)">
      <summary>
            Check if two boxes equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Box.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Cylinder">
      <summary>
            Parameterized Cylinder.
            It can also be used to represent the cone when one of radiusTop/radiusBottom is zero.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.OffsetBottom">
      <summary>
            Gets or sets the vertices transformation offset of the bottom side.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.OffsetTop">
      <summary>
            Gets or sets the vertices transformation offset of the top side.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.GenerateFanCylinder">
      <summary>
            Gets or sets whether to generate the fan-style cylinder when the ThetaLength is less than 2*PI, otherwise the model will not be cut.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.ShearBottom">
      <summary>
            Gets or sets of the shear transform of the bottom side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.ShearTop">
      <summary>
            Gets or sets of the shear transform of the top side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder" /> class.
            </summary>
      <param name="radius">Radius of the top and bottom cap.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder" /> class.
            </summary>
      <param name="radiusTop">Radius top.</param>
      <param name="radiusBottom">Radius bottom.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder" /> class.
            </summary>
      <param name="radiusTop">Radius of cylinder's top cap.</param>
      <param name="radiusBottom">Radius of cylinder's bottom cap.</param>
      <param name="height">Height of the cylinder.</param>
      <param name="radialSegments">Radial segments of both top and bottom circles..</param>
      <param name="heightSegments">Height segments.</param>
      <param name="openEnded">If set to <c>true</c> the cylinder would have no bottom/top caps..</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder" /> class.
            </summary>
      <param name="name"> The name of this object</param>
      <param name="radiusTop">Radius of cylinder's top cap.</param>
      <param name="radiusBottom">Radius of cylinder's bottom cap.</param>
      <param name="height">Height of the cylinder.</param>
      <param name="radialSegments">Radial segments of both top and bottom circles..</param>
      <param name="heightSegments">Height segments.</param>
      <param name="openEnded">If set to <c>true</c> the cylinder would have no bottom/top caps..</param>
      <param name="thetaStart">Theta start.</param>
      <param name="thetaLength">Theta length.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.RadiusTop">
      <summary>
            Gets or sets the radius of cylinder's top cap.
            </summary>
      <value>The radius of the top cap.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.RadiusBottom">
      <summary>
            Gets or sets the radius bottoof cylinder's bottom cap.
            </summary>
      <value>The radius of the bottom cap.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.Height">
      <summary>
            Gets or sets the height of the cylinder.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.RadialSegments">
      <summary>
            Gets or sets the radial segments.
            </summary>
      <value>The radial segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.HeightSegments">
      <summary>
            Gets or sets the height segments.
            </summary>
      <value>The height segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.OpenEnded">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Entities.Cylinder" /> open ended.
            The default value is false.
            </summary>
      <value>
        <c>true</c> if open ended; otherwise, top/bottom caps exists.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.ThetaStart">
      <summary>
            Gets or sets the theta start.
            The default value is 0.
            </summary>
      <value>The theta start.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Cylinder.ThetaLength">
      <summary>
            Gets or sets the length of the theta.
            The default value is 2π.
            </summary>
      <value>The length of the theta.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Cylinder" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.Equals(System.Object)">
      <summary>
            Check if two cylinders equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Cylinder.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Dish">
      <summary>
            Parameterized dish.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Dish.Height">
      <summary>
            Height of the dish
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Dish.Radius">
      <summary>
            Radius of the dish
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Dish.WidthSegments">
      <summary>
            Gets or sets the width segments
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Dish.HeightSegments">
      <summary>
            Gets or sets the height segments
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Dish.#ctor">
      <summary>
            Create a new dish instance with default radius(10) and default height(5)
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Dish.#ctor(System.Double,System.Double)">
      <summary>
            Create a new dish instance with specified radius and height
            </summary>
      <param name="radius">The radius of the dish</param>
      <param name="height">The height of the dish</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Dish.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Create a new dish instance with specified radius and height
            </summary>
      <param name="name">The name of the dish</param>
      <param name="radius">The radius of the dish</param>
      <param name="height">The height of the dish</param>
      <param name="widthSegments">The width segment of the dish</param>
      <param name="heightSegments">The height segment of the dish</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Dish.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Dish" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Dish.Equals(System.Object)">
      <summary>
            Check if two dishes equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Dish.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Plane">
      <summary>
            Parameterized plane.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Plane.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Plane" /> with default size 1x1.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Plane.Up">
      <summary>
            Gets or sets the up vector of the plane, default value is (0, 1, 0), this affects the generation of the plane
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Plane.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Plane" />.
            </summary>
      <param name="length">Length of the plane.</param>
      <param name="width">Width of the plane.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Plane.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Plane" />.
            </summary>
      <param name="name">Name.</param>
      <param name="length">Length of the plane.</param>
      <param name="width">Width of the plane.</param>
      <param name="lengthSegments">Length segments.</param>
      <param name="widthSegments">Width segments.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Plane.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Plane" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Plane.Equals(System.Object)">
      <summary>
            Check if two planes equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Plane.Length">
      <summary>
            Gets or sets the length of the plane.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Plane.Width">
      <summary>
            Gets or sets the width of the plane.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Plane.LengthSegments">
      <summary>
            Gets or sets the length segments.
            </summary>
      <value>The length segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Plane.WidthSegments">
      <summary>
            Gets or sets the width segments.
            </summary>
      <value>The width segments.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Plane.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Primitive">
      <summary>
            Base class for all primitives
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Primitive.CastShadows">
      <summary>
            Gets or sets wheather this geometry can cast shadow
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Primitive.ReceiveShadows">
      <summary>
            Gets or sets wheather this geometry can receive shadow.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Primitive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Primitive" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Primitive.Merge(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Utilities.Vector4[]@,Aspose.ThreeD.Utilities.Vector4[]@,Aspose.ThreeD.Utilities.Vector2[]@)">
      <summary>
            Merge the specified mesh, positions, normals and uvs.
            </summary>
      <param name="mesh">Mesh.</param>
      <param name="positions">Positions.</param>
      <param name="normals">Normals.</param>
      <param name="uvs">Uvs.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Primitive.Setup(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Utilities.Vector4[],Aspose.ThreeD.Utilities.Vector4[],Aspose.ThreeD.Utilities.Vector4[])">
      <summary>
            Build the mesh from given positions/normals/uvs.
            </summary>
      <param name="mesh">Mesh.</param>
      <param name="positions">Positions.</param>
      <param name="normals">Normals.</param>
      <param name="uvs">Uvs.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Primitive.CreateEmptyMesh">
      <summary>
            Create an empty mesh object with inherited properties.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Primitive.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Pyramid">
      <summary>
            Parameterized pyramid.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Pyramid.BottomArea">
      <summary>
            Area of the bottom cap
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Pyramid.TopArea">
      <summary>
            Area of the top cap
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Pyramid.BottomOffset">
      <summary>
            Offset for bottom vertices
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Pyramid.Height">
      <summary>
            Height of the pyramid
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor">
      <summary>
            Construct a new pyramid instance with default bottom area(10, 10) and default height(5)
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Construct a new pyramid instance with specified bottom area
            </summary>
      <param name="xbottom">The x-direction length of the bottom</param>
      <param name="ybottom">The y-direction length of the bottom</param>
      <param name="height">The height of the pyramid</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Construct a new pyramid instance with specified bottom area and top area and height.
            </summary>
      <param name="xbottom">The x-direction length of the bottom area</param>
      <param name="ybottom">The y-direction length of the bottom area</param>
      <param name="xtop">The x-direction length of the top area</param>
      <param name="ytop">The y-direction length of the top area</param>
      <param name="height">The height of the pyramid</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Construct a new pyramid instance with specified bottom area and top area and height.
            </summary>
      <param name="name">The name of the pyramid</param>
      <param name="xbottom">The x-direction length of the bottom area</param>
      <param name="ybottom">The y-direction length of the bottom area</param>
      <param name="xtop">The x-direction length of the top area</param>
      <param name="ytop">The y-direction length of the top area</param>
      <param name="height">The height of the pyramid</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Pyramid" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.Equals(System.Object)">
      <summary>
            Check if two pyramids equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Pyramid.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.RectangularTorus">
      <summary>
            Parameterized rectangular torus.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.RectangularTorus.InnerRadius">
      <summary>
            The inner radius of the rectangular torus
            Default value is 17
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.RectangularTorus.OuterRadius">
      <summary>
            The outer radius of the rectangular torus
            Default value is 20
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.RectangularTorus.Height">
      <summary>
            The height of the rectangular torus.
            Default value is 20
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.RectangularTorus.Arc">
      <summary>
            The total angle of the arc, measured in radian.
            Default value is PI
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.RectangularTorus.AngleStart">
      <summary>
            The start angle of the arc, measured in radian.
            Default value is 0
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.RectangularTorus.RadialSegments">
      <summary>
            The radial segments, default value is 10
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.RectangularTorus.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.RectangularTorus" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.RectangularTorus.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.RectangularTorus" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.RectangularTorus.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.RectangularTorus" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.RectangularTorus.Equals(System.Object)">
      <summary>
            Check if two rectangular torus equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.RectangularTorus.ToMesh">
      <summary>
            Convert this primitive to <see cref="T:Aspose.ThreeD.Entities.Mesh" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Sphere">
      <summary>
            Parameterized sphere.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere" /> with default radius 1.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere" /> class with specified radius.
            </summary>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor(System.Double,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere" /> class with specified radius, width segments and height segments.
            </summary>
      <param name="radius">Radius of the sphere.</param>
      <param name="widthSegments">Width segments.</param>
      <param name="heightSegments">Height segments.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor(System.String,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere" /> class.
            </summary>
      <param name="name">Name.</param>
      <param name="radius">Radius of the sphere.</param>
      <param name="widthSegments">Width segments.</param>
      <param name="heightSegments">Height segments.</param>
      <param name="phiStart">Phi start.</param>
      <param name="phiLength">Phi length.</param>
      <param name="thetaStart">Theta start.</param>
      <param name="thetaLength">Theta length.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Sphere" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.Equals(System.Object)">
      <summary>
            Check if two spheres equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.WidthSegments">
      <summary>
            Gets or sets the width segments.
            </summary>
      <value>The width segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.HeightSegments">
      <summary>
            Gets or sets the height segments.
            </summary>
      <value>The height segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.PhiStart">
      <summary>
            Gets or sets the phi start.
            </summary>
      <value>The phi start.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.PhiLength">
      <summary>
            Gets or sets the length of the phi.
            </summary>
      <value>The length of the phi.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.ThetaStart">
      <summary>
            Gets or sets the theta start.
            </summary>
      <value>The theta start.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.ThetaLength">
      <summary>
            Gets or sets the length of the theta.
            </summary>
      <value>The length of the theta.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Sphere.Radius">
      <summary>
            Gets or sets the radius of the sphere.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Sphere.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Torus">
      <summary>
            Parameterized torus.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus" /> class.
            </summary>
      <param name="radius">The radius of the torus.</param>
      <param name="tube">The radius of the torus' tube.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus" /> class.
            </summary>
      <param name="radius">The radius of the torus.</param>
      <param name="tube">The radius of the torus' tube.</param>
      <param name="arc">Arc.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus" /> class.
            </summary>
      <param name="name">Name.</param>
      <param name="radius">The radius of the torus.</param>
      <param name="tube">The radius of the torus' tube.</param>
      <param name="radialSegments">Radial segments.</param>
      <param name="tubularSegments">Tubular segments.</param>
      <param name="arc">Arc.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.GetHashCode">
      <summary>
            Gets the hash code of current primitive instance
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Torus" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.Equals(System.Object)">
      <summary>
            Check if two toruses equal
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all properties are identically equal.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Torus.Radius">
      <summary>
            Gets or sets the radius of the torus.
            </summary>
      <value>The radius.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Torus.Tube">
      <summary>
            Gets or sets the radius of the tube.
            </summary>
      <value>The tube.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Torus.RadialSegments">
      <summary>
            Gets or sets the radial segments.
            </summary>
      <value>The radial segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Torus.TubularSegments">
      <summary>
            Gets or sets the tubular segments.
            </summary>
      <value>The tubular segments.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Torus.Arc">
      <summary>
            Gets or sets the arc.
            </summary>
      <value>The arc.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Torus.ToMesh">
      <summary>
            Convert current object to mesh
            </summary>
      <returns>The mesh.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Shape">
      <summary>
            The shape describes the deformation on a set of control points, which is similar to the cluster deformer in Maya.
            For example, we can add a shape to a created geometry. 
            And the shape and the geometry have the same topological information but different position of the control points. 
            With varying amounts of influence, the geometry performs a deformation effect. 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Shape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Shape" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Shape.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Shape" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Shape.FromControlPoints(Aspose.ThreeD.Utilities.Vector3[])">
      <summary>
            Create a shape with specified control points with a default indices.
            </summary>
      <param name="controlPoints">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Shape.Indices">
      <summary>
            Gets the indices.
            </summary>
      <value>The indices.</value>
    </member>
    <member name="T:Aspose.ThreeD.Entities.SkeletonType">
      <summary>
        <see cref="T:Aspose.ThreeD.Entities.Skeleton" />'s types.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.SkeletonType.Skeleton">
      <summary>
            The <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> is a skeleton entity, which means the associated node is the root node of the whole skeletal hierarchy.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.SkeletonType.Bone">
      <summary>
            The <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> is a bone entity.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.Skeleton">
      <summary>
            The <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> is mainly used by CAD software to help designer to manipulate the transformation of skeletal structure, it's usually useless outside the CAD softwares.
            To make the skeleton hierarchy acts like one object in CAD software, it's necessary to mark the top <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> node as the root one by setting <see cref="P:Aspose.ThreeD.Entities.Skeleton.Type" /> to <see cref="F:Aspose.ThreeD.Entities.SkeletonType.Skeleton" />,
            and all children set to <see cref="F:Aspose.ThreeD.Entities.SkeletonType.Bone" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Skeleton.Size">
      <summary>
            Gets or sets the limb node size that used in CAD software to represent the size of the bone.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.Skeleton.Type">
      <summary>
            Gets or sets the type of the skeleton.
            </summary>
      <value>The type of the skeleton.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Skeleton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.Skeleton.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Skeleton" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="T:Aspose.ThreeD.Entities.TriMesh">
      <summary>
            A TriMesh contains raw data that can be used by GPU directly.
            This class is a utility to help to construct a mesh that only contains per-vertex data. 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.#ctor(System.String)">
      <summary>
            Initialize a <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.#ctor(System.String,Aspose.ThreeD.Utilities.VertexDeclaration)">
      <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
      <param name="name">The name of this TriMesh</param>
      <param name="declaration">The vertex's declaration</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TriMesh.VertexDeclaration">
      <summary>
            The vertex layout of the <see cref="T:Aspose.ThreeD.Entities.TriMesh" />.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TriMesh.VerticesCount">
      <summary>
            The count of vertices in this <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TriMesh.IndicesCount">
      <summary>
            The count of indices in this <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TriMesh.UnmergedVerticesCount">
      <summary>
            The count of unmerged vertices that passed in by <see cref="M:Aspose.ThreeD.Entities.TriMesh.BeginVertex" /> and <see cref="M:Aspose.ThreeD.Entities.TriMesh.EndVertex" />.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TriMesh.Capacity">
      <summary>
            The capacity of preallocated vertices.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.TriMesh.VerticesSizeInBytes">
      <summary>
            The total size of all vertices in bytes
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.FromMesh(Aspose.ThreeD.Utilities.VertexDeclaration,Aspose.ThreeD.Entities.Mesh)">
      <summary>
            Create a TriMesh from given mesh object with given vertex layout.
            </summary>
      <param name="declaration">
      </param>
      <param name="mesh">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.CopyFrom(Aspose.ThreeD.Entities.TriMesh,Aspose.ThreeD.Utilities.VertexDeclaration)">
      <summary>
            Copy the <see cref="T:Aspose.ThreeD.Entities.TriMesh" /> from input with new vertex layout
            </summary>
      <param name="input">The input TriMesh for copying</param>
      <param name="vd">The new vertex delcaration of the output TriMesh</param>
      <returns>A new TriMesh instance with new vertex declaration.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.FromMesh(Aspose.ThreeD.Entities.Mesh,System.Boolean)">
      <summary>
            Create a TriMesh from given mesh object, the vertex declaration are based on the input mesh's structure.
            </summary>
      <param name="mesh">
      </param>
      <param name="useFloat">Use float type instead of double type for each vertex element component.</param>
      <returns>The <see cref="T:Aspose.ThreeD.Entities.TriMesh" /> generated from given <see cref="T:Aspose.ThreeD.Entities.Mesh" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.BeginVertex">
      <summary>
            Begin adding vertex
            </summary>
      <returns>The reference of internal vertex object in type <see cref="T:Aspose.ThreeD.Utilities.Vertex" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.EndVertex">
      <summary>
            End adding vertex
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.WriteVerticesTo(System.IO.Stream)">
      <summary>
            Write vertices data to the specified stream
            </summary>
      <param name="stream">The stream that the vertices data will be written to</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.Write16bIndicesTo(System.IO.Stream)">
      <summary>
            Write the indices data as 16bit integer to the stream
            </summary>
      <param name="stream">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.Write32bIndicesTo(System.IO.Stream)">
      <summary>
            Write the indices data as 32bit integer to the stream
            </summary>
      <param name="stream">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.VerticesToArray">
      <summary>
            Convert the vertices data to byte array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.IndicesToArray(System.UInt16[]@)">
      <summary>
            Convert the indices to 16bit integer array
            </summary>
      <param name="result">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.IndicesToArray(System.Int32[]@)">
      <summary>
            Convert the indices to 32bit integer array
            </summary>
      <param name="result">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.ToString">
      <summary>
            Gets the string representation of <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.FromRawData(Aspose.ThreeD.Utilities.VertexDeclaration,System.Byte[],System.Int32[],System.Boolean)">
      <summary>
            Create TriMesh from raw data
            </summary>
      <param name="vd">Vertex declaration, must contains at least one field.</param>
      <param name="vertices">The input vertex data, the minimum length of the vertices must be greater or equal to vertex declaration's size</param>
      <param name="indices">The triangle indices</param>
      <param name="generateVertexMapping">Generate <see cref="T:Aspose.ThreeD.Utilities.Vertex" /> for each vertex, which is not necessary for just serialization/deserialization.</param>
      <returns>The <see cref="T:Aspose.ThreeD.Entities.TriMesh" /> instance that encapsulated the input byte array.</returns>
      <remarks>The returned TriMesh will not copy the input byte array for performance, external changes on the array will be reflected to this instance.</remarks>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh.GetEnumerator">
      <summary>
            Get the enumerator to enumerate <see cref="T:Aspose.ThreeD.Utilities.Vertex" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.TriMesh`1">
      <summary>
            Generic version of <see cref="T:Aspose.ThreeD.Entities.TriMesh" /> for user's static-defined vertex type
            </summary>
      <typeparam name="T">
      </typeparam><![CDATA[Moved to this source file to make msbuild happy.]]></member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh`1.#ctor(System.String)">
      <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh`1.FromMesh(Aspose.ThreeD.Entities.Mesh)">
      <summary>
            Create a TriMesh from given mesh object with automaticly generated vertex layout.
            </summary>
      <param name="mesh">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Entities.TriMesh`1.VerticesToTypedArray">
      <summary>
            Convert the vertices data to typed array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementType">
      <summary>
             The type of the vertex element, defined how it will be used in modeling.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Binormal">
      <summary>
            Binormal vector, see <see cref="T:Aspose.ThreeD.Entities.VertexElementBinormal" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Normal">
      <summary>
            Normal vector, see <see cref="T:Aspose.ThreeD.Entities.VertexElementNormal" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Tangent">
      <summary>
            Tangent vector, see <see cref="T:Aspose.ThreeD.Entities.VertexElementTangent" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Material">
      <summary>
            Material index, see <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.PolygonGroup">
      <summary>
            Polygon group index, see <see cref="T:Aspose.ThreeD.Entities.VertexElementPolygonGroup" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.UV">
      <summary>
            Texture UV coordinate, see <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.VertexColor">
      <summary>
            Vertex color, see <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexColor" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.SmoothingGroup">
      <summary>
            Smoothing group, See <see cref="T:Aspose.ThreeD.Entities.VertexElementSmoothingGroup" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.VertexCrease">
      <summary>
            Vertex crease, See <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexCrease" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.EdgeCrease">
      <summary>
            Edge crease, <see cref="T:Aspose.ThreeD.Entities.VertexElementEdgeCrease" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.UserData">
      <summary>
            User data, usually for application-specific purpose, See <see cref="T:Aspose.ThreeD.Entities.VertexElementUserData" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Visibility">
      <summary>
            Visibility for components, see <see cref="T:Aspose.ThreeD.Entities.VertexElementVisibility" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Specular">
      <summary>
            Specular colors, see <see cref="T:Aspose.ThreeD.Entities.VertexElementSpecular" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.VertexElementType.Weight">
      <summary>
            Blend weights, see <see cref="T:Aspose.ThreeD.Entities.VertexElementWeight" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.TextureMapping">
      <summary>
            The texture mapping type for <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" />
            Describes which kind of texture mapping is used.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Ambient">
      <summary>
            Ambient maps 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Emissive">
      <summary>
            Emissive maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse">
      <summary>
            Diffuse maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Opacity">
      <summary>
            Opacity maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Bump">
      <summary>
            Bump maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Normal">
      <summary>
            Normal maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Specular">
      <summary>
            Specular maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Glow">
      <summary>
            Glow maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Reflection">
      <summary>
            Reflection maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Shadow">
      <summary>
            Shadow maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Shininess">
      <summary>
            Shininess maps
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.TextureMapping.Displacement">
      <summary>
            Displacement maps
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.MappingMode">
      <summary>
             Determines how the element is mapped to a surface. 
            The <see cref="T:Aspose.ThreeD.Entities.MappingMode" /> defined how <see cref="T:Aspose.ThreeD.Entities.VertexElement" /> is mapped to the surface of geometry.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.MappingMode.ControlPoint">
      <summary>
            Each data is mapped to the control point of the geometry.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.MappingMode.PolygonVertex">
      <summary>
            The data is mapped to the polygon's vertex
            When a control point is shared by multiple polygons, and the data is mapped as <see cref="F:Aspose.ThreeD.Entities.MappingMode.PolygonVertex" />, the control point as different polygon vertex will have their own data
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.MappingMode.Polygon">
      <summary>
            The data is mapped to the polygon.
            Each polygon vertex shares the same data when mapping mode is <see cref="F:Aspose.ThreeD.Entities.MappingMode.Polygon" />.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.MappingMode.Edge">
      <summary>
            The data is mapped to the edge.
            Each edge end point shares the same data when mapping is <see cref="F:Aspose.ThreeD.Entities.MappingMode.Edge" />.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.MappingMode.AllSame">
      <summary>
            One data mapped to the whole surface.
            What ever data is interpreted as control point/polygon vertex/edge endpoints, the data is always the same as it defined by <see cref="F:Aspose.ThreeD.Entities.MappingMode.AllSame" />.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.ReferenceMode">
      <summary>
        <see cref="T:Aspose.ThreeD.Entities.ReferenceMode" /> defines how mapping information is stored and referenced by.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ReferenceMode.Direct">
      <summary>
            Data is directly referenced
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ReferenceMode.Index">
      <summary>
            Data is referenced by index
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Entities.ReferenceMode.IndexToDirect">
      <summary>
            Data is referenced by index, then accessed by index in <see cref="T:Aspose.ThreeD.Entities.VertexElement" />'s data list.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElement">
      <summary>
             Base class of vertex elements.
             A vertex element type is identified by VertexElementType. 
             A VertexElement describes how the vertex element is mapped to a geometry surface and how the mapping information is arranged in memory. 
             A VertexElement contains Normals, UVs or other kind of information. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElement.VertexElementType">
      <summary>
            Gets the type of the <see cref="T:Aspose.ThreeD.Entities.VertexElement" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElement.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElement.MappingMode">
      <summary>
            Gets or sets how the element is mapped.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElement.ReferenceMode">
      <summary>
            Gets or sets how the element is referenced.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElement.Clear">
      <summary>
             Clears all the data from this vertex element. 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElement.ToString">
      <summary>
            String representation of vertex element.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Entities.IIndicedVertexElement">
      <summary>
            VertexElement with indice data.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.IIndicedVertexElement.Indices">
      <summary>
            Gets the indice data
            </summary>
      <value>The index array.</value>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementVector4">
      <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement" /> implementations.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.CopyTo(Aspose.ThreeD.Entities.VertexElementVector4)">
      <summary>
            Copys data to specified element
            </summary>
      <param name="target">Target.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementVector4.Data">
      <summary>
            Gets the vertex data
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementVector4.Indices">
      <summary>
            Gets the indice data
            </summary>
      <value>The index array.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.SetData(Aspose.ThreeD.Utilities.Vector4[])">
      <summary>
            Load data
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.SetIndices(System.Int32[])">
      <summary>
            Load indices
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.Clear">
      <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementTemplate`1">
      <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement" /> implementations.
            </summary>
      <typeparam name="T">Element type.</typeparam>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.CopyTo(Aspose.ThreeD.Entities.VertexElementTemplate{`0})">
      <summary>
            Copys data to specified element
            </summary>
      <param name="target">Target.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementTemplate`1.Data">
      <summary>
            Gets the vertex data
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementTemplate`1.Indices">
      <summary>
            Gets the indice data
            </summary>
      <value>The index array.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.SetData(`0[])">
      <summary>
            Load data
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.SetIndices(System.Int32[])">
      <summary>
            Load indices
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.Clear">
      <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementIntsTemplate">
      <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement" /> implementations.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.CopyTo(Aspose.ThreeD.Entities.VertexElementIntsTemplate)">
      <summary>
            Copys data to specified element
            </summary>
      <param name="target">Target.</param>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementIntsTemplate.Data">
      <summary>
            Gets the vertex data
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementIntsTemplate.Indices">
      <summary>
            Gets the indice data
            </summary>
      <value>The index array.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.SetData(System.Int32[])">
      <summary>
            Load data
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.SetIndices(System.Int32[])">
      <summary>
            Load indices
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.Clear">
      <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementVisibility">
      <summary>
            Defines if specified components is visible
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVisibility.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementVisibility" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementEdgeCrease">
      <summary>
            Defines the edge crease for specified components
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementEdgeCrease.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementEdgeCrease" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementVertexCrease">
      <summary>
            Defines the vertex crease for specified components
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVertexCrease.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexCrease" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementVertexColor">
      <summary>
            Defines the vertex color for specified components
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementVertexColor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexColor" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementUV">
      <summary>
            Defines the UV coordinates for specified components.
            A geometry can have multiple <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> elements, and each one have different <see cref="T:Aspose.ThreeD.Entities.TextureMapping" />s.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementUV.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> class.
            The default texture mapping type is <see cref="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementUV.#ctor(Aspose.ThreeD.Entities.TextureMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementUV" /> class.
            </summary>
      <param name="textureMapping">The texture mapping type.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementUV.AddData(System.Collections.Generic.IEnumerable{Aspose.ThreeD.Utilities.Vector2})">
      <summary>
            Add a set of <see cref="T:Aspose.ThreeD.Utilities.Vector2" /> to VertexElementUV.Data.
            This is a short-cut, this method will convert the <see cref="T:Aspose.ThreeD.Utilities.Vector2" /> to <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> with z to 0 and w to 0.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementUV.AddData(System.Collections.Generic.IEnumerable{Aspose.ThreeD.Utilities.Vector3})">
      <summary>
            Add a set of <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> to VertexElementUV.Data.
            This is a short-cut, this method will convert the <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> to <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> with w to 0.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementBinormal">
      <summary>
            Defines the binormal vectors for specified components.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementBinormal.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementBinormal" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementNormal">
      <summary>
            Defines normal vectors for specified components.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementNormal.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementNormal" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementTangent">
      <summary>
            Defines tangent vectors for specified components.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementTangent.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementTangent" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementPolygonGroup">
      <summary>
            Defines polygon group for specified components to group related polygons together.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementPolygonGroup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementPolygonGroup" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementSmoothingGroup">
      <summary>
            A smoothing group is a group of polygons in a polygon mesh which should appear to form a smooth surface.
            Some early 3d modeling software like 3D studio max for DOS used smoothing group to void storing normal vector for each mesh vertex.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementSmoothingGroup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementSmoothingGroup" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementMaterial">
      <summary>
            Defines material index for specified components.
            
            A node can have multiple materials, the <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" /> is used to render different part of the geometry in different materials.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementMaterial.Indices">
      <summary>
            Gets the indice data
            </summary>
      <value>The index array.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.SetIndices(System.Int32[])">
      <summary>
            Load indices
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.Clear">
      <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementUserData">
      <summary>
            Defines custom user data for specified components.
            Usually it's application-specific data for special purpose.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entities.VertexElementUserData.Data">
      <summary>
            The user data attached in this element
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementUserData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementUserData" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementUserData.Clear">
      <summary>
             Clears all the data from this vertex element. 
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementSpecular">
      <summary>
            Defines specular color for specified components.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementSpecular.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementSpecular" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Entities.VertexElementWeight">
      <summary>
            Defines blend weight for specified components.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entities.VertexElementWeight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementWeight" /> class.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.AMFSaveOptions">
      <summary>
            Save options for AMF
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.AMFSaveOptions.#ctor">
      <summary>
             Constructor of <see cref="T:Aspose.ThreeD.Formats.AMFSaveOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.AMFSaveOptions.EnableCompression">
      <summary>
            Whether to use compression to reduce the final file size, default value is true
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.RvmFormat">
      <summary>
            The RVM Format
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.RvmFormat.LoadAttributes(Aspose.ThreeD.Scene,System.String,System.String)">
      <summary>
            Load the attributes from specified file name
            </summary>
      <param name="scene">The scene where the attributes will be applied to</param>
      <param name="fileName">The file's name that contains the attributes</param>
      <param name="prefix">The prefix of the attributes that used to avoid conflict of names, default value is "rvm:"</param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.RvmFormat.LoadAttributes(Aspose.ThreeD.Scene,System.IO.Stream,System.String)">
      <summary>
            Load the attributes from specified stream
            </summary>
      <param name="scene">The scene where the attributes will be applied to</param>
      <param name="stream">The stream that contains the attributes</param>
      <param name="prefix">The prefix of the attributes that used to avoid conflict of names, default value is "rvm:"</param>
    </member>
    <member name="T:Aspose.ThreeD.Formats.RvmLoadOptions">
      <summary>
            Load options for AVEVA Plant Design Management System's RVM file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.GenerateMaterials">
      <summary>
            Generate materials with random colors for each objects in the scene if color table is not exported within the RVM file.
            Default value is true
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.CylinderRadialSegments">
      <summary>
            Gets or sets the number of cylinder's radial segments, default value is 16
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.DishLongitudeSegments">
      <summary>
            Gets or sets the number of dish's longitude segments, default value is 12
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.DishLatitudeSegments">
      <summary>
            Gets or sets the number of dish's latitude segments, default value is 8 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.TorusTubularSegments">
      <summary>
            Gets or sets the number of torus's tubular segments, default value is 20 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.RectangularTorusSegments">
      <summary>
            Gets or sets the number of rectangular torus's radial segments, default value is 20 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.CenterScene">
      <summary>
            Center the scene after it's loaded.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.AttributePrefix">
      <summary>
            Gets or sets the prefix of the attributes that were defined in external attribute files,
            The prefix are used to avoid name conflicts, default value is "rvm:"
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.LookupAttributes">
      <summary>
            Gets or sets whether to load attributes from external attribute list file(.att/.attrib/.txt), default value is true.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.RvmLoadOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Formats.RvmLoadOptions" /> instance
            </summary>
      <param name="contentType">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.RvmLoadOptions.#ctor">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Formats.RvmLoadOptions" /> instance
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.RvmSaveOptions">
      <summary>
            Save options for Aveva PDMS RVM file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.FileNote">
      <summary>
            File note in the file header.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.Author">
      <summary>
            Author information, default value is '3d@aspose'
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.CreationTime">
      <summary>
            The timestamp that exported this file, default value is current time
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.AttributePrefix">
      <summary>
            Gets or sets the prefix of which attributes that will be exported, the exported property will contains no prefix, custom properties with different prefix will not be exported, default value is 'rvm:'.
            For example if a property is rvm:Refno=345, the exported attribute will be Refno = 345, the prefix is stripped.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.AttributeListFile">
      <summary>
            Gets or sets the file name of attribute list file, exporter will generate a name based on the .rvm file name when this property is undefined, default value is null.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.ExportAttributes">
      <summary>
            Gets or sets whether to export the attribute list to an external .att file, default value is false.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.RvmSaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.RvmSaveOptions" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.RvmSaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.RvmSaveOptions" /></summary>
      <param name="contentType">Text or binary RVM file?</param>
    </member>
    <member name="T:Aspose.ThreeD.Formats.ColladaTransformStyle">
      <summary>
            The node's transform style of node
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.ColladaTransformStyle.Components">
      <summary>
            Export the node's transform as rotate/scale/translate
             </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.ColladaTransformStyle.Matrix">
      <summary>
            Export the node's transfrom as matrix
             </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.ColladaSaveOptions">
      <summary>
            Save options for collada
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ColladaSaveOptions.Indented">
      <summary>
            Gets or sets whether the exported XML document is indented.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ColladaSaveOptions.TransformStyle">
      <summary>
            Gets or sets the style of node transformation
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.ColladaSaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.ColladaSaveOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.DracoFormat">
      <summary>
            Google Draco format
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.DracoFormat.Decode(System.String)">
      <summary>
            Decode the point cloud or mesh from specified file name
            </summary>
      <param name="fileName">The file name contains the drc file</param>
      <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh" /> or <see cref="T:Aspose.ThreeD.Entities.PointCloud" /> instance depends on the file content</returns>
    </member>
    <member name="M:Aspose.ThreeD.Formats.DracoFormat.Decode(System.Byte[])">
      <summary>
            Decode the point cloud or mesh from memory data
            </summary>
      <param name="data">The raw drc bytes</param>
      <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh" /> or <see cref="T:Aspose.ThreeD.Entities.PointCloud" /> instance depends on the content</returns>
    </member>
    <member name="M:Aspose.ThreeD.Formats.DracoFormat.Encode(Aspose.ThreeD.Entity,System.IO.Stream,Aspose.ThreeD.Formats.DracoSaveOptions)">
      <summary>
            Encode the entity to specified stream
            </summary>
      <param name="entity">The entity to be encoded</param>
      <param name="stream">The stream that encoded data will be written to</param>
      <param name="options">Extra options for encoding the point cloud</param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.DracoFormat.Encode(Aspose.ThreeD.Entity,System.String,Aspose.ThreeD.Formats.DracoSaveOptions)">
      <summary>
            Encode the entity to specified file
            </summary>
      <param name="entity">The entity to be encoded</param>
      <param name="fileName">The file name to be written</param>
      <param name="options">Extra options for encoding the point cloud</param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.DracoFormat.Encode(Aspose.ThreeD.Entity,Aspose.ThreeD.Formats.DracoSaveOptions)">
      <summary>
            Encode the entity to Draco raw data
            </summary>
      <param name="entity">The entity to be encoded</param>
      <param name="options">Extra options for encoding the point cloud</param>
      <returns>The encoded draco data represented in bytes</returns>
    </member>
    <member name="T:Aspose.ThreeD.Formats.DracoCompressionLevel">
      <summary>
            Compression level for draco file
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.NoCompression">
      <summary>
            No compression, this will result in the minimum encoding time.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Fast">
      <summary>
            Encoder will perform a compression as quickly as possible.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Standard">
      <summary>
            Standard mode, with good compression and speed.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Optimal">
      <summary>
            Encoder will compress the scene optimally, which may takes longer time to finish.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.DracoSaveOptions">
      <summary>
            Save options for Google draco files
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.PositionBits">
      <summary>
            Quantization bits for position, default value is 14
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.TextureCoordinateBits">
      <summary>
            Quantization bits for texture coordinate, default value is 12
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.ColorBits">
      <summary>
            Quantization bits for vertex color, default value is 10
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.NormalBits">
      <summary>
            Quantization bits for normal vectors, default value is 10
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.CompressionLevel">
      <summary>
            Compression level, default value is <see cref="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Standard" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.PointCloud">
      <summary>
            Export the scene as point cloud, default value is false.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.DracoSaveOptions.#ctor">
      <summary>
            Construct a default configuration for saving draco files.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.FBXLoadOptions">
      <summary>
            Load options for FBX format.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXLoadOptions.KeepBuiltinGlobalSettings">
      <summary>
            Gets or sets whether to keep the builtin properties in GlobalSettings which have a native property replacement in <see cref="T:Aspose.ThreeD.AssetInfo" />.
            Set this to true if you want the full properties in GlobalSettings
            Default value is false
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.FBXLoadOptions.#ctor(Aspose.ThreeD.FileFormat)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.FBXLoadOptions" /></summary>
      <param name="format">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.FBXLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.FBXLoadOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.FBXSaveOptions">
      <summary>
            Save options for FBX file.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.FBXSaveOptions.#ctor(Aspose.ThreeD.FileFormat)">
      <summary>
            Initializes a <see cref="T:Aspose.ThreeD.Formats.FBXSaveOptions" /></summary>
      <param name="format">
      </param>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.ReusePrimitiveMesh">
      <summary>
            Reuse the mesh for the primitives with same parameters, this will significantly reduce the size of FBX output which scene was constructed by large set of primitive shapes(like imported from CAD files).
            Default value is false
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.EnableCompression">
      <summary>
            Compression large binary data in the FBX file(e.g. animation data, control points, vertex element data, indices), default value is true.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.FoldRepeatedCurveData">
      <summary>
            Gets or sets whether reuse repeated curve data by increasing last data's ref count
            </summary>
      <value>true if fold repeated curve data; otherwise, false.</value>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.ExportLegacyMaterialProperties">
      <summary>
            Gets or sets whether export legacy material properties, used for back compatibility.
            This option is turned on by default.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.VideoForTexture">
      <summary>
            Gets or sets whether generate a Video instance for <see cref="T:Aspose.ThreeD.Shading.Texture" /> when exporting as FBX.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.GenerateVertexElementMaterial">
      <summary>
            Gets or sets whether always generate a <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial" /> for geometries if the attached node contains materials.
            This is turned off by default.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.GLTFLoadOptions">
      <summary>
            Load options for glTF format
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFLoadOptions.FlipTexCoordV">
      <summary>
            Flip the v(t) coordinate in mesh's texture coordinate, default value is true.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.GLTFLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.GLTFLoadOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.MaterialConverter">
      <summary>
            Custom converter to convert the geometry's original material to GLTF's PBR material.
            </summary>
      <param name="mat">Old material instance</param>
      <returns>New material instance</returns>
    </member>
    <member name="T:Aspose.ThreeD.Formats.GLTFSaveOptions">
      <summary>
            Save options for glTF format.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.PrettyPrint">
      <summary>
            The JSON content of GLTF file is indented for human reading, default value is false
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.EmbedAssets">
      <summary>
            Embed all external assets as base64 into single file in ASCII mode, default value is false.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.MaterialConverter">
      <summary>
            Custom converter to convert the geometry's material to PBR material
            If this is unassigned, glTF 2.0 exporter will automatically convert the standard material to PBR material.
            Default value is null
            This property is used when exporting a scene to a glTF 2.0 file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.UseCommonMaterials">
      <summary>
            Serialize materials using KHR common material extensions, default value is false.
            Set this to false will cause Aspose.3D export a set of vertex/fragment shader if <see cref="P:Aspose.ThreeD.Formats.GLTFSaveOptions.ExportShaders" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.FlipTexCoordV">
      <summary>
            Flip texture coordinate  v(t) component, default value is true.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.BufferFile">
      <summary>
            The file name of the external buffer file used to store binary data.
            If this file is not specified, Aspose.3D will generate a name for you.
            This is ignored when export glTF in binary mode.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.SaveExtras">
      <summary>
            Save scene object's dynamic properties into 'extra' fields in the generated glTF file.
            This is useful to provide application-specific data.
            Default value is false.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.DracoCompression">
      <summary>
            Gets or sets whether to enable draco compression
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.GLTFSaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.GLTFSaveOptions" /></summary>
      <param name="contentType">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.GLTFSaveOptions.#ctor(Aspose.ThreeD.FileFormat)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.GLTFSaveOptions" /></summary>
      <param name="format">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Formats.HTML5SaveOptions">
      <summary>
            Save options for HTML5
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.ShowGrid">
      <summary>
            Display a grid in the scene.
            Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.ShowRulers">
      <summary>
            Display rulers of x/y/z axises in the scene to measure the model.
            Default value is false.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.ShowUI">
      <summary>
            Display a simple UI in the scene.
            Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.OrientationBox">
      <summary>
            Display a orientation box.
            Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.UpVector">
      <summary>
            Gets or sets the up vector, value can be "x"/"y"/"z", default value is "y"
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.FarPlane">
      <summary>
            Gets or sets the far plane of the camera, default value is 1000.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.NearPlane">
      <summary>
            Gets or sets the near plane of the camera, default value is 1
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.LookAt">
      <summary>
            Gets or sets the default look at position, default value is (0, 0, 0)
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.CameraPosition">
      <summary>
            Gets or sets the initial position of the camera, default value is (10, 10, 10)
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.FieldOfView">
      <summary>
            Gets or sets the field of the view, default value is 45, measured in degree.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.HTML5SaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.HTML5SaveOptions" /> with all default settings.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.IOConfig">
      <summary>
            IO config for serialization/deserialization.
            User can specify detailed configurations like dependency look-up path
            Or format-related configs here
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.IOConfig.FileFormat">
      <summary>
            Gets the file format that specified in current Save/Load option.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.IOConfig.FileSystem">
      <summary>
            Allow user to handle how to manage the external dependencies during load/save.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.IOConfig.LookupPaths">
      <summary>
            Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.IOConfig.FileName">
      <summary>
            The file name of the exporting/importing scene.
            This is optional, but useful when serialize external assets like OBJ's material.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.IOConfig.LookupForFile(System.String,System.String)">
      <summary>
            Look up for file in given lookup paths
            User can override this to provide more customized file lookup mechanisms.
            </summary>
      <returns>The for file.</returns>
      <param name="fileName">File name to look up</param>
      <param name="alternativeFile">If the file cannot be found, return this</param>
    </member>
    <member name="T:Aspose.ThreeD.Formats.SaveOptions">
      <summary>
            The base class to configure options in file saving for different types
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.LoadOptions">
      <summary>
            The base class to configure options in file loading for different types
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.NamespaceDoc">
      <summary>
            IO related customization are defined in this namespace.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.ObjLoadOptions">
      <summary>
            Load options for wavefront obj
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.ObjLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.ObjLoadOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.EnableMaterials">
      <summary>
            Gets or sets whether import materials for each object
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.Scale">
      <summary>
            Scales on x/y/z axis, default value is 1.0
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.NormalizeNormal">
      <summary>
            Gets or sets whether to normalize the normal vector during the loading.
            Default value is true.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.ObjSaveOptions">
      <summary>
            Save options for wavefront obj file
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.ObjSaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.ObjSaveOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.PointCloud">
      <summary>
            Gets or sets the flag whether the exporter should export the scene as point cloud(without topological structure), default value is false
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.Verbose">
      <summary>
            Gets or sets whether generate comments for each section
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.SerializeW">
      <summary>
            Gets or sets whether serialize W component in model's vertex position.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.EnableMaterials">
      <summary>
            Gets or sets whether import/export materials for each object
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PdfFormat">
      <summary>
            Adobe's Portable Document Format
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PdfFormat.Extract(System.String,System.Byte[])">
      <summary>
            Extract raw 3D content from PDF file.
            </summary>
      <param name="fileName">
      </param>
      <param name="password">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PdfFormat.Extract(System.IO.Stream,System.Byte[])">
      <summary>
            Extract raw 3D content from PDF stream.
            </summary>
      <param name="stream">
      </param>
      <param name="password">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PdfFormat.ExtractScene(System.String,System.Byte[])">
      <summary>
            Extract 3D scenes from PDF file.
            </summary>
      <param name="fileName">
      </param>
      <param name="password">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PdfFormat.ExtractScene(System.IO.Stream,System.Byte[])">
      <summary>
            Extract raw 3D content from PDF stream.
            </summary>
      <param name="stream">
      </param>
      <param name="password">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PdfLoadOptions">
      <summary>
            Options for PDF loading
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfLoadOptions.Password">
      <summary>
            The password to unlock the encrypted PDF file.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PdfLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PdfLoadOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PdfRenderMode">
      <summary>
            Render mode specifies the style in which the 3D artwork is rendered. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Solid">
      <summary>
            Displays textured and lit geometric shapes.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.SolidWireframe">
      <summary>
            Displays textured and lit geometric shapes (triangles) with single color edges on top of them.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Transparent">
      <summary>
            Displays textured and lit geometric shapes (triangles) with an added level of transparency.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.TransparentWireframe">
      <summary>
            Displays textured and lit geometric shapes (triangles) with an added level of transparency, with single color opaque edges on top of it.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.BoundingBox">
      <summary>
            Displays the bounding box edges of each node, aligned with the axes of the local coordinate space for that node.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.TransparentBoundingBox">
      <summary>
            Displays bounding boxes faces of each node, aligned with the axes of the local coordinate space for that node, with an added level of transparency.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.TransparentBoundingBoxOutline">
      <summary>
            Displays bounding boxes edges and faces of each node, aligned with the axes of the local coordinate space for that node, with an added level of transparency.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Wireframe">
      <summary>
            Displays only edges in a single color.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.ShadedWireframe">
      <summary>
            Displays only edges, though interpolates their color between their two vertices and applies lighting.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.HiddenWireframe">
      <summary>
            Displays edges in a single color, though removes back-facing and obscured edges.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Vertices">
      <summary>
            Displays only vertices in a single color.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.ShadedVertices">
      <summary>
            Displays only vertices, though uses their vertex color and applies lighting.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Illustration">
      <summary>
            Displays silhouette edges with surfaces, removes obscured lines.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.SolidOutline">
      <summary>
            Displays silhouette edges with lit and textured surfaces, removes obscured lines.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.ShadedIllustration">
      <summary>
            Displays silhouette edges with lit and textured surfaces and an additional emissive term to remove poorly lit areas of the artwork.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PdfLightingScheme">
      <summary>
            LightingScheme specifies the lighting to apply to 3D artwork.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Artwork">
      <summary>
            Uses the lights defined in the scene
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.None">
      <summary>
            No lights are used.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.White">
      <summary>
            Three blue-grey infinite lights, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Day">
      <summary>
            Three light-grey infinite lights, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Night">
      <summary>
            One yellow, one aqua, and one blue infinite light, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Hard">
      <summary>
            Three grey infinite lights, moderate ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Primary">
      <summary>
            One red, one green, and one blue infinite light, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Blue">
      <summary>
            Three blue infinite lights, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Red">
      <summary>
            Three red infinite lights, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Cube">
      <summary>
            Six grey infinite lights aligned with the major axes, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.CAD">
      <summary>
            Three grey infinite lights and one light attached to the camera, no ambient term
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Headlamp">
      <summary>
            Single infinite light attached to the camera, low ambient term
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PdfSaveOptions">
      <summary>
            The save options in PDF exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.RenderMode">
      <summary>
            Render mode specifies the style in which the 3D artwork is rendered. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.LightingScheme">
      <summary>
            LightingScheme specifies the lighting to apply to 3D artwork.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.BackgroundColor">
      <summary>
            Background color of the 3D view in PDF file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.FaceColor">
      <summary>
            Gets or sets the face color to be used  when rendering the 3D content. 
            This is only relevant only when the <see cref="P:Aspose.ThreeD.Formats.PdfSaveOptions.RenderMode" /> has a value of Illustration.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.AuxiliaryColor">
      <summary>
            Gets or sets the auxiliary color to be used  when rendering the 3D content.
            The interpretation of this color depends on the <see cref="P:Aspose.ThreeD.Formats.PdfSaveOptions.RenderMode" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets to flip the coordinate system of the scene during exporting.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PdfSaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PdfSaveOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PlyFormat">
      <summary>
            The PLY format.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlyFormat.Encode(Aspose.ThreeD.Entity,System.IO.Stream,Aspose.ThreeD.Formats.PlySaveOptions)">
      <summary>
            Encode the entity and save the result into the stream.
            </summary>
      <param name="entity">The entity to encode</param>
      <param name="stream">The stream to write to, this method will not close this stream</param>
      <param name="opt">Save options</param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlyFormat.Encode(Aspose.ThreeD.Entity,System.String,Aspose.ThreeD.Formats.PlySaveOptions)">
      <summary>
            Encode the entity and save the result into an external file.
            </summary>
      <param name="entity">The entity to encode</param>
      <param name="fileName">The file to write to</param>
      <param name="opt">Save options</param>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlyFormat.Decode(System.String,Aspose.ThreeD.Formats.PlyLoadOptions)">
      <summary>
            Decode a point cloud or mesh from the specified stream.
            </summary>
      <param name="fileName">The input stream</param>
      <param name="opt">The load option of PLY format</param>
      <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh" /> or <see cref="T:Aspose.ThreeD.Entities.PointCloud" /> instance</returns>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlyFormat.Decode(System.IO.Stream,Aspose.ThreeD.Formats.PlyLoadOptions)">
      <summary>
            Decode a point cloud or mesh from the specified stream.
            </summary>
      <param name="stream">The input stream</param>
      <param name="opt">The load option of PLY format</param>
      <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh" /> or <see cref="T:Aspose.ThreeD.Entities.PointCloud" /> instance</returns>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PlyLoadOptions">
      <summary>
            Load options for PLY files
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlyLoadOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets flip coordinate system of control points/normal during importing/exporting.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlyLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PlyLoadOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.PlySaveOptions">
      <summary>
            Save options for exporting scene as PLY file.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlySaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PlySaveOptions" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.PlySaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PlySaveOptions" /></summary>
      <param name="contentType">
      </param>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.PointCloud">
      <summary>
            Export the scene as point cloud, the default value is false.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.FlipCoordinate">
      <summary>
            Flip the coordinate while saving the scene, default value is true
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.VertexElement">
      <summary>
            The element name for the vertex data, default value is "vertex"
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.PositionComponents">
      <summary>
            The component names for position data, default value is ("x", "y", "z")
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.NormalComponents">
      <summary>
            The component names for normal data, default valaue is ("nx", "ny", "nz")
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.TextureCoordinateComponents">
      <summary>
            The component names for texture coordinate data, default value is ("u", "v")
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.ColorComponents">
      <summary>
            The component names for vertex color, default value is ("red", "green", "blue")
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.FaceElement">
      <summary>
            The element name for the face data, default value is "face"
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.FaceProperty">
      <summary>
            The property name for the face data, default value is "vertex_index"
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.STLLoadOptions">
      <summary>
            Load options for STL
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.STLLoadOptions.#ctor">
      <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLLoadOptions" /> instance.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.STLLoadOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLLoadOptions" /> instance.
            </summary>
      <param name="contentType">
      </param>
    </member>
    <member name="P:Aspose.ThreeD.Formats.STLLoadOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets whether to flip coordinate system of control points/normal during importing.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.STLSaveOptions">
      <summary>
            Save options for STL
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.STLSaveOptions.#ctor">
      <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLSaveOptions" /> instance.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.STLSaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLSaveOptions" /> instance.
            </summary>
      <param name="contentType">
      </param>
    </member>
    <member name="P:Aspose.ThreeD.Formats.STLSaveOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets whether flip coordinate system of control points/normal during exporting.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.U3DLoadOptions">
      <summary>
            Load options for universal 3d
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.U3DLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.U3DLoadOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DLoadOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.U3DSaveOptions">
      <summary>
            Save options for universal 3d
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.U3DSaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.U3DSaveOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.MeshCompression">
      <summary>
            Gets or sets whether to enable mesh data compression.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportNormals">
      <summary>
            Gets or sets whether to export normal data.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportTextureCoordinates">
      <summary>
            Gets or sets whether to export texture coordinates.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportVertexDiffuse">
      <summary>
            Gets or sets whether to export vertex's diffuse color.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportVertexSpecular">
      <summary>
            Gets or sets whether to export vertex' specular color.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.XLoadOptions">
      <summary>
            The Load options for DirectX X files.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.XLoadOptions.FlipCoordinateSystem">
      <summary>
            Flip the coordinate system, this is true by default
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.XLoadOptions.#ctor(Aspose.ThreeD.FileContentType)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.XLoadOptions" /></summary>
      <param name="contentType">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Formats.Discreet3DSLoadOptions">
      <summary>
            Load options for 3DS file.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.Discreet3DSLoadOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.GammaCorrectedColor">
      <summary>
            A 3ds file may contains original color and gamma corrected color for same attribute,
            Setting this to true will use the gamma corrected color if possible, 
            otherwise the Aspose.3D will try to use the original color.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets flip coordinate system of control points/normal during importing/exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.ApplyAnimationTransform">
      <summary>
            Gets or sets wheather to use the transformation defined in the first frame of animation track.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Formats.Discreet3DSSaveOptions">
      <summary>
            Save options for 3DS file.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.Discreet3DSSaveOptions" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.ExportLight">
      <summary>
            Gets or sets whether export all lights in the scene.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.ExportCamera">
      <summary>
            Gets or sets whether export all cameras in the scene.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.DuplicatedNameSeparator">
      <summary>
            The separator between object's name and the duplicated counter, default value is "_".
            
            When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object.
            For example there's two nodes named "Box", the first node will have a name "Box",
            and the second node will get a new name "Box_2" using the default configuration.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.DuplicatedNameCounterBase">
      <summary>
            The counter used by generating new name for duplicated names, default value is 2.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.DuplicatedNameCounterFormat">
      <summary>
            The format of the duplicated counter, default value is empty string.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.MasterScale">
      <summary>
            Gets or sets the master scale used in exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.GammaCorrectedColor">
      <summary>
            A 3ds file may contains original color and gamma corrected color for same attribute,
            Setting this to true will use the gamma corrected color if possible, 
            otherwise the Aspose.3D will try to use the original color.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.FlipCoordinateSystem">
      <summary>
            Gets or sets flip coordinate system of control points/normal during importing/exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.HighPreciseColor">
      <summary>
            If this is true, the generated 3ds file will use high precise color, means each channel of red/green/blue are in 32bit float.
            Otherwise the generated file will use 24bit color, each channel use 8bit byte.
            The default value is false, because not all applications supports the high-precise color.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.IArrayList`1">
      <summary>
            Aspose.3D has its own highly optimized implementation of <see cref="T:System.Collections.Generic.List`1" /> for better loading/saving performance
            Only this interface is exposed for user with <see cref="T:System.Collections.Generic.IList`1" /> compatible and similar interfaces.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IArrayList`1.AddRange(System.Collections.Generic.IList{`0})">
      <summary>
            Adds all items from <paramref name="list" />, this is optimized version for <see cref="T:System.Collections.Generic.IList`1" /></summary>
      <param name="list">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IArrayList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds all items from <paramref name="collection" />, this is general version for <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IArrayList`1.ToArray">
      <summary>
            Converts all items in the list to an array
            </summary>
      <returns>Items array</returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.BoundingBoxExtent">
      <summary>
            The extent of the bounding box
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBoxExtent.Null">
      <summary>
            Null bounding box
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBoxExtent.Finite">
      <summary>
            Finite bounding box
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBoxExtent.Infinite">
      <summary>
            Infinite bounding box
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.BoundingBox">
      <summary>
            The axis-aligned bounding box
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBox.Null">
      <summary>
            The null bounding box
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBox.Infinite">
      <summary>
            The infinite bounding box
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.BoundingBox.Extent">
      <summary>
            Gets the extent of the bounding box.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.BoundingBox.Minimum">
      <summary>
            The minimum corner of the bounding box
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.BoundingBox.Maximum">
      <summary>
            The maximum corner of the bounding box
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.#ctor(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Initialize a finite bounding box with given minimum and maximum corner
            </summary>
      <param name="minimum">The minimum corner</param>
      <param name="maximum">The maximum corner</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a finite bounding box with given minimum and maximum corner
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.FromGeometry(Aspose.ThreeD.Entities.Geometry)">
      <summary>
            Construct a bounding box from given geometry
            </summary>
      <param name="geometry">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.op_Multiply(Aspose.ThreeD.Utilities.BoundingBox,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Operator overloading for multiply
            </summary>
      <param name="bbox">
      </param>
      <param name="mat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.ToString">
      <summary>
            Gets the string representation of the bounding box.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.GetHashCode">
      <summary>
            Returns the hash code for this instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox.Equals(System.Object)">
      <summary>
            Determines if two objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.BoundingBox2D">
      <summary>
            The axis-aligned bounding box for <see cref="T:Aspose.ThreeD.Utilities.Vector2" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBox2D.Null">
      <summary>
            The null bounding box
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.BoundingBox2D.Infinite">
      <summary>
            The infinite bounding box
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.BoundingBox2D.Extent">
      <summary>
            Gets the extent of the bounding box.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.BoundingBox2D.Minimum">
      <summary>
            The minimum corner of the bounding box
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.BoundingBox2D.Maximum">
      <summary>
            The maximum corner of the bounding box
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.#ctor(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Initialize a finite bounding box with given minimum and maximum corner
            </summary>
      <param name="minimum">The minimum corner</param>
      <param name="maximum">The maximum corner</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.Merge(Aspose.ThreeD.Utilities.Vector2)">
      <summary>
             Merges the new box into the current bounding box.
            </summary>
      <param name="pt">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.Merge(Aspose.ThreeD.Utilities.BoundingBox2D)">
      <summary>
             Merges the new box into the current bounding box.
            </summary>
      <param name="bb">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.ToString">
      <summary>
            Gets the string representation of the bounding box.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.FileSystem">
      <summary>
            File system encapsulation.
            Aspose.3D will use this to read/write dependencies.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for reading dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for writing dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.LocalFileSystem">
      <summary>
            The <see cref="T:Aspose.ThreeD.Utilities.LocalFileSystem" /> will maps the read/write operations to local directory.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.LocalFileSystem.#ctor(System.String)">
      <summary>
            Initialize a new <see cref="T:Aspose.ThreeD.Utilities.LocalFileSystem" /> with specified base directory.
            </summary>
      <param name="directory">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.LocalFileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for reading dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.LocalFileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for writing dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.MemoryFileSystem">
      <summary>
            The <see cref="T:Aspose.ThreeD.Utilities.MemoryFileSystem" /> will maps the read/write operations to memory.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.MemoryFileSystem.FileNames">
      <summary>
            File names that in this memory file system.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MemoryFileSystem.GetFileContent(System.String)">
      <summary>
            Returns the raw content of the specified file.
            Throw <see cref="T:System.IO.FileNotFoundException" /> if the specified file is not existing.
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MemoryFileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for reading dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MemoryFileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for writing dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.DummyFileSystem">
      <summary>
            Read/write operations are dummy operations.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.DummyFileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for reading dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.DummyFileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
      <summary>
            Create a stream for writing dependencies.
            </summary>
      <param name="fileName">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.FMatrix4">
      <summary>
            Matrix 4x4 with all component in float type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m00">
      <summary>
            The m00.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m01">
      <summary>
            The m01.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m02">
      <summary>
            The m02.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m03">
      <summary>
            The m03.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m10">
      <summary>
            The m10.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m11">
      <summary>
            The m11.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m12">
      <summary>
            The m12.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m13">
      <summary>
            The m13.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m20">
      <summary>
            The m20.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m21">
      <summary>
            The m21.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m22">
      <summary>
            The m22.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m23">
      <summary>
            The m23.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m30">
      <summary>
            The m30.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m31">
      <summary>
            The m31.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m32">
      <summary>
            The m32.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m33">
      <summary>
            The m33.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FMatrix4.Identity">
      <summary>
            The identity matrix
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix4" /></summary>
      <param name="m00">
      </param>
      <param name="m01">
      </param>
      <param name="m02">
      </param>
      <param name="m03">
      </param>
      <param name="m10">
      </param>
      <param name="m11">
      </param>
      <param name="m12">
      </param>
      <param name="m13">
      </param>
      <param name="m20">
      </param>
      <param name="m21">
      </param>
      <param name="m22">
      </param>
      <param name="m23">
      </param>
      <param name="m30">
      </param>
      <param name="m31">
      </param>
      <param name="m32">
      </param>
      <param name="m33">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.#ctor(Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix4" /> from a <see cref="T:Aspose.ThreeD.Utilities.Matrix4" /> instance.
            </summary>
      <param name="mat">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.#ctor(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
      <summary>
            Constructs matrix from 4 rows.
            </summary>
      <param name="r0">R0.</param>
      <param name="r1">R1.</param>
      <param name="r2">R2.</param>
      <param name="r3">R3.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Concatenate(Aspose.ThreeD.Utilities.FMatrix4)">
      <summary>
            Concatenates the two matrices
            </summary>
      <param name="m2">M2.</param>
      <returns>New matrix4</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.op_Multiply(Aspose.ThreeD.Utilities.FMatrix4,Aspose.ThreeD.Utilities.FMatrix4)">
      <summary>
            Concatenate the two matrices
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Concatenate(Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Concatenates the two matrices
            </summary>
      <param name="m2">M2.</param>
      <returns>New matrix4</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Transpose">
      <summary>
            Transposes this instance.
            </summary>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Inverse">
      <summary>
            Calculate the inverse matrix of current instance.
            </summary>
      <returns>Inverse matrix4</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FMatrix4.op_Multiply(Aspose.ThreeD.Utilities.FMatrix4,System.Single)">
      <summary>
            Multiply the matrix and double value
            </summary>
      <param name="lhs">Lhs.</param>
      <param name="v">V.</param>
      <returns>Result matrix</returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.FVector2">
      <summary>
             A float vector with two components.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector2.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector2.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector2" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.#ctor(Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector2" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.ToString">
      <summary>
            Returns a string that represents the <see cref="T:Aspose.ThreeD.Utilities.FVector2" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.op_Subtraction(Aspose.ThreeD.Utilities.FVector2,Aspose.ThreeD.Utilities.FVector2)">
      <summary>
            - Operator overloading
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.Equals(Aspose.ThreeD.Utilities.FVector2)">
      <summary>
            Check if two vectors are equal
            </summary>
      <param name="rhs">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.Equals(System.Object)">
      <summary>
            Check if two vectors are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.GetHashCode">
      <summary>
            Gets the hash code of this instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.op_Equality(Aspose.ThreeD.Utilities.FVector2,Aspose.ThreeD.Utilities.FVector2)">
      <summary>
            == Operator overloading
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector2.op_Inequality(Aspose.ThreeD.Utilities.FVector2,Aspose.ThreeD.Utilities.FVector2)">
      <summary>
            != Operator overloading
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.FVector3">
      <summary>
             A float vector with three components.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector3.Zero">
      <summary>
            The Zero vector.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector3.UnitScale">
      <summary>
            The unit scale vector with all components are all 1
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector3.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector3.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector3.z">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector3" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.#ctor(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector3" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.#ctor(Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.ToString">
      <summary>
            Returns a string that represents the <see cref="T:Aspose.ThreeD.Utilities.FVector3" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.Normalize">
      <summary>
            Normalizes this instance.
            </summary>
      <returns>Normalized vector.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.Cross(Aspose.ThreeD.Utilities.FVector3)">
      <summary>
            Cross product of two vectors
            </summary>
      <param name="rhs">Right hand side value.</param>
      <returns>Cross product of two <see cref="T:Aspose.ThreeD.Utilities.FVector3" />s.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.op_Addition(Aspose.ThreeD.Utilities.FVector3,Aspose.ThreeD.Utilities.FVector3)">
      <summary>
            + Operator overloading
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.op_UnaryNegation(Aspose.ThreeD.Utilities.FVector3)">
      <summary>
            - Operator overloading
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.op_Subtraction(Aspose.ThreeD.Utilities.FVector3,Aspose.ThreeD.Utilities.FVector3)">
      <summary>
            - Operator overloading
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector3.op_Multiply(Aspose.ThreeD.Utilities.FVector3,System.Single)">
      <summary>
            * Operator overloading
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.FVector4">
      <summary>
             A float vector with four components.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector4.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector4.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector4.z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.FVector4.w">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(Aspose.ThreeD.Utilities.Vector3,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.op_Addition(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
      <summary>
            Operator overloading for +
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.op_Subtraction(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
      <summary>
             Operator overloading for - (minus)
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.op_Multiply(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.FVector4.ToString">
      <summary>
            Returns a string that represents the <see cref="T:Aspose.ThreeD.Utilities.FVector4" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.IOUtils">
      <summary>
            Utilities to write matrix/vector to binary writer
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Write the matrix to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="mat">Matrix to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FMatrix4)">
      <summary>
            Write the matrix to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="mat">Matrix to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FVector2)">
      <summary>
            Write the vector to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="v">Vector to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FVector3)">
      <summary>
            Write the vector to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="v">Vector to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FVector4)">
      <summary>
            Write the vector to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="v">Vector to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Write the vector to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="v">Vector to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Write the vector to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="v">Vector to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Write the vector to the binary writer
            </summary>
      <param name="writer">Target binary writer</param>
      <param name="v">Vector to write</param>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.MathUtils">
      <summary>
            A set of useful mathematical utilities.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.Clamp(System.Double,System.Double,System.Double)">
      <summary>
            Clamp value to range [min, max]
            </summary>
      <param name="val">Value to clamp.</param>
      <param name="min">Minimum value.</param>
      <param name="max">Maximum value.</param>
      <returns>The value between [min, max]</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Convert a <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> from radian to degree.
            </summary>
      <param name="radian">The radian value.</param>
      <returns>The degree value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Convert a <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> from degree to radian
            </summary>
      <param name="degree">The degree value.</param>
      <returns>The radian value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(System.Single)">
      <summary>
            Convert a number from radian to degree
            </summary>
      <param name="radian">The radian value.</param>
      <returns>The degree value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(System.Double)">
      <summary>
            Convert a number from radian to degree
            </summary>
      <param name="radian">The radian value.</param>
      <returns>The degree value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(System.Double,System.Double,System.Double)">
      <summary>
            Convert a number from radian to degree
            </summary>
      <param name="x">The x component in radian value.</param>
      <param name="y">The y component in radian value.</param>
      <param name="z">The z component in radian value.</param>
      <returns>The degree value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(System.Single)">
      <summary>
            Convert a number from degree to radian
            </summary>
      <param name="degree">The degree value.</param>
      <returns>The radian value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(System.Double)">
      <summary>
            Convert a number from degree to radian
            </summary>
      <param name="degree">The degree value.</param>
      <returns>The radian value.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(System.Double,System.Double,System.Double)">
      <summary>
            Convert a vector from degree to radian
            </summary>
      <param name="x">The x component in degree value.</param>
      <param name="y">The y component in degree value.</param>
      <param name="z">The z component in degree value.</param>
      <returns>The radian value.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.Matrix4">
      <summary>
            4x4 matrix implementation.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m00">
      <summary>
            The m00.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m01">
      <summary>
            The m01.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m02">
      <summary>
            The m02.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m03">
      <summary>
            The m03.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m10">
      <summary>
            The m10.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m11">
      <summary>
            The m11.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m12">
      <summary>
            The m12.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m13">
      <summary>
            The m13.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m20">
      <summary>
            The m20.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m21">
      <summary>
            The m21.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m22">
      <summary>
            The m22.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m23">
      <summary>
            The m23.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m30">
      <summary>
            The m30.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m31">
      <summary>
            The m31.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m32">
      <summary>
            The m32.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Matrix4.m33">
      <summary>
            The m33.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.#ctor(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Constructs matrix from 4 rows.
            </summary>
      <param name="r0">R0.</param>
      <param name="r1">R1.</param>
      <param name="r2">R2.</param>
      <param name="r3">R3.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Matrix4" /> struct.
            </summary>
      <param name="m00">M00.</param>
      <param name="m01">M01.</param>
      <param name="m02">M02.</param>
      <param name="m03">M03.</param>
      <param name="m10">M10.</param>
      <param name="m11">M11.</param>
      <param name="m12">M12.</param>
      <param name="m13">M13.</param>
      <param name="m20">M20.</param>
      <param name="m21">M21.</param>
      <param name="m22">M22.</param>
      <param name="m23">M23.</param>
      <param name="m30">M30.</param>
      <param name="m31">M31.</param>
      <param name="m32">M32.</param>
      <param name="m33">M33.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Matrix4" /> struct.
            </summary>
      <param name="m">M.</param>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Matrix4.Identity">
      <summary>
            Gets the identity matrix.
            </summary>
      <value>The identity.</value>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Concatenate(Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Concatenates the two matrices
            </summary>
      <param name="m2">M2.</param>
      <returns>New matrix4</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Transpose">
      <summary>
            Transposes this instance.
            </summary>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Normalize">
      <summary>
            Normalizes this instance.
            </summary>
      <returns>Normalize matrix4</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Inverse">
      <summary>
            Inverses this instance.
            </summary>
      <returns>Inverse matrix4</returns>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Matrix4.Determinant">
      <summary>
            Gets the determinant of the matrix.
            </summary>
      <value>The determinant.</value>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Multiply the two matrices
            </summary>
      <param name="lhs">Lhs.</param>
      <param name="rhs">Rhs.</param>
      <returns>Result matrix</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Multiply the matrix and vector3
            </summary>
      <param name="lhs">Lhs.</param>
      <param name="v">V.</param>
      <returns>Result matrix</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.SetTRS(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Initializes the matrix with translation/rotation/scale
            </summary>
      <param name="translation">Translation.</param>
      <param name="rotation">Euler angles for rotation, fields are in degree.</param>
      <param name="scale">Scale.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Multiply the matrix and vector4
            </summary>
      <param name="lhs">Lhs.</param>
      <param name="v">V.</param>
      <returns>Result matrix</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,System.Double)">
      <summary>
            Multiply the matrix and double value
            </summary>
      <param name="lhs">Lhs.</param>
      <param name="v">V.</param>
      <returns>Result matrix</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.ToArray">
      <summary>
            Converts matrix to array.
            </summary>
      <returns>The array.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Decompose(Aspose.ThreeD.Utilities.Vector3@,Aspose.ThreeD.Utilities.Vector3@,Aspose.ThreeD.Utilities.Quaternion@)">
      <summary>
            Decompose the transformation matrix.
            </summary>
      <param name="translation">The translation.</param>
      <param name="scaling">The scaling.</param>
      <param name="rotation">The rotation.</param>
      <returns>True if successed.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Matrix4" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Matrix4" />.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Translate(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Creates a matrix that translates along the x-axis, the y-axis and the z-axis 
            </summary>
      <param name="t">Translate offset</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Translate(System.Double,System.Double,System.Double)">
      <summary>
            Creates a matrix that translates along the x-axis, the y-axis and the z-axis 
            </summary>
      <param name="tx">X-coordinate offset</param>
      <param name="ty">Y-coordinate offset</param>
      <param name="tz">Z-coordinate offset</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Scale(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Creates a matrix that scales along the x-axis, the y-axis and the z-axis.
            </summary>
      <param name="s">Scaling factories applies to the x-axis, the y-axis and the z-axis</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Scale(System.Double)">
      <summary>
            Creates a matrix that scales along the x-axis, the y-axis and the z-axis.
            </summary>
      <param name="s">Scaling factories applies to all axises</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Scale(System.Double,System.Double,System.Double)">
      <summary>
            Creates a matrix that scales along the x-axis, the y-axis and the z-axis.
            </summary>
      <param name="sx">Scaling factories applies to the x-axis</param>
      <param name="sy">Scaling factories applies to the y-axis</param>
      <param name="sz">Scaling factories applies to the z-axis</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.RotateFromEuler(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Create a rotation matrix from euler angle
            </summary>
      <param name="eul">Rotation in radian</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.RotateFromEuler(System.Double,System.Double,System.Double)">
      <summary>
            Create a rotation matrix from euler angle
            </summary>
      <param name="rx">Rotation in x axis in radian</param>
      <param name="ry">Rotation in y axis in radian</param>
      <param name="rz">Rotation in z axis in radian</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Rotate(System.Double,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Create a rotation matrix by rotation angle and axis
            </summary>
      <param name="angle">Rotate angle in radian</param>
      <param name="axis">Rotation axis</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Matrix4.Rotate(Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Create a rotation matrix from a quaternion
            </summary>
      <param name="q">Rotation quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.NamespaceDoc">
      <summary>
            All utility classes are defined in this namespace.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.ParseException">
      <summary>
            Exception when Aspose.3D failed to parse the input.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.ParseException.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Utilities.ParseException" /></summary>
      <param name="msg">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.Quaternion">
      <summary>
            Quaternion is usually used to perform rotation in computer graphics.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Quaternion.Identity">
      <summary>
            The Identity quaternion.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Quaternion.w">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Quaternion.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Quaternion.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Quaternion.z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Quaternion" /> class.
            </summary>
      <param name="w">w component of the quaternion</param>
      <param name="x">x component of the quaternion</param>
      <param name="y">y component of the quaternion</param>
      <param name="z">z component of the quaternion</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Equals(System.Object)">
      <summary>
            Check if two quaternions equals
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.GetHashCode">
      <summary>
            Gets the hash code of Quaternion
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Utilities.Quaternion" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Conjugate">
      <summary>
            Returns a conjugate quaternion of current quaternion
            </summary>
      <returns>The conjugate quaternion.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Inverse">
      <summary>
            Returns a inverse quaternion of current quaternion
            </summary>
      <returns>Inversed quaternion.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Dot(Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Dots product
            </summary>
      <param name="q">The quaternion</param>
      <returns>Dot value</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.EulerAngles">
      <summary>
            Converts quaternion to rotation represented by euler angles
            All components are in radian
            </summary>
      <returns>Result vector</returns>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Quaternion.Length">
      <summary>
            Gets the length of the quaternion
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Normalize">
      <summary>
            Normalize the quaternion
            </summary>
      <returns>Normalized quaternion.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToAngleAxis(System.Double@,Aspose.ThreeD.Utilities.Vector3@)">
      <summary>
            Decompose the quaternion to angle and axis
            </summary>
      <param name="angle">The angle to rotate, in radian.</param>
      <param name="axis">The axis that rotates around.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Concat(Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Concatenate two quatrenions
            </summary>
      <param name="rhs">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromAngleAxis(System.Double,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Creates a quaternion around given axis and rotate in clockwise 
            </summary>
      <param name="a">Clockwise rotation in radian</param>
      <param name="axis">Axis</param>
      <returns>Created quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromRotation(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Creates a quaternion that rotate from original to destinal direction
            </summary>
      <param name="orig">Original direction</param>
      <param name="dest">Destinal direction</param>
      <returns>Created quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromEulerAngle(System.Double,System.Double,System.Double)">
      <summary>
            Creates quaternion from given euler angle
            </summary>
      <param name="pitch">Pitch in radian</param>
      <param name="yaw">Yaw in radian</param>
      <param name="roll">Roll in radian</param>
      <returns>Created quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromEulerAngle(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Creates quaternion from given euler angle
            </summary>
      <param name="eulerAngle">Euler angle in radian</param>
      <returns>Created quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToMatrix">
      <summary>
            Convert the rotation presented by quaternion to transform matrix.
            </summary>
      <returns>The matrix representation of current quaternion.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Addition(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Operator overloading for +
            </summary>
      <param name="lhs">Left quaternion</param>
      <param name="rhs">Right quaternion</param>
      <returns>Result quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Division(Aspose.ThreeD.Utilities.Quaternion,System.Double)">
      <summary>
            Operator overloading for /
            </summary>
      <param name="lhs">Left quaternion</param>
      <param name="rhs">Right quaternion</param>
      <returns>Result quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,System.Double)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="lhs">Left quaternion</param>
      <param name="rhs">Right quaternion</param>
      <returns>Result quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="lhs">Left quaternion</param>
      <param name="rhs">Right quaternion</param>
      <returns>Result quaternion</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="q">The rotation quaternion</param>
      <param name="v">Vector to rotate</param>
      <returns>Rotated vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="q">The rotation quaternion</param>
      <param name="v">Vector to rotate</param>
      <returns>Rotated vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToString">
      <summary>
            Gets the representation of quaternion in string
            </summary>
      <returns>Object string</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="v">The rotation quaternion</param>
      <param name="q">Vector to rotate</param>
      <returns>Rotated vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Equality(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Equal operator for quaternion
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Inequality(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Not-equal operator for quaternion
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>True if two quaternions are not equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Quaternion.Interpolate(System.Single,Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Populates this quaternion with the interpolated value between the given quaternion arguments for a t between from and to.
            </summary>
      <param name="t">The coefficient to interpolate.</param>
      <param name="from">Source quaternion.</param>
      <param name="to">Target quaternion.</param>
      <returns>The interpolated quaternion.</returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.RelativeRectangle">
      <summary>
            Relative rectangle
            The formula between relative component to absolute value is:
            Scale * (Reference Width) + offset
            So if we want it to represent an absolute value, leave all scale fields zero, and use offset fields instead.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleX">
      <summary>
            Relative coordinate X
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleY">
      <summary>
            Relative coordinate Y
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleWidth">
      <summary>
            Relative width
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleHeight">
      <summary>
            Relative height
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetX">
      <summary>
            Gets or sets the offset for coordinate X
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetY">
      <summary>
            Gets or sets the offset for coordinate Y
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetWidth">
      <summary>
            Gets or sets the offset for width
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetHeight">
      <summary>
            Gets or sets the offset for height
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.ToAbsolute(System.Drawing.Size)">
      <summary>
            Convert the relative rectangle to absolute rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.ToAbsolute(System.Drawing.Rectangle)">
      <summary>
            Convert the relative rectangle to absolute rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.FromScale(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.RelativeRectangle" /> with all offset fields zero and scale fields from given parameters.
            </summary>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
      <param name="scaleWidth">
      </param>
      <param name="scaleHeight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.ToString">
      <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.ComposeOrder">
      <summary>
            The order to compose transform matrix
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.ComposeOrder.Append">
      <summary>
            Append the new transform to the chain
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.ComposeOrder.Prepend">
      <summary>
            Prepend the new transform to the chain
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.TransformBuilder">
      <summary>
            The <see cref="T:Aspose.ThreeD.Utilities.TransformBuilder" /> is used to build transform matrix by a chain of transformations.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.TransformBuilder.Matrix">
      <summary>
            Gets or sets the current matrix value
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.TransformBuilder.ComposeOrder">
      <summary>
            Gets or sets the chain compose order.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.#ctor(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.ComposeOrder)">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.TransformBuilder" /> with initial transform matrix and specified compose order
            </summary>
      <param name="initial">
      </param>
      <param name="order">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.#ctor(Aspose.ThreeD.Utilities.ComposeOrder)">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.TransformBuilder" /> with initial identity transform matrix and specified compose order
            </summary>
      <param name="order">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Compose(Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Append or prepend the argument to internal matrix. 
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Append(Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Append the new transform matrix to the transform chain.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Prepend(Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Prepend the new transform matrix to the transform chain.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Rearrange(Aspose.ThreeD.Axis,Aspose.ThreeD.Axis,Aspose.ThreeD.Axis)">
      <summary>
            Rearrange the layout of the axis.
            </summary>
      <param name="newX">The new x component source</param>
      <param name="newY">The new y component source</param>
      <param name="newZ">The new z component source</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Scale(System.Double)">
      <summary>
            Chain a scaling transform matrix with a component scaled by s
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Scale(System.Double,System.Double,System.Double)">
      <summary>
            Chain a scaling transform matrix
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Scale(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Chain a scale transform
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateDegree(System.Double,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Chain a rotation transform in degree
            </summary>
      <param name="angle">The angle to rotate in degree</param>
      <param name="axis">The axis to rotate</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateRadian(System.Double,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Chain a rotation transform in radian
            </summary>
      <param name="angle">The angle to rotate in radian</param>
      <param name="axis">The axis to rotate</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Rotate(Aspose.ThreeD.Utilities.Quaternion)">
      <summary>
            Chain a rotation by a quaternion
            </summary>
      <param name="q">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateEulerDegree(System.Double,System.Double,System.Double)">
      <summary>
            Chain a rotation by euler angles in degree
            </summary>
      <param name="degX">
      </param>
      <param name="degY">
      </param>
      <param name="degZ">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateEulerRadian(System.Double,System.Double,System.Double)">
      <summary>
            Chain a rotation by euler angles in radian
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateEulerRadian(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Chain a rotation by euler angles in radian
            </summary>
      <param name="r">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Translate(System.Double,System.Double,System.Double)">
      <summary>
            Chain a translation transform
            </summary>
      <param name="tx">
      </param>
      <param name="ty">
      </param>
      <param name="tz">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Translate(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Chain a translation transform
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Reset">
      <summary>
            Reset the transform to identity matrix
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.Vector2">
      <summary>
             A vector with two components.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector2.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector2.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector2" /> struct.
            </summary>
      <param name="s">S.</param>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Vector2.U">
      <summary>
            Gets or sets the U component if the <see cref="T:Aspose.ThreeD.Utilities.Vector2" /> is used as a mapping coordinate.
            It's an alias of x component.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Vector2.V">
      <summary>
            Gets or sets the V component if the <see cref="T:Aspose.ThreeD.Utilities.Vector2" /> is used as a mapping coordinate.
            It's an alias of y component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector2" /> struct.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.Dot(Aspose.ThreeD.Utilities.Vector2)">
      <summary>
             Gets the dot product of two vectors
             </summary>
      <param name="rhs">Right hand side value.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Vector2.Length">
      <summary>
            Gets the length.
            </summary>
      <value>The length.</value>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Addition(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Addition operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>The result of addition.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Subtraction(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Substraction operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>The result of substraction.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Division(Aspose.ThreeD.Utilities.Vector2,System.Double)">
      <summary>
            Division operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>The result of division.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Multiply(Aspose.ThreeD.Utilities.Vector2,System.Double)">
      <summary>
            Multiply operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>The result of multiply.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Multiply(System.Double,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Multiply operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>The result of multiply.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Equality(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Equal operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Inequality(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Not-equal operator for Vector2
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>True if two vectors are not equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.Equals(Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Check if two vector2 equals
            </summary>
      <param name="rhs">The right hand side value.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.GetHashCode">
      <summary>
            Gets the hash code of Vector2
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Utilities.Vector2" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.Equals(System.Object)">
      <summary>
            Check if two vector2 equals
            </summary>
      <param name="obj">The object to compare.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector2" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector2" />.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.Cross(Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Cross product of two vectors
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.Normalize">
      <summary>
            Normalizes this instance.
            </summary>
      <returns>Normalized vector.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector2.CompareTo(Aspose.ThreeD.Utilities.Vector2)">
      <summary>
            Compare current vector to another instance.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.Vector3">
      <summary>
             A vector with three components.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> struct.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="z">The z coordinate.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> struct.
            </summary>
      <param name="color">Color.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> struct.
            </summary>
      <param name="v">V.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3" /> struct.
            </summary>
      <param name="vec4">Vec4.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Equals(System.Object)">
      <summary>
            Check if two vector3 equals
            </summary>
      <param name="obj">The object to check equality.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.GetHashCode">
      <summary>
            Gets the hash code of Vector3
            </summary>
      <returns>The hash code of the <see cref="T:Aspose.ThreeD.Utilities.Vector3" /></returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Dot(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Gets the dot product of two vectors
            </summary>
      <param name="rhs">Right hand side value.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Normalize">
      <summary>
            Normalizes this instance.
            </summary>
      <returns>Normalized vector.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Vector3.Length2">
      <summary>
            Gets the square of the length.
            </summary>
      <value>The length2.</value>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.Vector3.Length">
      <summary>
            Gets the length of this vector.
            </summary>
      <value>The length.</value>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Sin">
      <summary>
            Calculates sine on each component
            </summary>
      <returns>Calculated <see cref="T:Aspose.ThreeD.Utilities.Vector3" />.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Cos">
      <summary>
            Calculates cosine on each component
            </summary>
      <returns>Calculated <see cref="T:Aspose.ThreeD.Utilities.Vector3" />.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Cross(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Cross product of two vectors
            </summary>
      <param name="rhs">Right hand side value.</param>
      <returns>Cross product of two <see cref="T:Aspose.ThreeD.Utilities.Vector3" />s.</returns>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.Origin">
      <summary>
            Gets the origin position.
            </summary>
      <value>The origin.</value>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.UnitScale">
      <summary>
            Gets the unit scale vector.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.XAxis">
      <summary>
            Gets the X axis.
            </summary>
      <value>The X axis.</value>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.YAxis">
      <summary>
            Gets the Y axis.
            </summary>
      <value>The Y axis.</value>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector3.ZAxis">
      <summary>
            Gets the Z axis.
            </summary>
      <value>The Z axis.</value>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_UnaryNegation(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Operator overloading for -
            </summary>
      <param name="v">The origin vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Subtraction(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
             Operator overloading for - (minus)
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Addition(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Operator overloading for +
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Multiply(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Multiply(System.Double,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="lhs">The left scalar</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Multiply(Aspose.ThreeD.Utilities.Vector3,System.Double)">
      <summary>
             Operator overloading for *
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right double value</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Equality(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Equal operator for Vector3
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>True if all components are identically equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Inequality(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Not-equal operator for Vector3
            </summary>
      <param name="lhs">Left hand side value.</param>
      <param name="rhs">Right hand side value.</param>
      <returns>True if two vectors are not equal.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.Set(System.Double,System.Double,System.Double)">
      <summary>
            Sets the x/y/z component in one call.
            </summary>
      <param name="newX">The x component.</param>
      <param name="newY">The y component.</param>
      <param name="newZ">The z component.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector3" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector3" />.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.AngleBetween(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Calculate the inner angle between two direction
            Two direction can be non-normalized vectors
            </summary>
      <param name="dir">The direction vector to compare with</param>
      <param name="up">The up vector of the two direction's shared plane</param>
      <returns>inner angle in radian</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.AngleBetween(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Calculate the inner angle between two direction
            Two direction can be non-normalized vectors
            </summary>
      <param name="dir">The direction vector to compare with</param>
      <returns>inner angle in radian</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector3.CompareTo(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Compare current vector to another instance.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.Vector4">
      <summary>
             A vector with four components.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector4.x">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector4.y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector4.z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.Vector4.w">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> struct.
            </summary>
      <param name="color">Color.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(Aspose.ThreeD.Utilities.Vector3,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> struct.
            </summary>
      <param name="vec">Vec.</param>
      <param name="w">The width.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(Aspose.ThreeD.Utilities.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> struct.
            </summary>
      <param name="vec">Vec.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> struct.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="z">The z coordinate.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4" /> struct.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="z">The z coordinate.</param>
      <param name="w">The width.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Addition(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Operator overloading for +
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Subtraction(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
             Operator overloading for - (minus)
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Multiply(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Operator overloading for *
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right vector</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Multiply(Aspose.ThreeD.Utilities.Vector4,System.Double)">
      <summary>
             Operator overloading for *
            </summary>
      <param name="lhs">The left vector</param>
      <param name="rhs">The right double value</param>
      <returns>Result vector</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.Set(System.Double,System.Double,System.Double)">
      <summary>
            Sets vector's xyz components at a time, w will be set to 1
            </summary>
      <param name="newX">New X component.</param>
      <param name="newY">New Y component.</param>
      <param name="newZ">New Z component.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.Equals(System.Object)">
      <summary>
            Check if two vectors are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.GetHashCode">
      <summary>
            Gets the hash code of this vector
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.Set(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Sets vector's all components at a time 
            </summary>
      <param name="newX">New X component.</param>
      <param name="newY">New Y component.</param>
      <param name="newZ">New Z component.</param>
      <param name="newW">New W component.</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector4" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector4" />.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vector4.CompareTo(Aspose.ThreeD.Utilities.Vector4)">
      <summary>
            Compare current vector to another instance.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.SemanticAttribute">
      <summary>
            Allow user to use their own structure for static declaration of <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.SemanticAttribute.#ctor(Aspose.ThreeD.Utilities.VertexFieldSemantic)">
      <summary>
            Initialize a <see cref="T:Aspose.ThreeD.Utilities.SemanticAttribute" /></summary>
      <param name="semantic">The semantic of the struct's field.</param>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.Vertex">
      <summary>
            Vertex reference, used to access the raw vertex in <see cref="T:Aspose.ThreeD.Entities.TriMesh" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ToString">
      <summary>
            Gets the string representation of <see cref="T:Aspose.ThreeD.Utilities.Vertex" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.CompareTo(Aspose.ThreeD.Utilities.Vertex)">
      <summary>
            Compare the vertex with another vertex instance
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.Equals(System.Object)">
      <summary>
            Check if two objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.GetHashCode">
      <summary>
            Gets the hash code of the vertex
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadVector4(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the vector4 field
            </summary>
      <param name="field">The field with a Vector4/FVector4 data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFVector4(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the vector4 field
            </summary>
      <param name="field">The field with a Vector4/FVector4 data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadVector3(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the vector3 field
            </summary>
      <param name="field">The field with a Vector3/FVector3 data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFVector3(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the vector3 field
            </summary>
      <param name="field">The field with a Vector3/FVector3 data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadVector2(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the vector2 field
            </summary>
      <param name="field">The field with a Vector2/FVector2 data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFVector2(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the vector2 field
            </summary>
      <param name="field">The field with a Vector2/FVector2 data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadDouble(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the double field
            </summary>
      <param name="field">The field with a float/double compatible data type</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFloat(Aspose.ThreeD.Utilities.VertexField)">
      <summary>
            Read the float field
            </summary>
      <param name="field">The field with a float/double compatible data type</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.VertexDeclaration">
      <summary>
            The declaration of a custom defined vertex's structure
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Sealed">
      <summary>
            A <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /> will be sealed when its been used by <see cref="T:Aspose.ThreeD.Entities.TriMesh`1" /> or <see cref="T:Aspose.ThreeD.Entities.TriMesh" />, no more modifications is allowed.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Count">
      <summary>
            Gets the count of all fields defined in this <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Aspose.ThreeD.Utilities.VertexField" /> by index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.Clear">
      <summary>
            Clear all fields.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.AddField(Aspose.ThreeD.Utilities.VertexFieldDataType,Aspose.ThreeD.Utilities.VertexFieldSemantic,System.Int32)">
      <summary>
            Add a new vertex field
            </summary>
      <param name="dataType">The data type of the vertex field</param>
      <param name="semantic">How will this field used for</param>
      <param name="index">The index for same field semantic</param>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.FromType``1">
      <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /> directly from a struct type.
            Each instance field shall be annotated with <see cref="T:Aspose.ThreeD.Utilities.SemanticAttribute" />.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.FromGeometry(Aspose.ThreeD.Entities.Geometry,System.Boolean)">
      <summary>
            Create a <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /> based on a <see cref="T:Aspose.ThreeD.Entities.Geometry" />'s layout.
            </summary>
      <param name="geometry">
      </param>
      <param name="useFloat">Use float instead of double type</param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Size">
      <summary>
            The size in byte of the vertex structure.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.CompareTo(Aspose.ThreeD.Utilities.VertexDeclaration)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.ToString">
      <summary>
            String representation of <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object, which must also be a <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /> object, have the same value.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.GetEnumerator">
      <summary>
            Gets an enumerator to walk through all vertex fields in this instance.
            </summary>
      <returns>Enumerator</returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.VertexField">
      <summary>
            Vertex's field memory layout description.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexField.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexField.Equals(System.Object)">
      <summary>Determines whether this instance and a specified object, which must also be a <see cref="T:Aspose.ThreeD.Utilities.VertexField" /> object, have the same value.</summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexField.DataType">
      <summary>
            Data type of this field.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexField.Semantic">
      <summary>
            The usage semantic of this field.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexField.Index">
      <summary>
            Index of this field in the vertex's layout with same semantic.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexField.Offset">
      <summary>
            The offset in bytes of this field.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Utilities.VertexField.Size">
      <summary>
            The size in bytes of this field
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexField.CompareTo(Aspose.ThreeD.Utilities.VertexField)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
    </member>
    <member name="M:Aspose.ThreeD.Utilities.VertexField.ToString">
      <summary>
            Gets the string representation of <see cref="T:Aspose.ThreeD.Utilities.VertexField" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.VertexFieldDataType">
      <summary>
            Vertex field's data type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Float">
      <summary>
            Type of <see cref="T:System.Single" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.FVector2">
      <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.FVector2" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.FVector3">
      <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.FVector3" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.FVector4">
      <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.FVector4" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Double">
      <summary>
            Type of <see cref="T:System.Double" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Vector2">
      <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.Vector2" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Vector3">
      <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.Vector3" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Vector4">
      <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.Vector4" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int8">
      <summary>
            Type of <see cref="T:System.Byte" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int16">
      <summary>
            Type of <see cref="T:System.Int16" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int32">
      <summary>
            Type of <see cref="T:System.Int32" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int64">
      <summary>
            Type of <see cref="T:System.Int64" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Utilities.VertexFieldSemantic">
      <summary>
            The semantic of the vertex field
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Position">
      <summary>
            Position data
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Binormal">
      <summary>
            Binormal vector
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Normal">
      <summary>
            Normal vector
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Tangent">
      <summary>
            Tangent vector
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.UV">
      <summary>
            Texture UV coordinate
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.VertexColor">
      <summary>
            Vertex color
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.VertexCrease">
      <summary>
            Vertex crease
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.EdgeCrease">
      <summary>
            Edge crease
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.UserData">
      <summary>
            User data, usually for application-specific purpose
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Visibility">
      <summary>
            Visibility for components
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Specular">
      <summary>
            Specular colors
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Weight">
      <summary>
            Blend weights
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.ImportException">
      <summary>
            Exception when Aspose.3D failed to open the specified source
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.ImportException.#ctor(System.String)">
      <summary>
            Initializes a new instance
            </summary>
      <param name="msg">Error message</param>
    </member>
    <member name="T:Aspose.ThreeD.ExportException">
      <summary>
            Exceptions when Aspose.3D failed to export the scene to file
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.ExportException.#ctor(System.String)">
      <summary>
            Initializes a new instance
            </summary>
      <param name="msg">Error message</param>
    </member>
    <member name="T:Aspose.ThreeD.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></ms><java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code></java></example>
    </member>
    <member name="M:Aspose.ThreeD.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></ms><java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code></java></example>
    </member>
    <member name="M:Aspose.ThreeD.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <ms>
          <p>2. The folder that contains the Aspose component assembly.</p>
          <p>3. The folder that contains the client's calling assembly.</p>
          <p>4. The folder that contains the entry (startup) assembly.</p>
          <p>5. An embedded resource in the client's calling assembly.</p>
          <p>
            <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
          <p>1. Explicit path.</p>
          <p>2. An embedded resource in the client's calling assembly.</p>
        </ms>
        <java>
          <p>2. The folder that contains the Aspose component JAR file.</p>
          <p>3. The folder that contains the client's calling JAR file.</p>
        </java>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code></ms><java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code></java><param name="licenseName">Can be a full or short file name<ms> or name of an embedded resource</ms>.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.ThreeD.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
          <ms>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </ms>
          <java>
            License license = new License();
            license.setLicense(myStream);
            </java>
        </code>
      </example>
      <javaName>void setLicense(java.io.InputStream stream)</javaName>
    </member>
    <member name="T:Aspose.ThreeD.Metered">
      <summary>
            Provides methods to set metered key.
            </summary>
      <example>
            In this example, an attempt will be made to set metered public and private key
            
            <ms><code>
            [C#]
            
            Metered matered = new Metered();
            matered.SetMeteredKey("PublicKey", "PrivateKey");
            
            
            [Visual Basic]
            
            Dim matered As Metered = New Metered
            matered.SetMeteredKey("PublicKey", "PrivateKey")
            </code></ms><java>
            the component jar file:
            <code>
            Metered matered = new Metered();
            matered.setMeteredKey("PublicKey", "PrivateKey");
            </code></java></example>
    </member>
    <member name="M:Aspose.ThreeD.Metered.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Metered.SetMeteredKey(System.String,System.String)">
      <summary>
            Sets metered public and private key
            </summary>
      <param name="publicKey">public key</param>
      <param name="privateKey">private key</param>
    </member>
    <member name="M:Aspose.ThreeD.Metered.GetConsumptionQuantity">
      <summary>
            Gets consumption file size
            </summary>
      <returns>consumption quantity</returns>
    </member>
    <member name="M:Aspose.ThreeD.Metered.GetConsumptionCredit">
      <summary>
            Gets consumption credit
            </summary>
      <returns>consumption quantity</returns>
    </member>
    <member name="T:Aspose.ThreeD.NamespaceDoc">
      <summary>
            The base namespace of Aspose.3D
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.ArbitraryProfile">
      <summary>
            This class allows you to construct a 2D profile directly from arbitrary curve. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ArbitraryProfile.Curve">
      <summary>
            The Curve used to construct the profile
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.ArbitraryProfile.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.ArbitraryProfile" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.ArbitraryProfile.#ctor(Aspose.ThreeD.Entities.Curve)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.ArbitraryProfile" /> with an initial curve.
            </summary>
      <param name="curve">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.CircleShape">
      <summary>
            IFC compatible circle profile, which can be used to construct a mesh through <see cref="T:Aspose.ThreeD.Entities.LinearExtrusion" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.CircleShape.Radius">
      <summary>
            Gets or sets the radius of the circle.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.CircleShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.CShape">
      <summary>
            IFC compatible C-shape profile that defined by parameters.
            The center position of the profile is in the center of the bounding box.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.CShape.Depth">
      <summary>
            Gets or sets the depth of the profile.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.CShape.Width">
      <summary>
            Gets or sets the width of the profile.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.CShape.Girth">
      <summary>
            Gets or sets the length of girth.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.CShape.WallThickness">
      <summary>
            Gets or sets the thickness of the wall.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.CShape.InternalFilletRadius">
      <summary>
            Gets or sets the internal fillet radius.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.CShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.CShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.CShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.EllipseShape">
      <summary>
            IFC compatible ellipse shape that defined by parameters.
            The center position of the profile is in the center of the bounding box.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.EllipseShape.SemiAxis1">
      <summary>
            Gets or sets the first radius of the ellipse that measured in the direction of x axis.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.EllipseShape.SemiAxis2">
      <summary>
            Gets or sets the second radius of the ellipse that measured in the direction of y axis.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.EllipseShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.HShape">
      <summary>
            The <see cref="T:Aspose.ThreeD.Profiles.HShape" /> provides the defining parameters of an 'H' or 'I' shape.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.OverallDepth">
      <summary>
            Gets or sets the extent of the depth.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeWidth">
      <summary>
            Gets or sets the extent of the width.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeWidth">
      <summary>
            Gets or sets the width of the top flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeThickness">
      <summary>
            Gets or sets the thickness of the top flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeEdgeRadius">
      <summary>
            Gets or sets the radius of the lower edges of the top flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeFilletRadius">
      <summary>
            Gets or sets the radius of fillet between the web and the top flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeThickness">
      <summary>
            Gets or sets the flange thickness of H-shape.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.WebThickness">
      <summary>
            Gets or sets the thickness of the web of the H-shape.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeFilletRadius">
      <summary>
            Gets or sets the radius of fillet between the web and the bottom flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeEdgeRadius">
      <summary>
            Gets or sets the radius of the upper edges of the bottom flange.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.HShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.HShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.HShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.LShape">
      <summary>
            IFC compatible L-shape profile that defined by parameters.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.LShape.Depth">
      <summary>
            Gets or sets the depth of the profile.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.LShape.Width">
      <summary>
            Gets or sets the width of the profile.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.LShape.Thickness">
      <summary>
            Gets or sets the thickness of the constant wall.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.LShape.FilletRadius">
      <summary>
            Gets or sets the radius of the fillet.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.LShape.EdgeRadius">
      <summary>
            Gets or sets the radius of the edge.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.LShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.LShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.LShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.MirroredProfile">
      <summary>
            IFC compatible mirror profile.
            This profile defines a new profile by mirroring the base profile about the y axis.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.MirroredProfile.BaseProfile">
      <summary>
            The base profile to be mirrored.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.MirroredProfile.#ctor(Aspose.ThreeD.Profiles.Profile)">
      <summary>
            Construct a new <see cref="T:Aspose.ThreeD.Profiles.MirroredProfile" /> from an existing profile.
            </summary>
      <param name="baseProfile">The base profile to be mirrored.</param>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.Profile">
      <summary>
            2D Profile in xy plane
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.Profile.GetEntityRendererKey">
      <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.ParameterizedProfile">
      <summary>
            The base class of all parameterized profiles.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.ParameterizedProfile.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.RectangleShape">
      <summary>
            IFC compatible rectangular shape with rounding corners.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.RectangleShape.RoundingRadius">
      <summary>
            Gets or sets the radius of the circular arcs of all four corners, measured in degrees.
            Default value is 0.0
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.RectangleShape.XDim">
      <summary>
            Gets or sets the extent of the rectangle in the direction of x-axis
            Default value is 2.0
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.RectangleShape.YDim">
      <summary>
            Gets or sets the extent of the rectangle in the direction of y-axis
            Default value is 2.0
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.RectangleShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.RectangleShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.RectangleShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.TrapeziumShape">
      <summary>
            IFC compatible Trapezium shape defined by parameters. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.BottomXDim">
      <summary>
            Gets or sets the extent of the bottom line measured along the x-axis.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.TopXDim">
      <summary>
            Gets or sets the extent of the top line measured along the x-axis.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.YDim">
      <summary>
            Gets or sets the distance between the top and bottom lines measured along the y-axis. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.TopXOffset">
      <summary>
            Gets or sets the offset from the beginning of the top line to the bottom line. 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.TrapeziumShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.TrapeziumShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.TrapeziumShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.TShape">
      <summary>
            IFC compatible T-shape defined by parameters.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.Depth">
      <summary>
            Gets or sets the length of the web. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.FlangeWidth">
      <summary>
            Gets or sets the length of the flange. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.WebThickness">
      <summary>
            Gets or sets the wall thickness of web.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.FlangeThickness">
      <summary>
            Gets or sets the wall thickness of flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.FilletRadius">
      <summary>
            Gets or sets the radius of fillet between web and flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.FlangeEdgeRadius">
      <summary>
            Gets or sets the radius of the flange edge.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.TShape.WebEdgeRadius">
      <summary>
            Gets or sets the radius of web edge.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.TShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.TShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.TShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.UShape">
      <summary>
            IFC compatible U-shape defined by parameters.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.UShape.Depth">
      <summary>
            Gets or sets the length of web.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.UShape.FlangeWidth">
      <summary>
            Gets or sets the length of flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.UShape.WebThickness">
      <summary>
            Gets or sets the thickness of web.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.UShape.FlangeThickness">
      <summary>
            Gets or sets the thickness of flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.UShape.FilletRadius">
      <summary>
            Gets or sets the radius of fillet between flange and web.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.UShape.EdgeRadius">
      <summary>
            Gets or sets the radius of edge in flange's edge.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.UShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.UShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.UShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Profiles.ZShape">
      <summary>
            IFC compatible Z-shape profile defined by parameters.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ZShape.Depth">
      <summary>
            Gets or sets the length of web.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ZShape.FlangeWidth">
      <summary>
            Gets or sets the length of flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ZShape.WebThickness">
      <summary>
            Gets or sets the thickness of wall.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ZShape.FlangeThickness">
      <summary>
            Gets or sets the thickness of flange.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ZShape.FilletRadius">
      <summary>
            Gets or sets the radius of fillet between flange and web.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Profiles.ZShape.EdgeRadius">
      <summary>
            Gets or sets the radius of flange edge.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.ZShape.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.ZShape" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Profiles.ZShape.GetExtent">
      <summary>
            Gets the extent in x and y dimension.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.IBuffer">
      <summary>
            The base interface of all managed buffers used in rendering
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.IBuffer.Size">
      <summary>
            Size of this buffer in bytes
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.IBuffer.LoadData(System.Byte[])">
      <summary>
            Load the data into current buffer
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Render.IVertexBuffer">
      <summary>
            The vertex buffer holds the polygon vertex data that will be sent to rendering pipeline
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.IVertexBuffer.LoadData(Aspose.ThreeD.Entities.TriMesh)">
      <summary>
            Load vertex data from <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
      <param name="mesh">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.IVertexBuffer.LoadData(System.IntPtr,System.Int32)">
      <summary>
            Load data from given position
            </summary>
      <param name="data">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.IVertexBuffer.LoadData(System.Array)">
      <summary>
            Load data from array
            </summary>
      <param name="array">
      </param>
    </member>
    <member name="P:Aspose.ThreeD.Render.IVertexBuffer.VertexDeclaration">
      <summary>
            Gets the vertex declaration 
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IndexDataType">
      <summary>
            The data type of the elements in <see cref="T:Aspose.ThreeD.Render.IIndexBuffer" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.IndexDataType.Int32">
      <summary>
            The index buffer's elements are 32bit int
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.IndexDataType.Int16">
      <summary>
            The index buffer's elements are 16bit int
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IIndexBuffer">
      <summary>
            The index buffer describes the geometry used in rendering pipeline. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.IIndexBuffer.IndexDataType">
      <summary>
            Gets the data type of each element.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.IIndexBuffer.Count">
      <summary>
            Gets the number of index in this buffer.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(Aspose.ThreeD.Entities.TriMesh)">
      <summary>
            Load indice data from <see cref="T:Aspose.ThreeD.Entities.TriMesh" /></summary>
      <param name="mesh">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(System.Int32[])">
      <summary>
            Load indice data
            </summary>
      <param name="indices">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(System.UInt32[])">
      <summary>
            Load indice data
            </summary>
      <param name="indices">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(System.Int16[])">
      <summary>
            Load indice data
            </summary>
      <param name="indices">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Render.DrawOperation">
      <summary>
            The primitive types to render
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.DrawOperation.Points">
      <summary>
            Points
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.DrawOperation.Lines">
      <summary>
            Lines
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.DrawOperation.LineStrip">
      <summary>
            Line strips
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.DrawOperation.Triangles">
      <summary>
            Triangles
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.DrawOperation.TriangleStrip">
      <summary>
            Triangle strips
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.DrawOperation.TriangleFan">
      <summary>
            Triangle fan
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.DriverException">
      <summary>
            The exception raised by internal rendering drivers.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.DriverException.#ctor(System.UInt32,System.String)">
      <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Render.DriverException" /> with specified native driver error code and message.
            </summary>
      <param name="code">
      </param>
      <param name="message">
      </param>
    </member>
    <member name="P:Aspose.ThreeD.Render.DriverException.ErrorCode">
      <summary>
            Gets the native error code.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.EntityRendererKey">
      <summary>
            The key of registered entity renderer
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRendererKey.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.EntityRendererKey" /></summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRendererKey.ToString">
      <summary>
            Gets the string representation of the <see cref="T:Aspose.ThreeD.Render.EntityRendererKey" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.EntityRendererFeatures">
      <summary>
            The extra features that the entity renderer will provide
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.Default">
      <summary>
            No extra features
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.FrameBegin">
      <summary>
            The <see cref="T:Aspose.ThreeD.Render.EntityRenderer" /> will watch for FrameBegin callback before rendering each scene frame
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.FrameEnd">
      <summary>
            The <see cref="T:Aspose.ThreeD.Render.EntityRenderer" /> will watch for FrameBegin callback after rendering each scene frame
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.Shadowmap">
      <summary>
            This renderer can work in shadowmap mode
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.EntityRenderer">
      <summary>
            Subclass this to implement rendering for different kind of entities.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.#ctor(System.String,Aspose.ThreeD.Render.EntityRendererFeatures)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.EntityRenderer" /></summary>
      <param name="key">The key of the entity renderer</param>
      <param name="features">The extra features of the entity renderer</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.EntityRenderer" /></summary>
      <param name="key">The key of the entity renderer</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.Initialize(Aspose.ThreeD.Render.Renderer)">
      <summary>
            Initialize the entity renderer
            </summary>
      <param name="renderer">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.ResetSceneCache">
      <summary>
            The scene has changed or removed, need to dispose scene-level render resources in this
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.FrameBegin(Aspose.ThreeD.Render.Renderer)">
      <summary>
            Begin rendering a frame
            </summary>
      <param name="renderer">Current renderer</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.FrameEnd(Aspose.ThreeD.Render.Renderer)">
      <summary>
            Ends rendering a frame
            </summary>
      <param name="renderer">Current renderer</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.PrepareRenderQueue(Aspose.ThreeD.Render.Renderer,Aspose.ThreeD.Node,Aspose.ThreeD.Entity)">
      <summary>
            Prepare rendering commands for specified node/entity pair.
            </summary>
      <param name="renderer">
      </param>
      <param name="node">
      </param>
      <param name="entity">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.EntityRenderer.Dispose">
      <summary>
            The entity renderer is being disposed, release shared resources.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IDescriptorSet">
      <summary>
            The descriptor sets describes different resources that can be used to bind to the render pipeline like buffers, textures
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.IDescriptorSet.BeginUpdate">
      <summary>
            Begin to update the descriptor set
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.ICommandList">
      <summary>
            Encodes a sequence of commands which will be sent to GPU to render.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.BindPipeline(Aspose.ThreeD.Render.IPipeline)">
      <summary>
            Bind the pipeline instance for rendering
            </summary>
      <param name="pipeline">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.BindVertexBuffer(Aspose.ThreeD.Render.IVertexBuffer)">
      <summary>
            Bind the vertex buffer for rendering
            </summary>
      <param name="vertexBuffer">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.BindIndexBuffer(Aspose.ThreeD.Render.IIndexBuffer)">
      <summary>
            Bind the index buffer for rendering
            </summary>
      <param name="indexBuffer">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.BindDescriptorSet(Aspose.ThreeD.Render.IDescriptorSet)">
      <summary>
            Bind the descriptor set to current pipeline
            </summary>
      <param name="descriptorSet">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.Draw(System.Int32,System.Int32)">
      <summary>
            Draw without index buffer
            </summary>
      <param name="start">
      </param>
      <param name="count">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.Draw">
      <summary>
            Draw without index buffer
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.DrawIndex">
      <summary>
            Issue an indexed draw into a command list
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.DrawIndex(System.Int32,System.Int32)">
      <summary>
            Issue an indexed draw into a command list
            </summary>
      <param name="start">The first index to draw</param>
      <param name="count">The count of indices to draw</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.PushConstants(Aspose.ThreeD.Render.ShaderStage,System.Byte[])">
      <summary>
            Push the constant to the pipeline
            </summary>
      <param name="stage">Which shader stage will consume the constant data</param>
      <param name="data">The data that will be sent to the shader</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ICommandList.PushConstants(Aspose.ThreeD.Render.ShaderStage,System.Byte[],System.Int32)">
      <summary>
            Push the constant to the pipeline
            </summary>
      <param name="stage">Which shader stage will consume the constant data</param>
      <param name="data">The data that will be sent to the shader</param>
      <param name="size">Bytes to write to the pipeline</param>
    </member>
    <member name="T:Aspose.ThreeD.Render.InitializationException">
      <summary>
            Exceptions in render pipeline initialization
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.InitializationException.#ctor">
      <summary>
            Initialize an <see cref="T:Aspose.ThreeD.Render.InitializationException" /> instance
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.InitializationException.#ctor(System.String)">
      <summary>
            Initialize an <see cref="T:Aspose.ThreeD.Render.InitializationException" /> instance with specifid exception message.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.RenderFactory">
      <summary>
            RenderFactory creates all resources that represented in rendering pipeline.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderTexture(Aspose.ThreeD.Render.RenderParameters,System.Int32,System.Int32,System.Int32)">
      <summary>
            Create a render target that renders to the texture
            </summary>
      <param name="parameters">Render parameters to create the render texture</param>
      <param name="targets">How many color output targets</param>
      <param name="width">The width of the render texture</param>
      <param name="height">The height of the render texture</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderTexture(Aspose.ThreeD.Render.RenderParameters,System.Int32,System.Int32)">
      <summary>
            Create a render target contains 1 targets that renders to the texture
            </summary>
      <param name="parameters">Render parameters to create the render texture</param>
      <param name="width">The width of the render texture</param>
      <param name="height">The height of the render texture</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateDescriptorSet(Aspose.ThreeD.Render.ShaderProgram)">
      <summary>
            Create the descriptor set for specified shader program.
            </summary>
      <param name="shader">The shader program</param>
      <returns>A new descriptor set instance</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateCubeRenderTexture(Aspose.ThreeD.Render.RenderParameters,System.Int32,System.Int32)">
      <summary>
            Create a render target contains 1 cube texture
            </summary>
      <param name="parameters">Render parameters to create the render texture</param>
      <param name="width">The width of the render texture</param>
      <param name="height">The height of the render texture</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderWindow(Aspose.ThreeD.Render.RenderParameters,System.IntPtr)">
      <summary>
            Create a render target that renders to the native window.
            </summary>
      <param name="parameters">Render parameters to create the render window</param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderWindow(Aspose.ThreeD.Render.RenderParameters,Aspose.ThreeD.Render.WindowHandle)">
      <summary>
            Create a render target that renders to the native window.
            </summary>
      <param name="parameters">Render parameters to create the render window</param>
      <param name="handle">The handle of the window to render</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateVertexBuffer(Aspose.ThreeD.Utilities.VertexDeclaration)">
      <summary>
            Create an <see cref="T:Aspose.ThreeD.Render.IVertexBuffer" /> instance to store polygon's vertex information.
            </summary>
      <param name="declaration">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateIndexBuffer">
      <summary>
            Create an <see cref="T:Aspose.ThreeD.Render.IIndexBuffer" /> instance to store polygon's face information.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateTextureUnit(Aspose.ThreeD.Render.TextureType)">
      <summary>
            Create a texture unit that can be accessed by shader.
            </summary>
      <param name="textureType">Type of the texture</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateTextureUnit">
      <summary>
            Create a 2D texture unit that can be accessed by shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateShaderProgram(Aspose.ThreeD.Render.ShaderSource)">
      <summary>
            Create a <see cref="T:Aspose.ThreeD.Render.ShaderProgram" /> object
            </summary>
      <param name="shaderSource">The source code of the shader</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreatePipeline(Aspose.ThreeD.Render.ShaderProgram,Aspose.ThreeD.Render.RenderState,Aspose.ThreeD.Utilities.VertexDeclaration,Aspose.ThreeD.Render.DrawOperation)">
      <summary>
            Create a preconfigured graphics pipeline with preconfigured shader/render state/vertex declaration and draw operations.
            </summary>
      <param name="shader">The shader used in the rendering</param>
      <param name="renderState">The render state used in the rendering</param>
      <param name="vertexDeclaration">The vertex declaration of input vertex data</param>
      <param name="drawOperation">Draw operation</param>
      <returns>A new pipeline instance</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateUniformBuffer(System.Int32)">
      <summary>
            Create a new uniform buffer in GPU side with preallocated size.
            </summary>
      <param name="size">The size of the uniform buffer</param>
      <returns>The uniform buffer instance</returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.IRenderTarget">
      <summary>
            The base interface of render target
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.IRenderTarget.CreateViewport(Aspose.ThreeD.Entities.Camera,System.Drawing.Color,Aspose.ThreeD.Utilities.RelativeRectangle)">
      <summary>
            Create a viewport with specified background color and position/size in specified camera perspective.
            </summary>
      <param name="camera">The camera</param>
      <param name="backgroundColor">The background of the viewport</param>
      <param name="rect">Position and size of the viewport</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.IRenderTarget.CreateViewport(Aspose.ThreeD.Entities.Camera,Aspose.ThreeD.Utilities.RelativeRectangle)">
      <summary>
            Create a viewport with position/size in specified camera perspective.
            </summary>
      <param name="camera">The camera</param>
      <param name="rect">Position and size of the viewport</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.IRenderTarget.CreateViewport(Aspose.ThreeD.Entities.Camera)">
      <summary>
            Create a viewport in specified camera perspective.
            </summary>
      <param name="camera">The camera</param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.ThreeD.Render.IRenderTarget.Size">
      <summary>
            Gets or sets the size of the render target.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.IRenderTarget.Viewports">
      <summary>
            Gets all viewports that associated with this render target.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IRenderTexture">
      <summary>
            The interface of render texture
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.IRenderTexture.Targets">
      <summary>
            Color output targets.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.IRenderTexture.DepthTexture">
      <summary>
            Depth buffer texture
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IRenderWindow">
      <summary>
            IRenderWindow represents the native window created by operating system that supports rendering.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.CubeFace">
      <summary>
            Each face of the cube map texture 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CubeFace.PositiveX">
      <summary>
            The +X face
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CubeFace.NegativeX">
      <summary>
            The -X face
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CubeFace.PositiveY">
      <summary>
            The +Y face
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CubeFace.NegativeY">
      <summary>
            The -Y face
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CubeFace.PositiveZ">
      <summary>
            The +Z face
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CubeFace.NegativeZ">
      <summary>
            The -Z face
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.CubeFaceData`1">
      <summary>
            Data for each face of the cube map texture.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.PositiveX">
      <summary>
            Gets or sets the data for +X(Right) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Right">
      <summary>
            Gets or sets the data for +X(Right) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.NegativeX">
      <summary>
            Gets or sets the data for +X(Left) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Left">
      <summary>
            Gets or sets the data for +X(Left) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.PositiveY">
      <summary>
            Gets or sets the data for +Y(Top) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Top">
      <summary>
            Gets or sets the data for +Y(Top) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.NegativeY">
      <summary>
            Gets or sets the data for -Y(Bottom) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Bottom">
      <summary>
            Gets or sets the data for -Y(Bottom) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.PositiveZ">
      <summary>
            Gets or sets the data for +Z(Back) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Back">
      <summary>
            Gets or sets the data for +Z(Back) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.NegativeZ">
      <summary>
            Gets or sets the data for -Z(Front) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Front">
      <summary>
            Gets or sets the data for -Z(Front) face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Item(Aspose.ThreeD.Render.CubeFace)">
      <summary>
            Gets or sets the data for specified face
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ITextureCubemap">
      <summary>
            Cube map texture
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Load(Aspose.ThreeD.Render.CubeFaceData{Aspose.ThreeD.Render.TextureData})">
      <summary>
            Load texture content from specified <see cref="T:Aspose.ThreeD.Render.TextureData" /></summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Load(Aspose.ThreeD.Render.CubeFace,Aspose.ThreeD.Render.TextureData)">
      <summary>
            Load the data into specified face
            </summary>
      <param name="face">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.LoadFromFiles(Aspose.ThreeD.Render.CubeFaceData{System.String})">
      <summary>
            Load texture content from specified files
            </summary>
      <param name="fileNames">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Save(Aspose.ThreeD.Render.CubeFaceData{System.String},System.Drawing.Imaging.ImageFormat)">
      <summary>
            Save the cube's sides texture content to external files.
            </summary>
      <param name="path">File names to save.</param>
      <param name="format">Image format</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Save(Aspose.ThreeD.Render.CubeFaceData{System.Drawing.Bitmap})">
      <summary>
            Save the texture content to memory.
            </summary>
      <param name="bitmap">Result bitmap to save.</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Save(Aspose.ThreeD.Render.CubeFace,System.Drawing.Bitmap)">
      <summary>
            Save the specified side to memory
            </summary>
      <param name="side">
      </param>
      <param name="bitmap">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITextureCubemap.ToBitmap(Aspose.ThreeD.Render.CubeFace)">
      <summary>
            Convert the texture unit to <see cref="T:System.Drawing.Bitmap" /> instance
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.TextureType">
      <summary>
            The type of the <see cref="T:Aspose.ThreeD.Render.ITextureUnit" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.TextureType.Texture1D">
      <summary>
            1-dimensional texture
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.TextureType.Texture2D">
      <summary>
            2-dimnsional textur
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.TextureType.Texture3D">
      <summary>
            3-dimensional texture
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.TextureType.CubeMap">
      <summary>
            Cube map texture contains 6 2d textures
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.TextureType.Array2D">
      <summary>
            Multiple set of 2d textures
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ITextureUnit">
      <summary>
        <see cref="T:Aspose.ThreeD.Render.ITextureUnit" /> represents a texture in the memory that shared between GPU and CPU and can be sampled by the shader,
            where the <see cref="T:Aspose.ThreeD.Shading.Texture" /> only represents a reference to an external file.
            More details can be found https://en.wikipedia.org/wiki/Texture_mapping_unit
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Type">
      <summary>
            Gets the type of this texture unit.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Width">
      <summary>
            Gets the width of this texture.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Height">
      <summary>
            Gets the height of this texture.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Depth">
      <summary>
            Gets the height of this texture, for none-3D texture it's always 1.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.UWrap">
      <summary>
            Gets or sets the wrap mode for texture's U coordinate.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.VWrap">
      <summary>
            Gets or sets the wrap mode for texture's V coordinate.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.WWrap">
      <summary>
            Gets or sets the wrap mode for texture's W coordinate.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Minification">
      <summary>
            Gets or sets the filter mode for minification.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Magnification">
      <summary>
            Gets or sets the filter mode for magnification.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Mipmap">
      <summary>
            Gets or sets the filter mode for mipmap.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Scroll">
      <summary>
            Gets or sets the scroll of the UV coordinate.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ITextureUnit.Scale">
      <summary>
            Gets or sets the scale of the UV coordinate.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ITexture1D">
      <summary>
            1D texture
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture1D.Load(Aspose.ThreeD.Render.TextureData)">
      <summary>
            Load texture content from specified Bitmap
            </summary>
      <param name="bitmap">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture1D.Save(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Save the texture content to external file.
            </summary>
      <param name="path">File name to save.</param>
      <param name="format">Image format</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture1D.Save(System.Drawing.Bitmap)">
      <summary>
            Save the texture content to external file.
            </summary>
      <param name="bitmap">Result bitmap to save.</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture1D.ToBitmap">
      <summary>
            Convert the texture unit to <see cref="T:System.Drawing.Bitmap" /> instance
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ITexture2D">
      <summary>
            2D texture
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture2D.Load(Aspose.ThreeD.Render.TextureData)">
      <summary>
            Load texture content from specified Bitmap
            </summary>
      <param name="bitmap">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture2D.Save(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Save the texture content to external file.
            </summary>
      <param name="path">File name to save.</param>
      <param name="format">Image format</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture2D.Save(System.Drawing.Bitmap)">
      <summary>
            Save the texture content to external file.
            </summary>
      <param name="bitmap">Result bitmap to save.</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ITexture2D.ToBitmap">
      <summary>
            Convert the texture unit to <see cref="T:System.Drawing.Bitmap" /> instance
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.NamespaceDoc">
      <summary>
            All rendering related classes are defined in this namespace
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IPipeline">
      <summary>
            The prebaked sequence of operations to draw in GPU side.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.PixelFormat">
      <summary>
            The pixel's format used in texutre unit.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.Unknown">
      <summary>
            Unknown pixel format.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.L8">
      <summary>
            8-bit pixel format, all bits luminance.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.L16">
      <summary>
            16-bit pixel format, all bits luminance.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A8">
      <summary>
            8-bit pixel format, all bits alpha.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A4L4">
      <summary>
            8-bit pixel format, 4 bits alpha, 4 bits luminance.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.BYTE_LA">
      <summary>
            2 byte pixel format, 1 byte luminance, 1 byte alpha
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R5G6B5">
      <summary>16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.B5G6R5">
      <summary>16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R3G3B2">
      <summary>8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A4R4G4B4">
      <summary>16-bit pixel format, 4 bits for alpha, red, green and blue.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A1R5G5B5">
      <summary>16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R8G8B8">
      <summary>24-bit pixel format, 8 bits for red, green and blue.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.B8G8R8">
      <summary>24-bit pixel format, 8 bits for blue, green and red.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A8R8G8B8">
      <summary>32-bit pixel format, 8 bits for alpha, red, green and blue.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A8B8G8R8">
      <summary>32-bit pixel format, 8 bits for blue, green, red and alpha.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.B8G8R8A8">
      <summary>32-bit pixel format, 8 bits for blue, green, red and alpha.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R8G8B8A8">
      <summary>32-bit pixel format, 8 bits for red, green, blue and alpha.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.X8R8G8B8">
      <summary>32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue like A8R8G8B8, but alpha will get discarded</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.X8B8G8R8">
      <summary>32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red like A8B8G8R8, but alpha will get discarded</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A2R10G10B10">
      <summary>32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.A2B10G10R10">
      <summary>32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT1">
      <summary>DDS (DirectDraw Surface) DXT1 format.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT2">
      <summary>DDS (DirectDraw Surface) DXT2 format.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT3">
      <summary>DDS (DirectDraw Surface) DXT3 format.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT4">
      <summary>DDS (DirectDraw Surface) DXT4 format.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT5">
      <summary>DDS (DirectDraw Surface) DXT5 format.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_R">
      <summary>16-bit pixel format, 16 bits (float) for red</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_RGB">
      <summary>48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_RGBA">
      <summary>64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_R">
      <summary>32-bit pixel format, 32 bits (float) for red</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_RGB">
      <summary>96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_RGBA">
      <summary>128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_GR">
      <summary>32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_GR">
      <summary>64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.DEPTH">
      <summary>Depth texture format.</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.SHORT_RGBA">
      <summary>64-bit pixel format, 16 bits for red, green, blue and alpha</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.SHORT_GR">
      <summary>32-bit pixel format, 16-bit green, 16-bit red</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.SHORT_RGB">
      <summary>48-bit pixel format, 16 bits for red, green and blue</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R32_UINT">
      <summary>32-bit pixel format, 32 bits red (unsigned int).</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R32G32_UINT">
      <summary>64-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int).</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R32G32B32A32_UINT">
      <summary>128-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int), 32 bits green (unsigned int), 32 bits alpha (unsigned int).</summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PixelFormat.R8">
      <summary>8-bit pixel format, all bits red.</summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.PostProcessing">
      <summary>
            The post-processing effects
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.PostProcessing.Input">
      <summary>
            Input of this post-processing
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.PresetShaders">
      <summary>
            This defines the preset internal shaders used by the renderer.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PresetShaders.Default">
      <summary>
            Use the default shaders for phong/lambert/pbr materials
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PresetShaders.Customized">
      <summary>
            User's customized shader set
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.PushConstant">
      <summary>
            A utility to provide data to shader through push constant.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.#ctor">
      <summary>
            Constructor of the <see cref="T:Aspose.ThreeD.Render.PushConstant" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FMatrix4)">
      <summary>
            Write the matrix to the constant
            </summary>
      <param name="mat">The matrix to write</param>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Write(System.Int32)">
      <summary>
            Write a int value to the constant
            </summary>
      <param name="n">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Write(System.Single)">
      <summary>
            Write a float value to the constant
            </summary>
      <param name="f">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FVector4)">
      <summary>
            Write a 4-component vector to the constant
            </summary>
      <param name="vec">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FVector3)">
      <summary>
            Write a 3-component vector to the constant
            </summary>
      <param name="vec">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Write(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Write a 4-component vector to the constant
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="w">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.PushConstant.Commit(Aspose.ThreeD.Render.ShaderStage,Aspose.ThreeD.Render.ICommandList)">
      <summary>
            Commit prepared data to graphics pipeline.
            </summary>
      <param name="stage">
      </param>
      <param name="commandList">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Render.ShaderStage">
      <summary>
            Shader stage
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.ShaderStage.VertexShader">
      <summary>
            Vertex shader
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.ShaderStage.FragmentShader">
      <summary>
            Fragment shader
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.ShaderStage.GeometryShader">
      <summary>
            Geometry shader
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.ShaderStage.ComputeShader">
      <summary>
            Compute shader
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.Renderer">
      <summary>
            The context about renderer.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.ClearCache">
      <summary>
            Manually clear the cache.
            Aspose.3D will cache some objects like materials/geometries into internal types that compatible with the render pipeline.
            This should be manually called when scene has major changes.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.ShaderSet">
      <summary>
            Gets or sets the shader set that used to render the scene
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.Variables">
      <summary>
            Access to the internal variables used for rendering
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.PresetShaders">
      <summary>
            Gets or sets the preset shader set
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.RenderFactory">
      <summary>
            Gets the factory to build render-related objects.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.AssetDirectories">
      <summary>
            Directories that stored external assets
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.PostProcessings">
      <summary>
            Active post-processing chain
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.GetPostProcessing(System.String)">
      <summary>
            Gets a built-in post-processor that supported by the renderer.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.Execute(Aspose.ThreeD.Render.PostProcessing,Aspose.ThreeD.Render.IRenderTarget)">
      <summary>
            Execute an post processing on specified render target 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.EnableShadows">
      <summary>
            Gets or sets wheather to enabel shadows.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.RenderTarget">
      <summary>
            Specify the render target that the following render operations will be performed on.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.Node">
      <summary>
            Gets or sets the <see cref="P:Aspose.ThreeD.Render.Renderer.Node" /> instance used to provide world transform matrix.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.Frustum">
      <summary>
            Gets or sets the frustum that used to provide view matrix.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.RenderStage">
      <summary>
            Gets the current render stage.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.Material">
      <summary>
            Gets or sets the material that used to provide material information used by shaders.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.Shader">
      <summary>
            Gets or sets the shader instance used for rendering the geometry.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.BeginViewport(Aspose.ThreeD.Render.Viewport)">
      <summary>
            Begin rendering on specified viewport
             </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.BeginViewport(Aspose.ThreeD.Render.Viewport,Aspose.ThreeD.Entities.Frustum)">
      <summary>
            Begin rendering on specified viewport
             </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.EndViewport">
      <summary>
            Finished rendering on specified viewport
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.BeginTarget(Aspose.ThreeD.Render.IRenderTarget)">
      <summary>
            Begin render on specified render target 
            </summary>
      <param name="target">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.EndTarget">
      <summary>
            End rendering on specified render target.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.CreateRenderer">
      <summary>
            Creates a new <see cref="T:Aspose.ThreeD.Render.Renderer" /> with default profile.
            </summary>
      <exception cref="T:Aspose.ThreeD.Render.RendererException" />
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.Dispose">
      <summary>
            Dispose the <see cref="T:Aspose.ThreeD.Render.Renderer" /> and all related resources
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.Dispose(System.Boolean)">
      <summary>
            Dispose the <see cref="T:Aspose.ThreeD.Render.Renderer" /> and all related resources
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.Finalize">
      <summary>
            Finalizer of <see cref="T:Aspose.ThreeD.Render.Renderer" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.Renderer.entityRenderersByKey">
      <summary>
            Registered entity renderers
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Renderer.FallbackEntityRenderer">
      <summary>
            Gets or sets the fallback entity renderer when the entity has no special renderer defined.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.RegisterEntityRenderer(Aspose.ThreeD.Render.EntityRenderer)">
      <summary>
            Register the entity renderer for specified entity
            </summary>
      <param name="renderer">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.GetEntityRenderer(Aspose.ThreeD.Entity)">
      <summary>
            Get the entity renderer that used to render the specified entity, or return fallback renderer if no entity renderer was registered.
            </summary>
      <param name="entity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.GetCommandList(Aspose.ThreeD.Render.RenderQueueGroupId)">
      <summary>
            Gets the command list for specified render queue
            </summary>
      <param name="queueGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.Renderer.Render(Aspose.ThreeD.Render.IRenderTarget)">
      <summary>
            Render the specified target
            </summary>
      <param name="renderTarget">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Render.RendererVariableManager">
      <summary>
            This class manages variables used in rendering
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RendererVariableManager.renderer">
      <summary>
            The renderer creates this variable manager
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.WorldTime">
      <summary>
            Time in seconds
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.ShadowCaster">
      <summary>
            Position of shadow caster in world coordinate system
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.Shadowmap">
      <summary>
            The depth texture used for shadow mapping
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixLightSpace">
      <summary>
            Matrix for light space transformation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixViewProjection">
      <summary>
            Matrix for view and projection transformation.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixWorldViewProjection">
      <summary>
            Matrix for world view and projection transformation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixWorld">
      <summary>
            Matrix for world transformation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixWorldNormal">
      <summary>
            Matrix for converting normal from object to world space.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixProjection">
      <summary>
            Matrix for projection transformation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixView">
      <summary>
            Matrix for view transformation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.CameraPosition">
      <summary>
            Camera's position in world coordinate system
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.DepthBias">
      <summary>
            Depth bias for shadow mapping, default value is 0.001
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.ViewportSize">
      <summary>
            Size of viewport, measured in pixel
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RendererVariableManager.WorldAmbient">
      <summary>
            Ambient color defined in viewport.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.RenderParameters">
      <summary>
            Describe the parameters of the render target
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderParameters.DoubleBuffering">
      <summary>
            Gets or sets whether double buffer is used.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderParameters.ColorBits">
      <summary>
            Gets or sets how many bits will be used by color buffer.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderParameters.DepthBits">
      <summary>
            Gets or sets how many bits will be used by depth buffer.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderParameters.StencilBits">
      <summary>
            Gets or sets how many bits will be used in stencil buffer.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderParameters.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Render.PixelFormat" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.RenderQueueGroupId">
      <summary>
            The group id of render queue
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Background">
      <summary>
            Render queue for background
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Skies">
      <summary>
            Render queue for skies
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Geometries">
      <summary>
            Render queue for geometries
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Main">
      <summary>
            Render queue for main
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Opaque">
      <summary>
            Render queue for opaque objects
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Overlay">
      <summary>
            Render queue for overlays
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.IRenderable">
      <summary>
            Minimum render task
            Implement this so custom render operations can be enqueued to the render queue.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.IRenderable.Render(Aspose.ThreeD.Node,Aspose.ThreeD.Render.Renderer)">
      <summary>
            Perform render
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.RenderResource">
      <summary>
            The abstract class of all render resources
            All render resources will be disposed when the renderer is released.
            Classes like <see cref="T:Aspose.ThreeD.Entities.Mesh" />/<see cref="T:Aspose.ThreeD.Shading.Texture" /> will have a corresponding RenderResource
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderResource.Dispose">
      <summary>
            Dispose internal resources used by <see cref="T:Aspose.ThreeD.Render.RenderResource" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.RenderStage">
      <summary>
            The render stage
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderStage.Idle">
      <summary>
            Renderer is idle
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderStage.ShadowMap">
      <summary>
            Renderer is rendering a shadow map
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderStage.Scene">
      <summary>
            Renderer is rendering the scene
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.RenderStage.PostProcessing">
      <summary>
            Renderer is rendering post processing effects.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.BlendFactor">
      <summary>
            Blend factor specify pixel arithmetic.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.Zero">
      <summary>
            The blend factor is vec4(0)
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.One">
      <summary>
            The blend factor is vec4(1)
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.SrcColor">
      <summary>
            The blend factor is src.rgba
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusSrcColor">
      <summary>
            The blend factor is vec4(1) - src.rgba
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.DstColor">
      <summary>
             The blend factor is dst.rgba
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusDstColor">
      <summary>
            The blend factor is vec4(1) - dst.rgba
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.SrcAlpha">
      <summary>
            The blend factor is vec4(src.a)
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusSrcAlpha">
      <summary>
            The blend factor is vec4(1 - src.a)
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.DstAlpha">
      <summary>
            The blend factor is vec4(dst.a)
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusDstAlpha">
      <summary>
            The blend factor is vec4(1 - dst.a)
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.ConstantColor">
      <summary>
            The blend factor is c where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusConstantColor">
      <summary>
            The blend factor is vec4(1) - c where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.ConstantAlpha">
      <summary>
            The blend factor is vec4(c.a) where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusConstantAlpha">
      <summary>
            The blend factor is vec4(1 - c.a) where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.BlendFactor.SrcAlphaSaturate">
      <summary>
            The blend factor is min(src.a, 1 - dst.a)
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.CompareFunction">
      <summary>
            The compare function used in depth/stencil testing.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.Never">
      <summary>
            Never passes
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.Less">
      <summary>
            Pass if the incoming value is less than the stored value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.Equal">
      <summary>
            Pass if the incoming value is equal to the stored value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.LEqual">
      <summary>
            Pass if the incoming value is less than or equal to the stored value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.Greater">
      <summary>
            Pass if the incoming value is greater than the stored value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.NotEqual">
      <summary>
            Pass if the incoming value is not equal to the stored value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.GEqual">
      <summary>
            Pass if the incoming value is greater than or equal to the stored value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CompareFunction.Always">
      <summary>
            Always passes
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.FrontFace">
      <summary>
            Define front- and back-facing polygons
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.FrontFace.Clockwise">
      <summary>
            Clockwise order is front face
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.FrontFace.CounterClockwise">
      <summary>
            Counter-clockwise order is front face
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.CullFaceMode">
      <summary>
            What face to cull
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CullFaceMode.Back">
      <summary>
            Only back faces are culled
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CullFaceMode.Front">
      <summary>
            Only front faces are culled
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.CullFaceMode.Both">
      <summary>
            Both back/front faces are culled, doesn't affect line/point rendering.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.PolygonMode">
      <summary>
            The polygon rasterization mode
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PolygonMode.Point">
      <summary>
            Polygon control points are drawed as points.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PolygonMode.Line">
      <summary>
            Boundary edges of the polygon are drawn as line segments.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.PolygonMode.Fill">
      <summary>
            The interior of the polygon is filled.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.StencilAction">
      <summary>
            The stencil test actions
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.Keep">
      <summary>
            Keep the current value
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.Zero">
      <summary>
            Sets the stencil buffer value to 0
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.Replace">
      <summary>
            Sets the stencil buffer to ref where defined in <see cref="P:Aspose.ThreeD.Render.RenderState.StencilReference" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.Increment">
      <summary>
            Increments the current stencil buffer value, clamps to maximum value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.IncrementWrap">
      <summary>
            Increments the current stencil buffer value and wrap it to zero when it reaches maximum value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.Decrement">
      <summary>
            Increments the current stencil buffer value, clamps to 0.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.DecrementWrap">
      <summary>
            Decrements the current stencil buffer value and wrap it to maximum value when it reaches zero.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Render.StencilAction.Invert">
      <summary>
            Bitwise inverts the current stencil buffer value.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.StencilState">
      <summary>
            Stencil states per face.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.StencilState.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.StencilState.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.StencilState.Compare">
      <summary>
            Gets or sets the compare function used in stencil test 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.StencilState.FailAction">
      <summary>
            Gets or sets the stencil action when stencil test fails.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.StencilState.DepthFailAction">
      <summary>
            Gets or sets the stencil action when stencil test pass but depth test fails.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.StencilState.PassAction">
      <summary>
            Gets or sets the stencil action when both stencil test and depth test passes.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.RenderState">
      <summary>
            Render state used by <see cref="T:Aspose.ThreeD.Render.IRenderable" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderState.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.RenderState" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderState.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderState.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.Blend">
      <summary>
            Enable or disable the fragment blending.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.BlendColor">
      <summary>
            Gets or sets the blend color where used in <see cref="F:Aspose.ThreeD.Render.BlendFactor.ConstantColor" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.SourceBlendFactor">
      <summary>
            Gets or sets how the color is blended.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.DestinationBlendFactor">
      <summary>
            Gets or sets how the color is blended.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.CullFace">
      <summary>
            Enable or disable cull face
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.CullFaceMode">
      <summary>
            Gets or sets which face will be culled.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.FrontFace">
      <summary>
            Gets or sets which order is front face.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.DepthTest">
      <summary>
            Enable or disable the depth test.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.DepthMask">
      <summary>
            Enable or disable the depth writing.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.DepthFunction">
      <summary>
            Gets or sets the compare function used in depth test
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.StencilTest">
      <summary>
            Enable or disable the stencil test.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.StencilReference">
      <summary>
            Gets or sets the reference value for the stencil test.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.StencilMask">
      <summary>
            Gets or sets the mask that is ANDed with the both reference and stored stencil value when test is done.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.StencilFrontFace">
      <summary>
            Gets the stencil state for front face.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.StencilBackFace">
      <summary>
            Gets the stencil state for back face.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.ScissorTest">
      <summary>
            Enable or disable scissor test
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.ScissorBox">
      <summary>
            Gets or sets the scissor box
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.RenderState.PolygonMode">
      <summary>
            Gets or sets the polygon's render mode.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderState.Dispose">
      <summary>
            Dispose the <see cref="T:Aspose.ThreeD.Render.RenderState" /> and release all internal resources.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.RenderState.CompareTo(Aspose.ThreeD.Render.RenderState)">
      <summary>
            Compare the render state with another instance
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.ShaderException">
      <summary>
            Shader related exceptions
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ShaderException.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderException" /></summary>
      <param name="message">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Render.ShaderVariable">
      <summary>
            Shader variable 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ShaderVariable.#ctor(System.String)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderVariable" /></summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.ShaderVariable.#ctor(System.String,Aspose.ThreeD.Render.ShaderStage)">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderVariable" /></summary>
      <param name="name">
      </param>
      <param name="shaderStage">Which shader stage will this variable be used</param>
    </member>
    <member name="P:Aspose.ThreeD.Render.ShaderVariable.Name">
      <summary>
            Gets the name of this variable
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ShaderProgram">
      <summary>
            The shader program
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ShaderProgram.Dispose">
      <summary>
            Dispose the shader and release all internal resources.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ShaderSet">
      <summary>
            Shader programs for each kind of materials
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ShaderSet.Lambert">
      <summary>
            Gets or sets the shader that used to render the lambert material
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ShaderSet.Phong">
      <summary>
            Gets or sets the shader that used to render the phong material
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ShaderSet.Pbr">
      <summary>
            Gets or sets the shader that used to render the PBR material
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.ShaderSet.Fallback">
      <summary>
            Gets or sets the fallback shader when required shader is unavailable
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ShaderSet.#ctor">
      <summary>
            Construct the instance of <see cref="T:Aspose.ThreeD.Render.ShaderSet" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.ShaderSet.Dispose">
      <summary>
            Dispose this instance and release all shader programs. 
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.ShaderSource">
      <summary>
            The source code of shader
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.GLSLSource">
      <summary>
            The source code of shaders in GLSL
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.GLSLSource.ComputeShader">
      <summary>
            Gets or sets the source code of the compute shader.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.GLSLSource.GeometryShader">
      <summary>
            Gets or sets the source code of the geometry shader.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.GLSLSource.VertexShader">
      <summary>
            Gets or sets the source code of the vertex shader
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.GLSLSource.FragmentShader">
      <summary>
            Gets or sets the source code of the fragmnt shader.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.GLSLSource.DefineInclude(System.String,System.String)">
      <summary>
            Define virtual file for #include in GLSL source code
            </summary>
      <param name="fileName">File name of the virtual file</param>
      <param name="content">
      </param>
    </member>
    <member name="T:Aspose.ThreeD.Render.SPIRVSource">
      <summary>
            The compiled shader in SPIR-V format.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.SPIRVSource.MaximumDescriptorSets">
      <summary>
            Maximum descriptor sets, default value is 10
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.SPIRVSource.ComputeShader">
      <summary>
            Gets or sets the source code of the compute shader.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.SPIRVSource.GeometryShader">
      <summary>
            Gets or sets the source code of the geometry shader.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.SPIRVSource.VertexShader">
      <summary>
            Gets or sets the source code of the vertex shader
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.SPIRVSource.FragmentShader">
      <summary>
            Gets or sets the source code of the fragmnt shader.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.SPIRVSource.#ctor">
      <summary>
            Constructor of SPIR-V based shader sources.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.TextureData">
      <summary>
            This class contains the raw data and format definition of a texture.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.TextureData.Data">
      <summary>
            Raw bytes of pixel data
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.TextureData.Width">
      <summary>
            Number of horizontal pixels
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.TextureData.Height">
      <summary>
            Number of vertical pixels
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.TextureData.Stride">
      <summary>
            Number of bytes of a scanline.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.TextureData.BytesPerPixel">
      <summary>
            Number of bytes of a pixel
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.TextureData.PixelFormat">
      <summary>
            The pixel's format
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Byte[])">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.TextureData" /></summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="stride">
      </param>
      <param name="bytesPerPixel">
      </param>
      <param name="pixelFormat">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Aspose.ThreeD.Render.PixelFormat,System.Byte[])">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.TextureData" /></summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="stride">
      </param>
      <param name="bytesPerPixel">
      </param>
      <param name="pixelFormat">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.#ctor">
      <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.TextureData" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.FromBitmap(System.Drawing.Bitmap)">
      <summary>
            Convert a <see cref="T:System.Drawing.Bitmap" /> to <see cref="T:Aspose.ThreeD.Render.TextureData" /></summary>
      <param name="bitmap">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.ToBitmap">
      <summary>
            Convert the TextureData to a <see cref="T:System.Drawing.Bitmap" /> instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.FromStream(System.IO.Stream)">
      <summary>
            Load a texture from stream
            </summary>
      <param name="stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.TextureData.FromFile(System.String)">
      <summary>
            Load a texture from file
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.Viewport">
      <summary>
            A <see cref="T:Aspose.ThreeD.Render.IRenderTarget" /> contains at least one viewport for rendering the scene.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.Frustum">
      <summary>
            Gets or sets the camera of this <see cref="T:Aspose.ThreeD.Render.Viewport" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.Enabled">
      <summary>
            Enable or disable this viewport.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.RenderTarget">
      <summary>
            Gets the render target that created this viewport.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.Area">
      <summary>
            Gets or sets the area of the viewport in render target.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.ZOrder">
      <summary>
            Gets or sets the Z-order of the viewport. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.BackgroundColor">
      <summary>
            Gets or sets the background color of the viewport.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Render.Viewport.DepthClear">
      <summary>
            Gets or sets the depth value used when clear the viewport with depth buffer bit set.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Render.DescriptorSetUpdater">
      <summary>
            This class allows to update the <see cref="T:Aspose.ThreeD.Render.IDescriptorSet" /> in a chain operation.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Dispose">
      <summary>
            Dispose the updater and commit the changes to hardware device.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(Aspose.ThreeD.Render.IBuffer,System.Int32,System.Int32)">
      <summary>
            Bind the buffer to current descriptor set
            </summary>
      <param name="buffer">Which buffer to bind</param>
      <param name="offset">Offset of the buffer to bind</param>
      <param name="size">Size of the buffer to bind</param>
      <returns>Return current instance for chaining operation</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(Aspose.ThreeD.Render.IBuffer)">
      <summary>
            Bind the entire buffer to current descriptor
            </summary>
      <param name="buffer">
      </param>
      <returns>Return current instance for chaining operation</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(System.Int32,Aspose.ThreeD.Render.IBuffer)">
      <summary>
            Bind the buffer to current descriptor set at specified binding location.
            </summary>
      <param name="binding">Binding location</param>
      <param name="buffer">The entire buffer to bind</param>
      <returns>Return current instance for chaining operation</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(System.Int32,Aspose.ThreeD.Render.IBuffer,System.Int32,System.Int32)">
      <summary>
            Bind the buffer to current descriptor set at specified binding location.
            </summary>
      <param name="binding">Binding location</param>
      <param name="buffer">The buffer to bind</param>
      <param name="offset">Offset of the buffer to bind</param>
      <param name="size">Size of the buffer to bind</param>
      <returns>Return current instance for chaining operation</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(Aspose.ThreeD.Render.ITextureUnit)">
      <summary>
            Bind the texture unit to current descriptor set
            </summary>
      <param name="texture">The texture unit to bind</param>
      <returns>Return current instance for chaining operation</returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(System.Int32,Aspose.ThreeD.Render.ITextureUnit)">
      <summary>
            Bind the texture unit to current descriptor set
            </summary>
      <param name="binding">The binding location</param>
      <param name="texture">The texture unit to bind</param>
      <returns>Return current instance for chaining operation</returns>
    </member>
    <member name="T:Aspose.ThreeD.Render.WindowHandle">
      <summary>
            Encapsulated window handle for different platforms.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Render.WindowHandle.FromGdk(System.IntPtr)">
      <summary>
            The GdkWindow* instance
            </summary>
      <param name="window">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.WindowHandle.FromXcb(System.IntPtr,System.IntPtr)">
      <summary>
            Create <see cref="T:Aspose.ThreeD.Render.WindowHandle" /> from an XCB surface.
            </summary>
      <param name="connection">The connection to the X server</param>
      <param name="surface">The handle of the surface</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.WindowHandle.FromWayland(System.IntPtr,System.IntPtr)">
      <summary>
            Create <see cref="T:Aspose.ThreeD.Render.WindowHandle" /> from a Wayland surface
            </summary>
      <param name="display">The display instance of Wayland server</param>
      <param name="surface">The handle of the surface</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.WindowHandle.FromXlib(System.IntPtr,System.IntPtr)">
      <summary>
            Create <see cref="T:Aspose.ThreeD.Render.WindowHandle" /> from an Xlib window
            </summary>
      <param name="display">The display instance of the X server</param>
      <param name="window">The handle of the window</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Render.WindowHandle.FromWin32(System.IntPtr)">
      <summary>
            The native HWND instance in Windows environment.
            </summary>
      <param name="hWnd">The handle of the natiev Win32 window</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.AssetInfo">
      <summary>
            Information of asset.
            Asset information can be attached to a <see cref="T:Aspose.ThreeD.Scene" />.
            Child <see cref="T:Aspose.ThreeD.Scene" /> can have its own <see cref="T:Aspose.ThreeD.AssetInfo" /> to override parent's definition.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.AssetInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.AssetInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.AssetInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.AssetInfo" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.CreationTime">
      <summary>
            Gets or Sets the creation time of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.ModificationTime">
      <summary>
            Gets or Sets the modification time of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Ambient">
      <summary>
            Gets or Sets the default ambient color of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Url">
      <summary>
            Gets or Sets the URL of this asset.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.ApplicationVendor">
      <summary>
            Gets or sets the application vendor's name
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.ApplicationName">
      <summary>
            Gets or sets the application that created this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.ApplicationVersion">
      <summary>
            Gets or sets the version of the application that created this asset.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Title">
      <summary>
            Gets or sets the title of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Subject">
      <summary>
            Gets or sets the subject of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Author">
      <summary>
            Gets or sets the author of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Keywords">
      <summary>
            Gets or sets the keywords of this asset
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Revision">
      <summary>
            Gets or sets the revision number of this asset, usually used in version control system.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.Comment">
      <summary>
            Gets or sets the comment of this asset.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.UnitName">
      <summary>
            Gets or sets the unit of length used in this asset.
            e.g. cm/m/km/inch/feet
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.UnitScaleFactor">
      <summary>
            Gets or sets the scale factor to real-world meter.
            </summary>
      <remarks>
            This is ignored during serialization if the unit name is null.
            </remarks>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.CoordinatedSystem">
      <summary>
            Gets or sets the coordinate system used in this asset.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.AssetInfo.UpVector">
      <summary>
            Gets or sets the up-vector used in this asset.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Axis">
      <summary>
            The coordinate axis. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Axis.XAxis">
      <summary>
            The X axis.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Axis.YAxis">
      <summary>
            The Y axis.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Axis.ZAxis">
      <summary>
            The Z axis.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.CoordinatedSystem">
      <summary>
            The left handed or right handed coordinate system.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.CoordinatedSystem.RightHanded">
      <summary>
            The right handed.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.CoordinatedSystem.LeftHanded">
      <summary>
            The left handed.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.BonePose">
      <summary>
            The <see cref="T:Aspose.ThreeD.BonePose" /> contains the transformation matrix for a bone node
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.BonePose.Node">
      <summary>
            Gets or sets the scene node, points to a skinned skeleton node
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.BonePose.Matrix">
      <summary>
            Gets or sets the transform matrix of the node in current pose. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.BonePose.IsLocal">
      <summary>
            Gets or sets if the matrix is defined in local coordinate.
            </summary>
      <value>true if this instance is local space; otherwise, false means global space.</value>
    </member>
    <member name="T:Aspose.ThreeD.CustomObject">
      <summary>
            Meta data or custom objects used in 3D files are managed by this class.
            All custom properties are saved as dynamic properties.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.CustomObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.CustomObject" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.CustomObject.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.CustomObject" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="T:Aspose.ThreeD.Entity">
      <summary>
            The base class of all entities.
            Entity represents a concrete object that attached under a node like <see cref="T:Aspose.ThreeD.Entities.Light" />/<see cref="T:Aspose.ThreeD.Entities.Geometry" />.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entity.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entity" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Entity.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entity" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entity.ParentNodes">
      <summary>
            Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing
            </summary>
      <value>The nodes.</value>
    </member>
    <member name="P:Aspose.ThreeD.Entity.Excluded">
      <summary>
            Gets or sets wheather to exclude this entity during exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Entity.ParentNode">
      <summary>
            Gets or sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.
            </summary>
      <value>The parent node.</value>
    </member>
    <member name="M:Aspose.ThreeD.Entity.GetBoundingBox">
      <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Entity.GetEntityRendererKey">
      <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.FileFormatType">
      <summary>
            File format type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.FBX">
      <summary>
            FBX file format type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.STL">
      <summary>
            STL file format type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.WavefrontOBJ">
      <summary>
            Wavefront OBJ format type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.Discreet3DS">
      <summary>
            Discreet 3D Studio's file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.COLLADA">
      <summary>
            Khronos Group's Collada file format.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.Universal3D">
      <summary>
            Universal 3D file format type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.PDF">
      <summary>
            Portable Document Format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.GLTF">
      <summary>
            Khronos Group's glTF
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.DXF">
      <summary>
            AutoCAD DXF
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.PLY">
      <summary>
            Polygon File Format or Stanford Triangle Format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.X">
      <summary>
            DirectX's X File
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.Draco">
      <summary>
            Google Draco Mesh
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.Microsoft3MF">
      <summary>
            3D Manufacturing Format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.Rvm">
      <summary>
            AVEVA Plant Design Management System Model.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.ASE">
      <summary>
            3D Studio Max's ASCII Scene Exporter format.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.SiemensJT">
      <summary>
            Siemen PLM Software NX's JT File
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.AMF">
      <summary>
            Additive manufacturing file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.VRML">
      <summary>
            The Virtual Reality Modeling Language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.HTML5">
      <summary>
            HTML5 File
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormatType.Aspose3DWeb">
      <summary>
            Aspose.3D Web format.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.FileFormatType.ToString">
      <summary>
            Get the name of this file format type
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="M:Aspose.ThreeD.FileFormatType.ToString" />.</returns>
    </member>
    <member name="T:Aspose.ThreeD.FileContentType">
      <summary>
            File content type
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileContentType.Binary">
      <summary>
            Binary format type, such as binary FBX, binary STL
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileContentType.ASCII">
      <summary>
            ASCII format type, such as ASCII FBX, ASCII STL
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.FileFormat">
      <summary>
            File format definition
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX6100ASCII">
      <summary>
            ASCII FBX file format, with 6.1.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX6100Binary">
      <summary>
            Binary FBX file format, with 6.1.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7200ASCII">
      <summary>
            ASCII FBX file format, with 7.2.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7200Binary">
      <summary>
            Binary FBX file format, with 7.2.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7300ASCII">
      <summary>
            ASCII FBX file format, with 7.3.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7300Binary">
      <summary>
            Binary FBX file format, with 7.3.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7400ASCII">
      <summary>
            ASCII FBX file format, with 7.4.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7400Binary">
      <summary>
            Binary FBX file format, with 7.4.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7500ASCII">
      <summary>
            ASCII FBX file format, with 7.5.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.FBX7500Binary">
      <summary>
            Binary FBX file format, with 7.5.0 version
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.STLBinary">
      <summary>
            Binary STL file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.STLASCII">
      <summary>
            ASCII STL file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.WavefrontOBJ">
      <summary>
            Wavefront's Obj file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.Discreet3DS">
      <summary>
            3D Studio's file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.Collada">
      <summary>
            Collada file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.Universal3D">
      <summary>
            Universal3D file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.GLTF">
      <summary>
            Khronos Group's glTF
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.GLTF2">
      <summary>
            Khronos Group's glTF version 2.0
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.GLTF_Binary">
      <summary>
            Khronos Group's glTF in Binary format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.GLTF2_Binary">
      <summary>
            Khronos Group's glTF version 2.0
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.PDF">
      <summary>
            Adobe's Portable Document Format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.DXF">
      <summary>
            AutoCAD DXF
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.PLY">
      <summary>
            Polygon File Format or Stanford Triangle Format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.XBinary">
      <summary>
            DirectX X File in binary format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.XText">
      <summary>
            DirectX X File in binary format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.Draco">
      <summary>
            Google Draco Mesh
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.Microsoft3MF">
      <summary>
            Microsoft 3D Manufacturing Format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.RvmText">
      <summary>
            AVEVA Plant Design Management System Model in text format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.RvmBinary">
      <summary>
            AVEVA Plant Design Management System Model in binary format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.ASE">
      <summary>
            3D Studio Max's ASCII Scene Exporter format.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.SiemensJT8">
      <summary>
            Siemens JT File Version 8
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.SiemensJT9">
      <summary>
            Siemens JT File Version 9
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.AMF">
      <summary>
            Additive manufacturing file format
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.VRML">
      <summary>
            The Virtual Reality Modeling Language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.Aspose3DWeb">
      <summary>
            Aspose.3D Web format.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.FileFormat.HTML5">
      <summary>
            HTML5 File
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.FileFormat.Version">
      <summary>
            Gets file format version
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.FileFormat.Extension">
      <summary>
            Gets the extension name of this type.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.FileFormat.ContentType">
      <summary>
            Gets file format content type
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.FileFormat.FileFormatType">
      <summary>
            Gets file format type
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.FileFormat.Detect(System.IO.Stream,System.String)">
      <summary>
            Detect the file format from data stream, file name is optional for guessing types that has no magic header.
            </summary>
      <param name="stream">
      </param>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.FileFormat.Detect(System.String)">
      <summary>
            Detect the file format from file name, file must be readable so Aspose.3D can detect the file format through file header.
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.FileFormat.CreateLoadOptions">
      <summary>
            Create a default load options for this file format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.FileFormat.CreateSaveOptions">
      <summary>
            Create a default save options for this file format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.FileFormat.ToString">
      <summary>
            Formats to string
            </summary>
      <returns>Object string</returns>
    </member>
    <member name="T:Aspose.ThreeD.SceneObject">
      <summary>
            The root class of objects that will be stored inside a scene.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.SceneObject.Scene">
      <summary>
            Gets the scene that this object belongs to
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.SceneObject.#ctor(System.String)">
      <summary>
            Initialize an SceneObject with a default name
            </summary>
      <param name="name">The name of this instance</param>
    </member>
    <member name="M:Aspose.ThreeD.SceneObject.#ctor">
      <summary>
            Initialize an SceneObject.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.NodeVisitor">
      <summary>
            A callback to travel through the whole node hierarchy.
            </summary>
      <param name="node">Node being visited</param>
      <returns>Return false to stop travelling</returns>
    </member>
    <member name="T:Aspose.ThreeD.Node">
      <summary>
            Represents an element in the scene graph.
            A scene graph is a tree of Node objects. The tree management services are self contained in this class.
            Note the Aspose.3D SDK does not test the validity of the constructed scene graph. It is the responsibility of the caller to make sure that it does not generate cyclic graphs in a node hierarchy.
            Besides the tree management, this class defines all the properties required to describe the position of the object in the scene. This information include the basic Translation, Rotation and Scaling properties and the more advanced options for pivots, limits, and IK joints attributes such the stiffness and dampening.
            When it is first created, the Node object is "empty" (i.e: it is an object without any graphical representation that only contains the position information). In this state, it can be used to represent parents in the node tree structure but not much more. The normal use of this type of objects is to add them an entity that will specialize the node (see the "Entity").
            The entity is an object in itself and is connected to the the Node. This also means that the same entity can be shared among multiple nodes. Camera, Light, Mesh, etc... are all entities and they all derived from the base class Entity.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Node.AssetInfo">
      <summary>
            Per-node asset info
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Node.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Node" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Node.#ctor(System.String,Aspose.ThreeD.Entity)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Node" /> class.
            </summary>
      <param name="name">Name.</param>
      <param name="entity">Default entity.</param>
    </member>
    <member name="M:Aspose.ThreeD.Node.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Node" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="P:Aspose.ThreeD.Node.Visible">
      <summary>
            Gets or sets to show the node
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Node.ChildNodes">
      <summary>
            Gets the children nodes.
            </summary>
      <value>The nodes.</value>
    </member>
    <member name="M:Aspose.ThreeD.Node.CreateChildNode">
      <summary>
            Creates a child node
            </summary>
      <returns>The new child node.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.CreateChildNode(System.String)">
      <summary>
            Create a new child node with given node name
            </summary>
      <param name="nodeName">The new child node's name</param>
      <returns>The new child node.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.CreateChildNode(Aspose.ThreeD.Entity)">
      <summary>
            Create a new child node with given entity attached
            </summary>
      <param name="entity">Default entity attached to the node</param>
      <returns>The new child node.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.CreateChildNode(System.String,Aspose.ThreeD.Entity)">
      <summary>
            Create a new child node with given node name
            </summary>
      <param name="nodeName">The new child node's name</param>
      <param name="entity">Default entity attached to the node</param>
      <returns>The new child node.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.CreateChildNode(System.String,Aspose.ThreeD.Entity,Aspose.ThreeD.Shading.Material)">
      <summary>
            Create a new child node with given node name, and attach specified entity and a material
            </summary>
      <param name="nodeName">The new child node's name</param>
      <param name="entity">Default entity attached to the node</param>
      <param name="material">The material attached to the node</param>
      <returns>The new child node.</returns>
    </member>
    <member name="P:Aspose.ThreeD.Node.Entity">
      <summary>
            Gets or sets the first entity attached to this node, if sets, will clear other entities.
            </summary>
      <value>The node entity.</value>
    </member>
    <member name="P:Aspose.ThreeD.Node.Excluded">
      <summary>
            Gets or sets wheather to exclude this node and all child nodes/entities during exporting.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Node.Entities">
      <summary>
            Gets all node entities.
            </summary>
      <value>The node entities.</value>
    </member>
    <member name="P:Aspose.ThreeD.Node.MetaDatas">
      <summary>
            Gets the meta data defined in this node.
            </summary>
      <value>The meta datas.</value>
    </member>
    <member name="P:Aspose.ThreeD.Node.Materials">
      <summary>
            Gets the materials associated with this node.
            </summary>
      <value>The materials.</value>
    </member>
    <member name="P:Aspose.ThreeD.Node.Material">
      <summary>
            Gets or sets the first material associated with this node, if sets, will clear other materials
            </summary>
      <value>The material.</value>
    </member>
    <member name="P:Aspose.ThreeD.Node.ParentNode">
      <summary>
            Gets or sets the parent node.
            </summary>
      <value>The parent node.</value>
    </member>
    <member name="P:Aspose.ThreeD.Node.Transform">
      <summary>
            Gets the local transform.
            </summary>
      <value>The transform.</value>
    </member>
    <member name="M:Aspose.ThreeD.Node.EvaluateGlobalTransform(System.Boolean)">
      <summary>
            Evaluate the global transform, include the geometric transform or not.
            </summary>
      <param name="withGeometricTransform">Whether the geometric transform is needed.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.ThreeD.Node.GlobalTransform">
      <summary>
            Gets the global transform.
            </summary>
      <value>The global transform.</value>
    </member>
    <member name="M:Aspose.ThreeD.Node.GetChild(System.Int32)">
      <summary>
            Gets the child node at specified index.
            </summary>
      <returns>The child.</returns>
      <param name="index">Index.</param>
    </member>
    <member name="M:Aspose.ThreeD.Node.GetChild(System.String)">
      <summary>
            Gets the child node with the specified name
            </summary>
      <param name="nodeName">The child name to find.</param>
      <returns>The child.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.GetEntity``1">
      <summary>
            Gets the first entity with type T.
            </summary>
      <returns>The first node enetity with type T.</returns>
      <typeparam name="T">The first type parameter.</typeparam>
    </member>
    <member name="M:Aspose.ThreeD.Node.Accept(Aspose.ThreeD.NodeVisitor)">
      <summary>
            Walks through all descendant nodes(including the current node) and call the visitor with the node.
            Visitor can break the walkthrough by returning false
            </summary>
      <param name="visitor">Visitor callback to visit the node</param>
      <returns>true means visitor has broke the walk through.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.ToString">
      <summary>
            Gets the string reprensentation of this node.
            </summary>
      <returns>The string representation of this node for debugging.</returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.GetBoundingBox">
      <summary>
            Calculate the bounding box of the node
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.AddEntity(Aspose.ThreeD.Entity)">
      <summary>
            Add an entity to the node.
            </summary>
      <param name="entity">The entity to be attached to the node</param>
    </member>
    <member name="M:Aspose.ThreeD.Node.AddChildNode(Aspose.ThreeD.Node)">
      <summary>
            Add a child node to this node
            </summary>
      <param name="node">The child node to be attached</param>
    </member>
    <member name="M:Aspose.ThreeD.Node.SelectSingleObject(System.String)">
      <summary>
            Select single object under current node using XPath-like query syntax.
            </summary>
      <param name="path">
      </param>
      <exception cref="T:Aspose.ThreeD.Utilities.ParseException">ParseException will be thrown if the path contains malformed query.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Node.SelectObjects(System.String)">
      <summary>
            Select multiple objects under current node using XPath-like query syntax.
            </summary>
      <param name="path">
      </param>
      <exception cref="T:Aspose.ThreeD.Utilities.ParseException">ParseException will be thrown if the path contains malformed query.</exception>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.ThreeD.PoseType">
      <summary>
            Pose type.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PoseType.BindPose">
      <summary>
            The bind pose.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.PoseType.Snapshot">
      <summary>
            The rest pose, means it's a snapshot of the bind pose.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Pose">
      <summary>
            The pose is used to store transformation matrix when the geometry is skinned.
            The pose is a set of <see cref="T:Aspose.ThreeD.BonePose" />, each <see cref="T:Aspose.ThreeD.BonePose" /> saves the concrete transformation information of the bone node.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Pose.PoseType">
      <summary>
            Gets or sets the type of the pose.
            </summary>
      <value>The type of the pose.</value>
    </member>
    <member name="P:Aspose.ThreeD.Pose.BonePoses">
      <summary>
            Gets all <see cref="T:Aspose.ThreeD.BonePose" />.
            </summary>
      <value>The nodes.</value>
    </member>
    <member name="M:Aspose.ThreeD.Pose.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Pose" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.Pose.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Pose" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Pose.AddBonePose(Aspose.ThreeD.Node,Aspose.ThreeD.Utilities.Matrix4,System.Boolean)">
      <summary>
            Saves pose transformation matrix for the given bone node. 
            </summary>
      <param name="node">Bone Node.</param>
      <param name="matrix">Transformation matrix.</param>
      <param name="localMatrix">If set to <c>true</c> means to use local matrix otherwise means global matrix.</param>
    </member>
    <member name="M:Aspose.ThreeD.Pose.AddBonePose(Aspose.ThreeD.Node,Aspose.ThreeD.Utilities.Matrix4)">
      <summary>
            Saves pose transformation matrix for the given bone node. 
            Global transformation matrix is implied.
            </summary>
      <param name="node">Bone Node.</param>
      <param name="matrix">Transformation matrix.</param>
    </member>
    <member name="T:Aspose.ThreeD.Scene">
      <summary>
            A scene is a top-level object that contains the nodes, geometries, materials, textures, animation, poses, sub-scenes and etcs.
            Scene can have sub-scenes, acts as multiple-document support in files like collada/blender/fbx
            Node hierarchy can be accessed through <see cref="P:Aspose.ThreeD.Scene.RootNode" /><see cref="P:Aspose.ThreeD.Scene.Library" /> is used to keep a reference of unattached objects during serialization(like meta data or custom objects) so it can be used as a library. 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Scene.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Scene.#ctor(Aspose.ThreeD.Entity)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene" /> class with an entity attached to a new node.
            </summary>
      <param name="entity">The initial entity that attached to the scene</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.#ctor(Aspose.ThreeD.Scene,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene" /> class as a sub-scene.
            </summary>
      <param name="parentScene">The parent scene.</param>
      <param name="name">Scene's name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene" /> class and open the file immediately.
            </summary>
      <param name="fileName">File's name to open.</param>
    </member>
    <member name="P:Aspose.ThreeD.Scene.SubScenes">
      <summary>
            Gets all sub-scenes
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Scene.Library">
      <summary>
            Objects that not directly used in scene hierarchy can be defined in Library.
            This is useful when you're using sub-scenes and put reusable components under sub-scenes.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Scene.AnimationClips">
      <summary>
            Gets all <see cref="T:Aspose.ThreeD.Animation.AnimationClip" /> defined in the scene.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Scene.CurrentAnimationClip">
      <summary>
            Gets or sets the active <see cref="T:Aspose.ThreeD.Animation.AnimationClip" /></summary>
    </member>
    <member name="M:Aspose.ThreeD.Scene.GetAnimationClip(System.String)">
      <summary>
            Gets a named <see cref="T:Aspose.ThreeD.Animation.AnimationClip" /></summary>
      <param name="name">The <see cref="T:Aspose.ThreeD.Animation.AnimationClip" />'s name to look up</param>
      <returns>Returned AnimationClip</returns>
    </member>
    <member name="P:Aspose.ThreeD.Scene.AssetInfo">
      <summary>
            Gets or sets the top-level asset information
            </summary>
      <value>The document info.</value>
    </member>
    <member name="P:Aspose.ThreeD.Scene.Poses">
      <summary>
            Gets all <see cref="T:Aspose.ThreeD.Pose" /> used in this scene.
            </summary>
      <value>The poses.</value>
    </member>
    <member name="P:Aspose.ThreeD.Scene.RootNode">
      <summary>
            Gets the root node of the scene.
            </summary>
      <value>The root node.</value>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Clear">
      <summary>
            Clears the scene content and restores the default settings.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Scene.CreateAnimationClip(System.String)">
      <summary>
            A shorthand function to create and register the <see cref="T:Aspose.ThreeD.Animation.AnimationClip" />
            The first <see cref="T:Aspose.ThreeD.Animation.AnimationClip" /> will be assigned to the <see cref="P:Aspose.ThreeD.Scene.CurrentAnimationClip" /></summary>
      <param name="name">Animation clip's name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.ThreeD.Scene.ReloadSceneAs(Aspose.ThreeD.FileFormat)">
      <summary>
            Reload the scene in specified format
            </summary>
      <param name="fmt">
      </param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
      <summary>
            Opens the scene from given stream using specified file format.
            </summary>
      <param name="stream">Input stream, user is responsible for closing the stream.</param>
      <param name="format">File format.</param>
      <param name="cancellationToken">Cancellation token to the load task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,Aspose.ThreeD.Formats.LoadOptions,System.Threading.CancellationToken)">
      <summary>
            Opens the scene from given stream using specified IO config.
            </summary>
      <param name="stream">Input stream, user is responsible for closing the stream.</param>
      <param name="options">More detailed configuration to open the stream.</param>
      <param name="cancellationToken">Cancellation token to the load task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
             Opens the scene from given stream
            </summary>
      <param name="stream">Input stream, user is responsible for closing the stream.</param>
      <param name="cancellationToken">Cancellation token to the load task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Open(System.String,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
      <summary>
            Opens the scene from given path using specified file format.
            </summary>
      <param name="fileName">File name.</param>
      <param name="format">File format.</param>
      <param name="cancellationToken">Cancellation token to the load task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Open(System.String,Aspose.ThreeD.Formats.LoadOptions,System.Threading.CancellationToken)">
      <summary>
            Opens the scene from given path using specified file format.
            </summary>
      <param name="fileName">File name.</param>
      <param name="options">More detailed configuration to open the stream.</param>
      <param name="cancellationToken">Cancellation token to the load task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Open(System.String,System.Threading.CancellationToken)">
      <summary>
            Opens the scene from given path
            </summary>
      <param name="fileName">File name.</param>
      <param name="cancellationToken">Cancellation token to the load task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Save(System.IO.Stream,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
      <summary>
            Saves the scene to stream using specified file format.
            </summary>
      <param name="stream">Input stream, user is responsible for closing the stream.</param>
      <param name="format">Format.</param>
      <param name="cancellationToken">Cancellation token to the save task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Save(System.IO.Stream,Aspose.ThreeD.Formats.SaveOptions,System.Threading.CancellationToken)">
      <summary>
            Saves the scene to stream using specified file format.
            </summary>
      <param name="stream">Input stream, user is responsible for closing the stream.</param>
      <param name="options">More detailed configuration to save the stream.</param>
      <param name="cancellationToken">Cancellation token to the save task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Save(System.String,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
      <summary>
            Saves the scene to specified path using specified file format.
            </summary>
      <param name="fileName">File name.</param>
      <param name="format">Format.</param>
      <param name="cancellationToken">Cancellation token to the save task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Save(System.String,Aspose.ThreeD.Formats.SaveOptions,System.Threading.CancellationToken)">
      <summary>
            Saves the scene to specified path using specified file format.
            </summary>
      <param name="fileName">File name.</param>
      <param name="options">More detailed configuration to save the stream.</param>
      <param name="cancellationToken">Cancellation token to the save task</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.String,System.Drawing.Size,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Render the scene into external file from given camera's perspective.
            </summary>
      <param name="camera">From which camera's perspective to render the scene</param>
      <param name="fileName">The file name of output file</param>
      <param name="size">The size of final rendered image</param>
      <param name="format">The image format of the output file</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.String,System.Drawing.Size,System.Drawing.Imaging.ImageFormat,Aspose.ThreeD.ImageRenderOptions)">
      <summary>
            Render the scene into external file from given camera's perspective.
            </summary>
      <param name="camera">From which camera's perspective to render the scene</param>
      <param name="fileName">The file name of output file</param>
      <param name="size">The size of final rendered image</param>
      <param name="format">The image format of the output file</param>
      <param name="options">The option to customize some internal settings.</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.Drawing.Bitmap)">
      <summary>
            Render the scene into bitmap from given camera's perspective.
            </summary>
      <param name="camera">From which camera's perspective to render the scene</param>
      <param name="bitmap">Target of the rendered result</param>
    </member>
    <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.Drawing.Bitmap,Aspose.ThreeD.ImageRenderOptions)">
      <summary>
            Render the scene into bitmap from given camera's perspective.
            </summary>
      <param name="camera">From which camera's perspective to render the scene</param>
      <param name="bitmap">Target of the rendered result</param>
      <param name="options">The option to customize some internal settings.</param>
    </member>
    <member name="T:Aspose.ThreeD.ImageRenderOptions">
      <summary>
            Options for <see cref="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.String,System.Drawing.Size,System.Drawing.Imaging.ImageFormat,Aspose.ThreeD.ImageRenderOptions)" /> and  <see cref="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.Drawing.Bitmap,Aspose.ThreeD.ImageRenderOptions)" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.ImageRenderOptions.BackgroundColor">
      <summary>
            The background color of the render result.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.ImageRenderOptions.AssetDirectories">
      <summary>
            Directories that stored external assets(like textures)
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.ImageRenderOptions.EnableShadows">
      <summary>
            Gets or sets wheather to render shadows.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.ImageRenderOptions.#ctor">
      <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.ImageRenderOptions" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Transform">
      <summary>
            A transform contains information that allow access to object's translate/scale/rotation or transform matrix at minimum cost
            This is used by local transform.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.GeometricTranslation">
      <summary>
            Gets or sets the geometric translation. 
            Geometric transformation only affects the entities attached and leave the child nodes unaffected.
            It will be merged as local transformation when you export the geometric transformation to file types that does not support it.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.GeometricScaling">
      <summary>
            Gets or sets the geometric scaling. 
            Geometric transformation only affects the entities attached and leave the child nodes unaffected.
            It will be merged as local transformation when you export the geometric transformation to file types that does not support it.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.GeometricRotation">
      <summary>
            Gets or sets the geometric euler rotation(measured in degree). 
            Geometric transformation only affects the entities attached and leave the child nodes unaffected.
            It will be merged as local transformation when you export the geometric transformation to file types that does not support it.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.Translation">
      <summary>
            Gets or sets the translation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.Scale">
      <summary>
            Gets or sets the scale
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.PreRotation">
      <summary>
            Gets or sets the pre-rotation represented in degree
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.PostRotation">
      <summary>
            Gets or sets the post-rotation represented in degree
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.EulerAngles">
      <summary>
            Gets or sets the rotation represented in euler angles, measured in degree
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.Rotation">
      <summary>
            Gets or sets the rotation represented in quaternion.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Transform.TransformMatrix">
      <summary>
            Gets or sets the transform matrix.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.GlobalTransform">
      <summary>
            Global transform is similar to <see cref="T:Aspose.ThreeD.Transform" /> but it's immutable while it represents the final evaluated transformation.
            Right-hand coordinate system is used while evaluating global transform
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.GlobalTransform.Translation">
      <summary>
            Gets the translation
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.GlobalTransform.Scale">
      <summary>
            Gets the scale
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.GlobalTransform.EulerAngles">
      <summary>
            Gets the rotation represented in euler angles, measured in degree
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.GlobalTransform.Rotation">
      <summary>
            Gets the rotation represented in quaternion.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.GlobalTransform.TransformMatrix">
      <summary>
            Gets the transform matrix.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.LambertMaterial">
      <summary>
             Material for lambert shading model
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.LambertMaterial.EmissiveColor">
      <summary>
            Gets or sets the emissive color
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.LambertMaterial.AmbientColor">
      <summary>
             Gets or sets the ambient color
            </summary>
      <value>The ambient.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.LambertMaterial.DiffuseColor">
      <summary>
            Gets or sets the diffuse color
            </summary>
      <value>The diffuse.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.LambertMaterial.TransparentColor">
      <summary>
            Gets or sets the transparent color. 
            </summary>
      <value>The color of the transparent.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.LambertMaterial.Transparency">
      <summary>
             Gets or sets the transparency factor.
            The factor should be ranged between 0(0%, fully opaque) and 1(100%, fully transparent)
            Any invalid factor value will be clampped.
            </summary>
      <value>The transparency factor.</value>
    </member>
    <member name="M:Aspose.ThreeD.Shading.LambertMaterial.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.LambertMaterial" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.LambertMaterial.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.LambertMaterial" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="T:Aspose.ThreeD.Shading.Material">
      <summary>
            Material defines the parameters necessary for visual appearance of geometry.
            Aspose.3D provides shading model for <see cref="T:Aspose.ThreeD.Shading.LambertMaterial" />, <see cref="T:Aspose.ThreeD.Shading.PhongMaterial" /> and <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial" /></summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.Material.MapSpecular">
      <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)" /> to assign a specular texture mapping.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.Material.MapDiffuse">
      <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)" /> to assign a diffuse texture mapping.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.Material.MapEmissive">
      <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)" /> to assign a emissive texture mapping.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.Material.MapAmbient">
      <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)" /> to assign a ambient texture mapping.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.Material.MapNormal">
      <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)" /> to assign a normal texture mapping.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Material.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Material" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Material.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Material" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Material.GetTexture(System.String)">
      <summary>
            Gets the texture from the specified slot, it can be material's property name or shader's parameter name
            </summary>
      <returns>The texture.</returns>
      <param name="slotName">Slot name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)">
      <summary>
            Sets the texture to specified slot
            </summary>
      <param name="slotName">Slot name.</param>
      <param name="texture">Texture.</param>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Material.ToString">
      <summary>
            Formats object to string
            </summary>
      <returns>Object string</returns>
    </member>
    <member name="T:Aspose.ThreeD.Shading.NamespaceDoc">
      <summary>
            All shading related classes are defined in this namespace.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.PbrMaterial">
      <summary>
            Material for physically based rendering based on albedo color/metallic/roughness
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.Transparency">
      <summary>
             Gets or sets the transparency factor.
            The factor should be ranged between 0(0%, fully opaque) and 1(100%, fully transparent)
            Any invalid factor value will be clampped.
            </summary>
      <value>The transparency factor.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.NormalTexture">
      <summary>
            Gets or sets the texture of normal mapping
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.SpecularTexture">
      <summary>
            Gets or sets the texture for specular color
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.AlbedoTexture">
      <summary>
            Gets or sets the texture for albedo
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.Albedo">
      <summary>
            Gets or sets the base color of the material 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.OcclusionTexture">
      <summary>
            Gets or sets the texture for ambient occlusion
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.OcclusionFactor">
      <summary>
            Gets or sets the factor of ambient occlusion
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.MetallicFactor">
      <summary>
            Gets or sets the metalness of the material, value of 1 means the material is a metal and value of 0 means the material is a dielectric.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.RoughnessFactor">
      <summary>
            Gets or sets the roughness of the material, value of 1 means the material is completely rough and value of 0 means the material is completely smooth
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.MetallicRoughness">
      <summary>
            Gets or sets the texture for metallic(in R channel) and roughness(in G channel)
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.EmissiveTexture">
      <summary>
            Gets or sets the texture for emissive
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PbrMaterial.EmissiveColor">
      <summary>
            Gets or sets the emissive color
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.PbrMaterial.#ctor">
      <summary>
            Construct a default PBR material instance
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.PbrMaterial.#ctor(System.Drawing.Color)">
      <summary>
            Construct a default PBR material with specified albedo color value.
            </summary>
      <param name="albedo">The default albedo color value</param>
    </member>
    <member name="T:Aspose.ThreeD.Shading.PhongMaterial">
      <summary>
            Material for blinn-phong shading model.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PhongMaterial.SpecularColor">
      <summary>
            Gets or sets the specular color. 
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PhongMaterial.SpecularFactor">
      <summary>
             Gets or sets the specular factor. 
            The formula of specular:
             SpecularColor * SpecularFactor * (N dot H) ^ Shininess
             </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PhongMaterial.Shininess">
      <summary>
              Gets or sets the shininess, this controls the specular highlight's size.
            The formula of specular:
             SpecularColor * SpecularFactor * (N dot H) ^ Shininess
             </summary>
      <value>The shininess.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PhongMaterial.ReflectionColor">
      <summary>
            Gets or sets the reflection color.
            </summary>
      <value>The reflection.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.PhongMaterial.ReflectionFactor">
      <summary>
            Gets or sets the attenuation of the reflection color. 
            </summary>
      <value>The reflection factor.</value>
    </member>
    <member name="M:Aspose.ThreeD.Shading.PhongMaterial.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.PhongMaterial" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.PhongMaterial.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.PhongMaterial" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="T:Aspose.ThreeD.Shading.ShaderMaterial">
      <summary>
            A shader material allows to describe the material by external rendering engine or shader language.
            <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial" /> uses <see cref="T:Aspose.ThreeD.Shading.ShaderTechnique" /> to describe the concrete rendering details, 
            and the most suitable one will be used according to the final rendering platform.
            For example, your <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial" /> instance can have two technique, one is defined by HLSL, and another is defined by GLSL
            Under non-window platform the GLSL should be used instead of HLSL 
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.ShaderMaterial.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.ShaderMaterial.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderMaterial.Techniques">
      <summary>
            Gets all available techniques defined in this material.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.ShaderTechnique">
      <summary>
            A shader technique represents a concrete rendering implementation.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.ShaderTechnique.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ShaderTechnique" /> class.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.Description">
      <summary>
            Gets or sets the description of this technique
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderLanguage">
      <summary>
            Gets or sets the shader language used by this technique.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderVersion">
      <summary>
            Gets or sets the shader version used by this technique.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderFile">
      <summary>
            Gets or sets the file name of the external shader file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderContent">
      <summary>
            Gets or sets the content of a embedded shader script.
            It could be HLSL/GLSL shader source file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderEntry">
      <summary>
            Gets or sets the entry point of the shader, some shader like HLSL can have customized shader entries.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.RenderAPI">
      <summary>
            Gets or sets the rendering API used by this technique
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.RenderAPIVersion">
      <summary>
            Gets or sets the version of the rendering API.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderParameters">
      <summary>
            Gets the shader parameter definition.
            The key is the name of the dynamic property, and value is the shader parameter name that the property connected to.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.ShaderTechnique.AddBinding(System.String,System.String)">
      <summary>
            Binds the dynamic property to shader parameter
            </summary>
      <param name="property">The name of the dynamic property.</param>
      <param name="shaderParameter">The name of the shader parameter.</param>
    </member>
    <member name="T:Aspose.ThreeD.Shading.ShadingLanguage">
      <summary>
            Commonly used shading languages
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.RenderMan">
      <summary>
            RenderMan shading language.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.HoudiniVEX">
      <summary>
            Houdini VEX Shading language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.Gelato">
      <summary>
            The gelato shading language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.OpenShadingLanguage">
      <summary>
            Open shading language is developed by Sony Pictures Imageworks used in its Arnold renderer.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.ARBAssembly">
      <summary>
            ARB assembly language is a low-level shading language created by OpenGL Architecture Review Board to standardize GPU instructions.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.DirectXShaderAssembly">
      <summary>
            The DirectX shader assembly language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.HLSL">
      <summary>
            DirectX High-Level Shader language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.GLSL">
      <summary>
            The GLSL
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.AGAL">
      <summary>
            Adobe Graphics Assembly Language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.PSSL">
      <summary>
            PlayStation Shader Language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.Metal">
      <summary>
            iOS Metal Shading language
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.CGFX">
      <summary>
            NVIDIA Cg 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.SFX">
      <summary>
            SFX
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.MentalRay">
      <summary>
            Mental Ray Shader language
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.RenderingAPI">
      <summary>
            Commonly used rendering APIs
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.None">
      <summary>
            No rendering API
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Preview">
      <summary>
            PreviewColorAPI, compatible with FBX
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.DirectX">
      <summary>
            DirectX
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.OpenGL">
      <summary>
            OpenGL
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.OpenGLES">
      <summary>
            OpenGL ES
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Mantle">
      <summary>
            AMD Mantle
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Metal">
      <summary>
            Metal developed by Apple
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Vulkan">
      <summary>
            Vulkan
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.RenderMan">
      <summary>
            RenderMan
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.RenderWare">
      <summary>
            RenderWare
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Stage3D">
      <summary>
            Stage3D used in Adobe Flash
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.MentalRay">
      <summary>
            MentalRay
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Custom">
      <summary>
            Custom rendering APi
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.Texture">
      <summary>
             This class defines the texture from an external file.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.Texture.EnableMipMap">
      <summary>
            Gets or sets if the mipmap is enabled for this texture
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.Texture.Content">
      <summary>
            Gets or sets the binary content of the texture.
            The embedded texture content is optional, user should load texture from external file if this is missing.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.Texture.FileName">
      <summary>
            Gets or sets the associated texture file. 
            </summary>
      <value>The name of the file.</value>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Texture.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Texture" /> class.
            </summary>
    </member>
    <member name="M:Aspose.ThreeD.Shading.Texture.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Texture" /> class.
            </summary>
      <param name="name">Name</param>
    </member>
    <member name="T:Aspose.ThreeD.Shading.WrapMode">
      <summary>
            Texture's wrap mode.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.WrapMode.Wrap">
      <summary>
            Tiles the texture on the model's surface, creating a repeating pattern. 
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.WrapMode.Clamp">
      <summary>
            Clamps the texture to the last pixel at the border.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.WrapMode.Mirror">
      <summary>
             The texture will be repeated, but it will be mirrored when the integer part of the coordinate is odd.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.WrapMode.MirrorOnce">
      <summary>
            The texture will be mirrored once, and then clamps to the maximum value.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.WrapMode.Border">
      <summary>
            The coordinates that outside of the range [0.0, 1.0] are set to a specified border color.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.AlphaSource">
      <summary>
            Defines whether the texture contains the alpha channel.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.AlphaSource.None">
      <summary>
            No alpha is defined in the texture
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.AlphaSource.PixelAlpha">
      <summary>
            The alpha is defined by pixel's alpha channel
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.AlphaSource.FixedValue">
      <summary>
            The Alpha is a fixed value which is defined by <see cref="P:Aspose.ThreeD.Shading.TextureBase.Alpha" /></summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.TextureFilter">
      <summary>
            Filter options during texture sampling.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.TextureFilter.None">
      <summary>
            No minification, this is only used by minification filter.
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.TextureFilter.Point">
      <summary>
            Use point sampling
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.TextureFilter.Linear">
      <summary>
            Use linear interpolation for sampling
            </summary>
    </member>
    <member name="F:Aspose.ThreeD.Shading.TextureFilter.Anisotropic">
      <summary>
            Use anisotropic interpolation for sampling, this is only used by minification filter.
            </summary>
    </member>
    <member name="T:Aspose.ThreeD.Shading.TextureBase">
      <summary>
            Base class for all concrete textures.
            Texture defines the look and feel of a geometry surface.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.Alpha">
      <summary>
            Gets or sets the default alpha value of the texture
            This is valid when the <see cref="P:Aspose.ThreeD.Shading.TextureBase.AlphaSource" /> is <see cref="F:Aspose.ThreeD.Shading.AlphaSource.PixelAlpha" />
            Default value is 1.0, valid value range is between 0 and 1
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.AlphaSource">
      <summary>
            Gets or sets whether the texture defines the alpha channel.
            Default value is <see cref="F:Aspose.ThreeD.Shading.AlphaSource.None" /></summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.WrapModeU">
      <summary>
            Gets or sets the texture wrap modes in U.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.WrapModeV">
      <summary>
            Gets or sets the texture wrap modes in V.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.WrapModeW">
      <summary>
            Gets or sets the texture wrap modes in W.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.MinFilter">
      <summary>
            Gets or sets the filter for minification.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.MagFilter">
      <summary>
            Gets or sets the filter for magnification.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.MipFilter">
      <summary>
            Gets or sets the filter for mip-level sampling.
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.UVRotation">
      <summary>
            Gets or sets the rotation of the texture
            </summary>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.UVScale">
      <summary>
            Gets or sets the UV scale.
            </summary>
      <value>The UV scale.</value>
    </member>
    <member name="P:Aspose.ThreeD.Shading.TextureBase.UVTranslation">
      <summary>
            Gets or sets the UV translation.
            </summary>
      <value>The UV translation.</value>
    </member>
    <member name="M:Aspose.ThreeD.Shading.TextureBase.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.TextureBase" /> class.
            </summary>
      <param name="name">Name.</param>
    </member>
    <member name="M:Aspose.ThreeD.Shading.TextureBase.SetTranslation(System.Double,System.Double)">
      <summary>
            Sets the UV translation.
            </summary>
      <param name="u">U.</param>
      <param name="v">V.</param>
    </member>
    <member name="M:Aspose.ThreeD.Shading.TextureBase.SetScale(System.Double,System.Double)">
      <summary>
            Sets the UV scale.
            </summary>
      <param name="u">U.</param>
      <param name="v">V.</param>
    </member>
    <member name="M:Aspose.ThreeD.Shading.TextureBase.SetRotation(System.Double,System.Double)">
      <summary>
            Sets the UV rotation.
            </summary>
      <param name="u">U.</param>
      <param name="v">V.</param>
    </member>
  </members>
</doc>