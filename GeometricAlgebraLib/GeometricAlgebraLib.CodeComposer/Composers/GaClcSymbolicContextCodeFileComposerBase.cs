using GeometricAlgebraLib.SymbolicExpressions.Context;

namespace GeometricAlgebraLib.CodeComposer.Composers
{
    /// <summary>
    /// This class can be used to generate a single base macro or a set of related macros into a single code file. 
    /// Several related bindings of the same macro or related macros can be generated by several calls to the 
    /// GenerateComputationsCode() method with varying binding and target naming results depending on more derived 
    /// class parameters. The SetBaseSymbolicContext() method can be called to change the base macro before calling the
    /// GenerateComputationsCode() method.
    /// </summary>
    public abstract class GaClcSymbolicContextCodeFileComposerBase : 
        GaClcCodeFileComposerBase
    {
        public GaClcSymbolicContextCodeComposer SymbolicContextCodeComposer { get; set; }

        public SymbolicContext Context 
            => SymbolicContextCodeComposer.Context;


        protected GaClcSymbolicContextCodeFileComposerBase(GaCodeLibraryComposerBase codeLibraryComposer, SymbolicContext baseSymbolicContext = null)
            : base(codeLibraryComposer)
        {
            SymbolicContextCodeComposer = new GaClcSymbolicContextCodeComposer(codeLibraryComposer, baseSymbolicContext);
        }

        //protected GaClcSymbolicContextCodeFileComposer(GaClcSymbolicContextCodeComposerDefaults defaults, SymbolicExpressionsContext baseSymbolicContext = null)
        //    : base(defaults.LibraryComposer)
        //{
        //    SymbolicContextCodeComposer = new GaClcSymbolicContextCodeComposer(defaults, baseSymbolicContext);
        //}

        protected GaClcSymbolicContextCodeFileComposerBase(GaClcSymbolicContextCodeComposer contextCodeComposer)
            : base(contextCodeComposer.LibraryComposer)
        {
            SymbolicContextCodeComposer = contextCodeComposer;
        }


        protected virtual void InitializeGenerator(GaClcSymbolicContextCodeComposer contextCodeComposer)
        {
        }

        protected abstract void SetSymbolicContextParametersBindings(SymbolicContextOptions macroBinding);

        //protected abstract void SetTargetVariablesNames(GaClcTargetVariablesNaming targetNaming);


        protected void SetBaseSymbolicContext(SymbolicContext baseSymbolicContext)
        {
            SymbolicContextCodeComposer.SetContext(baseSymbolicContext);
        }

        protected string GenerateComputationsCode()
        {
            //SymbolicContextCodeGenerator.ActionSetSymbolicContextParametersBindings = SetSymbolicContextParametersBindings;

            //SymbolicContextCodeGenerator.ActionSetTargetVariablesNames = SetTargetVariablesNames;

            InitializeGenerator(SymbolicContextCodeComposer);

            return SymbolicContextCodeComposer.Generate();
        }
    }
}
